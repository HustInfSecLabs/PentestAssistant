from dotenv import dotenv_values
config = dotenv_values('.wenxinenv')
import requests
import json
class WenxinBot:
    def __init__(self) -> None:
        self.messages = []
        self.userrole = "user"
        self.botrole = "assistant"
        self.payload = {
            "messages":self.messages,
            "temperature": 0.95,
            "top_p": 0.8,
            "penalty_score": 1,
            "disable_search": False,
            "enable_citation": False
        }
        self.API_KEY = config.get("API_KEY")
        self.SECRET_KEY = config.get("SECRET_KEY")
        self.access_token = ""
    def get_access_token(self):
        url = config.get("token_url")
        params = {"grant_type": "client_credentials", "client_id": self.API_KEY, "client_secret": self.SECRET_KEY}
        self.access_token = str(requests.post(url, params=params).json().get("access_token"))
    def send_message(self, content):
        self.messages.append({"role":self.userrole,"content":content})
        url = config.get("wenxin_4_0104_query_url")+self.access_token
        payload = json.dumps(self.payload)
        headers = {
            'Content-Type': 'application/json'
        }
        response = requests.request("POST", url, headers=headers, data=payload)
        result = json.loads(response.text)["result"]
        self.messages.append({"role":self.botrole,"content":result})
        print(result)
        return result
    def multi_round_test(self):
        while True:
            input_value = input("请输入问题（输入'quit'退出）: ")
            if input_value == 'quit':
                break
            else:
                
                self.send_message(input_value)

if __name__ == '__main__':
    bot = WenxinBot()
    bot.get_access_token()
    bot.multi_round_test()