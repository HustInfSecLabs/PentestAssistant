import re
from typing import Union

import semantic_kernel as sk

from log import logger
from bot import bot_state, StateEnum, ReturnCodeEnum, ProgressEnum, TaskEnum
from config.add_completion_service import add_completion_service
from planner import NmapPlanner, VulnerabilityPlanner, TranslatePlanner, SummaryPlanner, CapChecker
from plugins.NmapPlugin.Nmap import Nmap
from plugins.VulnerabilityDetectionPlugin.VulnerablilityDetection import VulnerabilityDetection
from retrieval import BgeReranker


class StGPT:

    def __init__(self, reranker_name_or_path: str) -> None:
        self.kernel = sk.Kernel()
        # self.kernel.add_completion_service()
        add_completion_service(self.kernel)
        self.nmap_planner = NmapPlanner(
            self.kernel,
            skill_name="Nmap",
            reranker=BgeReranker(reranker_name_or_path))
        self.vulnerability_planner = VulnerabilityPlanner(
            self.kernel, skill_name="VulnerabilityDetection")
        self.translate_planner = TranslatePlanner(self.kernel, skill_name="")
        self.summary_planner = SummaryPlanner(self.kernel, skill_name="")
        self.capchecker = CapChecker(self.kernel, skill_name="")
        self.nmap_plan = None
        self.vulnerability_plan = None
        logger.info(": Start StGPT Service")

    def import_skill(self) -> None:
        self.kernel.import_skill(VulnerabilityDetection(),
                                 "VulnerabilityDetection")
        self.kernel.import_skill(Nmap(), "Nmap")

    def check_addr(self, query: str) -> bool:
        ip_pattern = "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
        url_pattern = "((http|https)://)?[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[0-9]{1,5})?(/[a-zA-Z0-9\\-\\._\\?\\,'/\\\\+&%\\$#\\=~]*)?"
        if re.search(ip_pattern, query) or re.search(url_pattern, query):
            return True
        return False

    async def exec_translate_async(self, query: str) -> Union[int, str]:
        try:
            plan = await self.translate_planner.create_plan_async(query)
            result = await self.translate_planner.execute_plan_async(plan)
        except:
            return ReturnCodeEnum.EXEC_TRANSLATE_FAIL, "翻译结果生成计划失败。"
        return 0, result

    async def exec_vulnerability_detection_async(
            self, query: str) -> Union[int, str]:
        error_message, plan = await self.vulnerability_planner.create_plan_async(
            query)
        if len(error_message) != 0:
            return ReturnCodeEnum.CREATE_FUNCTION_FORMAT_FAIL, error_message

        result = await self.vulnerability_planner.execute_plan_async(plan)
        return 0, result

    async def exec_check_capability(
            self, query: str) -> bool:  #0 represent imcapable, 1 means capable
        try:
            plan = await self.capchecker.create_plan_async(query)
            result = await self.capchecker.execute_plan_async(plan)
        except:
            return ReturnCodeEnum.EXEC_TRANSLATE_FAIL, "需求检测生成计划失败。"
        return result

    async def exec_nmap_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.nmap_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN,
                            return_code=return_code,
                            task=TaskEnum.EXEC_PLAN)
        self.nmap_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.nmap_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL
                            if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result

    async def generate_async(self, query: str) -> Union[int, str]:
        bot_state.reset_state()

        if bot_state.state != StateEnum.IN_PROGRESS:
            if not self.check_addr(query):
                bot_state.set_state(
                    progress=0,
                    return_code=ReturnCodeEnum.CHECK_QUERY_FAIL,
                    task=TaskEnum.STOP)
                return ReturnCodeEnum.CHECK_QUERY_FAIL, "您好，我是 Web 安全扫描机器人，可以试试这么问：\n①：帮我对www.baidu.com进行TCP端口扫描\n②：帮我对该222.20.126.167地址进行默认的端口扫描\n\n*提问需要表明扫描意图和目标地址哦~"

            cap_check_result_string = await self.exec_check_capability(query)
            try:
                cap_check_result = int(cap_check_result_string.strip())
            except:
                return ReturnCodeEnum.CHECK_CAP_FAIL, "需求检测生成的计划格式错误。"
            if not cap_check_result:
                bot_state.set_state(progress=0, return_code=ReturnCodeEnum.CHECK_QUERY_FAIL, task=TaskEnum.STOP)
                return ReturnCodeEnum.CHECK_CAP_FAIL, "非常抱歉，我目前支持资产探测，服务发现，以及WEB漏洞扫描功能，您的需求我目前暂时无法实现~"

            return_code, nmap_result = await self.exec_nmap_async(query,
                                                                  exec=True)
            if return_code != 0:
                return return_code, ""

            return_code, vulnerability_detection_result = await self.exec_vulnerability_detection_async(
                query)
            bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN,
                                return_code=return_code,
                                task=TaskEnum.STOP)
            if return_code != 0:
                return return_code, vulnerability_detection_result

            return ReturnCodeEnum.SUCCESS, vulnerability_detection_result

        elif bot_state.return_code == ReturnCodeEnum.CREATE_FUNCTION_PARAM_FAIL:
            return_code, plan = await self.nmap_planner.create_plan_for_completion_async(
                query, self.nmap_plan)
            bot_state.set_state(progress=ProgressEnum.CREATE_PLAN,
                                return_code=return_code,
                                task=TaskEnum.EXEC_PLAN)
            if return_code != 0:
                return return_code, ""

            nmap_result = await self.nmap_planner.execute_plan_async(
                plan, exec)
            bot_state.set_state(
                progress=ProgressEnum.EXEC_PLAN,
                return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL
                if len(nmap_result) == 0 else 0,
                task=TaskEnum.TRANSLATE_PLAN)
            if len(nmap_result) == 0:
                return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

            return_code, vulnerability_detection_result = await self.exec_vulnerability_detection_async(
                query)
            bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN,
                                return_code=return_code,
                                task=TaskEnum.STOP)
            if return_code != 0:
                return return_code, vulnerability_detection_result

            return ReturnCodeEnum.SUCCESS, vulnerability_detection_result

    async def summary_async(self, data: str) -> Union[int, str]:
        plan = await self.summary_planner.create_plan_async(data)
        result = await self.summary_planner.execute_plan_async(plan)
        return 0, result
