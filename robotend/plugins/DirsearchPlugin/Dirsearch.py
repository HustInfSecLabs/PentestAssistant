from semantic_kernel.skill_definition import (
    sk_function,
    sk_function_context_parameter,
)
from semantic_kernel.orchestration.sk_context import SKContext


class Dirsearch:

    @sk_function(
        description="扫描一个网站或地址的web目录.",
        name="scanDir")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def scanDir(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} -e php"
        return print_str
    
    @sk_function(
        description="递归扫描一个网站或地址的web目录.",
        name="scanDirRecursive")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def scanDirRecursive(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} -r"
        return print_str
    
    @sk_function(
        description="递归扫描一个网站或地址的web目录，对每个目录深度执行递归扫描。",
        name="scanDeepRecursive")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def scanDeepRecursive(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --deep-recursive"
        return print_str
    

    @sk_function(
        description="递归扫描一个网站或地址的web目录，并设置最大递归深度，默认为2。",
        name="scanDepth")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="最大递归的深度", name="depth")

    #split
    def scanDepth(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} -R {context['depth']}"
        return print_str
    
    @sk_function(
        description="递归扫描一个网站或地址的web目录，并设置扫描的最大运行时间，默认为60s。",
        name="scanMaxTime")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="最大的运行时间", name="time")

    #split
    def scanMaxTime(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --max-time=SECONDS {context['time']}"
        return print_str
    

    @sk_function(
        description="递归扫描一个网站或地址的web目录，并设置请求的HTTP方法，默认为GET。",
        name="scanMethod")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="请求的HTTP方法", name="method")

    #split
    def scanMethod(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} -m {context['method']}"
        return print_str
    
    @sk_function(
        description="递归扫描一个网站或地址的web目录，在扫描时为每个请求选择随机User-Agent。",
        name="scanUserAgent")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def scanUserAgent(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --random-agent"
        return print_str
    

    @sk_function(
        description="递归扫描一个网站或地址的web目录，在扫描时设置连接超时选项，默认为3s。",
        name="scanTimeout")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="扫描时连接超时选项", name="timeout")

    #split
    def scanTimeout(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --timeout {context['timeout']}"
        return print_str
    

    @sk_function(
        description="递归扫描一个网站或地址的web目录，在扫描时设置请求之间的延迟，默认为2s。",
        name="scanDelay")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="扫描时请求之间的延迟", name="delay")

    #split
    def scanDelay(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --delay {context['delay']}"
        return print_str
    

    @sk_function(
        description="递归扫描一个网站或地址的web目录，在扫描时设置每秒的最大请求数，默认为100。",
        name="scanMaxRate")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="扫描时每秒最大的请求数", name="rate")

    #split
    def scanMaxRate(self, context: SKContext) -> str:
        print_str = f"python dirsearch.py -u {context['url']} --max-rate {context['rate']}"
        return print_str
    