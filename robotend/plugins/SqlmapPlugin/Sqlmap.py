from semantic_kernel.skill_definition import (sk_function,
                                              sk_function_context_parameter)
from semantic_kernel.orchestration.sk_context import SKContext


class Sqlmap:
    #Function1: Use sqlmap to scan URLs
    @sk_function(
        description=
        "Detect SQL injection vulnerabilities",
        name="sql_injection",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def sql_injection(self, context: SKContext) -> str:
        print_str = f"sqlmap -u {context['target']} --batch"#All parameters are default
        return print_str
    
    #Function2: Detect SQL injection vulnerabilities in specified databases
    @sk_function(
        description=
        "Detect SQL injection vulnerabilities in specified databases",
        name="sql_injection_database",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="Specify the database to be scanned",
        name="database",
    )
    def sql_injection_database(self, context: SKContext) -> str:
        print_str = f"sqlmap -u {context['target']} --dbms={context['database']}"
        return print_str

    #Function3: --level 可指定payload测试复杂等级。共有五个级别，从1-5，默认值为1。等级越高，测试的payload越复杂，当使用默认等级注入不出来时，可以尝试使用–level来提高测试等级。
    @sk_function(
        description=
        "SQL injection vulnerabilities are detected with different levels of detection",
        name="sql_injection_level",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="Scan on a scale of five levels, from 1-5",
        name="level",
    )
    def sql_injection_level(self, context: SKContext) -> str:#python sqlmap.py -u URL --level 等级
        print_str = f"sqlmap -u {context['target']} --level {context['level']}"
        return print_str
    
    #Function4: Use the --user-agent parameter to set a custom User-Agent. User-Agent is a header field in an HTTP request that identifies the client information that sent the request
    @sk_function(
        description=
        "Use the --user-agent parameter to set a custom User-Agent. User-Agent is a header field in an HTTP request that identifies the client information that sent the request",
        name="sql_injection_User_Agent",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="User-Agent is a header field in an HTTP request that identifies the client information that sent the request",
        name="User_Agent",
    )
    def sql_injection_User_Agent(self, context: SKContext) -> str:#python sqlmap.py -u "URL" --user-agent="自定义User-Agent"
        print_str = f"sqlmap -u {context['target']} --User-Agent={context['User_Agent']}"
        return print_str
    
    #Function5: The –tamper parameter can be used to avoid sensitive character filtering and WAF rules to a certain extent, and then carry out infiltration attacks. sqlmap provides some tamper scripts, which are stored in the sqlmap project path/tamper/ folder, or you can write your own tamper scripts to achieve custom bypass.
    @sk_function(
        description=
        "The –tamper parameter can be used to avoid sensitive character filtering and WAF rules to a certain extent, and then carry out infiltration attacks. sqlmap provides some tamper scripts, which are stored in the sqlmap project path/tamper/ folder, or you can write your own tamper scripts to achieve custom bypass.",
        name="sql_injection_tamper",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="sqlmap provides some tamper scripts, which are stored in the sqlmap project path/tamper/ folder, or you can write your own tamper scripts to achieve custom bypass. Commonly used tamper files are space2comment.py and between.py",
        name="tamper",
    )
    def sql_injection_tamper(self, context: SKContext) -> str:#python sqlmap.py -u "URL" --tamper 脚本路径1,脚本路径2
        print_str = f"sqlmap -u {context['target']} --tamper {context['tamper']}"
        return print_str
    
    #Function6: 使用–technique参数可用于指定要测试的SQL注入类型，默认情况下，sqlmap会测试所有的注入类型。如果想指定测试某几种诸如类型，可以使用–technique指定。
    @sk_function(
        description=
        "The –technique parameter can be used to specify the type of SQL injection to be tested, and by default, sqlmap tests all injection types. If you want to specify a certain type of test, you can use –technique.",
        name="sql_injection_technique",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="For each type, sqlmap provides letter options, which can be combined to specify multiple injection types for testing. B: Boolean-based blinds,E: Error-based,U: based on federated queries,S: stacked query,T: Time-based blinds,Q: Inline query",
        name="technique",
    )
    def sql_injection_technique(self, context: SKContext) -> str:#python sqlmap.py -u URL --technique BE表示仅测试布尔盲注和基于报错的注入。默认为BEUSTQ
        print_str = f"sqlmap -u {context['target']} --technique {context['technique']}"
        return print_str
    
    #Function7: Use the -p parameter to specify the injection point (parameter) to be tested
    @sk_function(
        description="Use the -p parameter to specify the injection point (parameter) to be tested",     
        name="sql_injection_p",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="Replace the injection point with the name of the specific parameter you want to test. By specifying the -p parameter, sqlmap will perform SQL injection tests specifically on that parameter.",
        name="p",
    )
    def sql_injection_p(self, context: SKContext) -> str:#python sqlmap.py -u URL --technique BE表示仅测试布尔盲注和基于报错的注入。默认为BEUSTQ
        print_str = f"sqlmap -u {context['target']} --p {context['p']}"
        return print_str