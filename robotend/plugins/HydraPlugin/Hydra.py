from semantic_kernel.skill_definition import (
    sk_function,
    sk_function_context_parameter,
)
from semantic_kernel.orchestration.sk_context import SKContext


class Hydra:

    @sk_function(
        description="对目标地址进行RDP协议的账户密码爆破",
        name="burstRDP")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstRDP(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} rdp"
        return print_str
    
    @sk_function(
        description="对目标地址进行FTP协议的账户密码爆破",
        name="burstFTP")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstFTP(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} ftp"
        return print_str
    

    @sk_function(
        description="对目标地址进行SSH协议的账户密码爆破",
        name="burstSSH")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstSSH(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} ssh"
        return print_str
    

    @sk_function(
        description="对目标地址进行Web页面的账户密码爆破，并使用GET的请求方式",
        name="burstWebGET")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="目标网址的路由", name="route")

    #split
    def burstWebGET(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} http-get {context['route']}"
        return print_str
    

    @sk_function(
        description="对目标地址进行Web页面的账户密码爆破，使用https协议",
        name="burstHTTPS")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")
    @sk_function_context_parameter(description="目标网址的带爆破页面", name="route")

    #split
    def burstHTTPS(self, context: SKContext) -> str:
        print_str = f"hydra -m {context['route']} -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} https"
        return print_str
    


    @sk_function(
        description="对目标地址进行teamspeak的账户密码爆破",
        name="burstTeamSpeak")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstHTTPS(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} teamspeak"
        return print_str


    @sk_function(
        description="对目标地址进行SMB的账户密码爆破",
        name="burstSMB")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstSMB(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} smb"
        return print_str


    @sk_function(
        description="对目标地址进行POP3的账户密码爆破",
        name="burstPOP3")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstPOP3(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} pop3"
        return print_str
    

    @sk_function(
        description="对目标地址的mysql进行账户密码爆破",
        name="burstMysql")
    @sk_function_context_parameter(description="Target ip or hostname", name="url")

    #split
    def burstMysql(self, context: SKContext) -> str:
        print_str = f"hydra -L ./plugins/HydraPlugin/username.txt -P ./PentestAssistant/plugins/HydraPlugin/password.txt {context['url']} mysql"
        return print_str