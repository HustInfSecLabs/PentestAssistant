from semantic_kernel.skill_definition import (sk_function,
                                              sk_function_context_parameter)
from semantic_kernel.orchestration.sk_context import SKContext

'''
    Using a URL list for security testing can be painful as there are a lot of URLs that have uninteresting/duplicate content; uro aims to solve that.

    It doesn't make any http requests to the URLs and removes:

    incremental urls e.g. /page/1/ and /page/2/
    blog posts and similar human written content e.g. /posts/a-brief-history-of-time
    urls with same path but parameter value difference e.g. /page.php?id=1 and /page.php?id=2
    images, js, css and other "useless" files
'''
class Uro:
    # Function1: 从dirsearch、dirmap中获得的大量url中筛选获取可能有用的url
    @sk_function(
        description=
        "reading urls from a file",
        name="uro_",
    )
    @sk_function_context_parameter(
        description="target url address with get request",
        name="target",
    )
    def xss_get_test(self, context: SKContext) -> str:
        print_str = f"uro -u {context['target']}"
        return print_str

    # Function2: uro will ignore all other extensions except the ones provided.忽略未给出到的类型,such as :uro -w php asp html
    @sk_function(
        description=
        "uro will ignore all other extensions except the ones provided.",
        name="uro_",
    )
    @sk_function_context_parameter(
        description="target url address",
        name="target",
    )
    @sk_function_context_parameter(
        description="the name of the extensions which you want to ",
        name="postdata",
    )
    def xss_post_test(self, context: SKContext) -> str:
        print_str = f"uro -u {context['target']} -w {context['postdata']}"
        return print_str

    # Function3:在URL路径中注入有效载荷，例如http://example.com/search/<payload>，可以使用--path选项。
    @sk_function(
        description=
        "Want to inject payloads in the URL path like http://example.com/search/<payload>, you can do that with --path switch.",
        name="xss_urlpath_test",
    )
    @sk_function_context_parameter(
        description="target url address with injected payload in url path",
        name="target",
    )
    def xss_urlpath_test(self, context: SKContext) -> str:
        print_str = f"xsstrike -u {context['target']} --path"
        return print_str
