const express = require('express');
const { param, body, validationResult } = require('express-validator');
const path = require('path');
const { Scan, ScanProfile } = require(path.resolve(__dirname, '../utils/db'));
const router = express.Router();
// TODO: 扫描管理
const { scanManager } = require(path.resolve(__dirname, '../utils/scanManager'));

/**
 * 获得所有扫描的基本信息列表
 */
router.get('/', [], (req, res) => {
  Scan.find().then(scans => {
    // 获取成功
    const scanList = [];
    scans.map(scan => scan.status === 'Running'
      ? null
      : scanList.push({
        scanId: scan._id,
        name: scan.name,
        target: scan.target,
        status: scan.status,
        createTime: scan.createTimeFormat,
        creator: scan.creator
      }));
    res.json({ scans: scanList });
  }).catch(err => {
    // 获取失败，其他错误
    res.status(500).json({ msg: '获取扫描信息出错：' + err.message });
  });
});

/**
 * 获得扫描详细信息
 */
router.get('/:scanId/details', [
  param('scanId').notEmpty().withMessage('扫描ID不能为空').isMongoId().withMessage((wrongId) => `扫描ID格式不正确: ${wrongId}`)
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 查询扫描
  Scan.findById(req.params.scanId).then(scan => {
    res.json({
      scanId: scan._id,
      name: scan.name,
      target: scan.target,
      status: scan.status,
      createTime: scan.createTimeFormat,
      creator: scan.creator,
      profile: scan.profile,
      engineStatus: {
        w3afStatus: {
          status: scan?.engineStatus?.w3afStatus?.status ?? 'Unknown',
          message: scan?.engineStatus?.w3afStatus?.message ?? '引擎状态未知'
        },
        zaproxyStatus: {
          status: scan?.engineStatus?.zaproxyStatus?.status ?? 'Unknown',
          message: scan?.engineStatus?.zaproxyStatus?.message ?? '引擎状态未知'
        },
        arachniStatus: {
          status: scan?.engineStatus?.arachniStatus?.status ?? 'Unknown',
          message: scan?.engineStatus?.arachniStatus?.message ?? '引擎状态未知'
        }
      }
    });
  }).catch(err => {
    res.status(500).json({ msg: '获取扫描信息出错：' + err.message });
  });
});

/**
 * 新增一个扫描
 */
router.post('/', [
  body('name').notEmpty().withMessage('名称不能为空'),
  body('target').notEmpty().withMessage('目标不能为空').isURL().withMessage((wrongUrl) => `目标格式不正确: ${wrongUrl}`),
  body('profileId').notEmpty().withMessage('扫描配置ID不能为空')
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 拷贝扫描配置
  ScanProfile.findById(req.body.profileId).then(profile => {
    if (!profile) {
      return res.status(400).json({ msg: `扫描配置不存在: ${req.body.profileId}` });
    }

    // 检查是否有在运行的扫描
    Scan.findOne({ status: 'Running' }).then(runningScan => {
      if (runningScan) {
        return res.status(400).json({ msg: '已有扫描正在运行' });
      }

      // 保存扫描
      const scanProfileCopy = {};
      Object.assign(scanProfileCopy, profile._doc);
      delete scanProfileCopy.isDefault;
      const scan = new Scan({
        name: req.body.name,
        target: req.body.target,
        status: 'Running',
        creator: req.name,
        profile: scanProfileCopy
      });

      return scan.save().then(success => {
        // 执行扫描
        return scanManager.startScanTask(scan._id);
      }).then(success => {
        res.json({ msg: 'ok' });
      }).catch(err => {
        res.status(500).json({ msg: '执行扫描出错：' + err.message });
      });
    });
  }).catch(err => {
    res.status(500).json({ msg: '新建扫描出错：' + err.message });
  });
});

/**
 * 删除一个扫描
 */
router.delete('/:scanId', [
  param('scanId').notEmpty().withMessage('扫描ID不能为空').isMongoId().withMessage('扫描ID格式不正确')
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 查询扫描并删除
  Scan.findById(req.params.scanId).then(scan => {
    if (!scan) {
      return res.status(400).json({ msg: `扫描不存在: ${req.params.scanId}` });
    }
    // 不允许删除正在运行的扫描
    if (scan.status === 'Running') {
      return res.status(400).json({ msg: '扫描正在运行，请先停止扫描' });
    }

    // 删除扫描
    scan.remove().then(success => {
      res.json({ msg: 'ok' });
    });
  }).catch(err => {
    res.status(500).json({ msg: '删除扫描出错：' + err.message });
  });
});

/**
 * 获取正在运行的扫描
 */
router.get('/running', [], (req, res) => {
  // 查询正在运行的扫描
  Scan.findOne({ status: 'Running' }).then(scan => {
    if (!scan) {
      return res.json({ scanId: null });
    }

    // 获取扫描进度
    scanManager.getScanTaskStatus(scan._id).then(retStatus => {
      res.json({
        scanId: scan._id,
        name: scan.name,
        target: scan.target,
        createTime: scan.createTimeFormat,
        creator: scan.creator,
        status: retStatus.status,
        progress: retStatus.progress,
        urlCount: retStatus.urlCount,
        vulnCount: retStatus.vulnCount
      });
    }).catch(err => {
      res.status(500).json({ msg: '获取扫描进度出错：' + err.message });
    });
  }).catch(err => {
    res.status(500).json({ msg: '获取正在运行的扫描出错：' + err.message });
  });
});

/**
 * 停止正在运行的扫描
 */
router.post('/running/stop', [], (req, res) => {
  // 查询正在运行的扫描
  Scan.findOne({ status: 'Running' }).then(scan => {
    if (!scan) {
      return res.status(400).json({ msg: '没有正在运行的扫描' });
    }
    // TODO: 停止扫描
    scanManager.stopScanTask(scan._id).then(success => {
      res.json({ msg: 'ok' });
    }).catch(err => {
      res.status(500).json({ msg: '停止扫描过程出错：' + err.message });
    });
  }).catch(err => {
    res.status(500).json({ msg: '停止扫描出错：' + err.message });
  });
});

/**
 * 获得扫描配置列表
 */
router.get('/profiles', [], (req, res) => {
  ScanProfile.find().then(profiles => {
    const profileList = [];
    profiles.map(profile => profileList.push({
      profileId: profile._id,
      name: profile.name
    }));
    res.json({ profiles: profileList });
  }).catch(err => {
    res.status(500).json({ msg: '获取扫描配置出错：' + err.message });
  });
});

/**
 * 获得扫描配置详细信息
 */
router.get('/profiles/:profileId', [
  param('profileId').notEmpty().withMessage('扫描配置ID不能为空').isMongoId().withMessage('扫描配置ID格式不正确')
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 查询扫描配置
  ScanProfile.findById(req.params.profileId).then(profile => {
    res.json({
      profileId: profile._id,
      name: profile.name,
      maxScanTime: profile.maxScanTime,
      maxResponseTime: profile.maxResponseTime,
      auth: profile.auth,
      authUsername: profile.authUsername,
      authPassword: profile.authPassword,
      warningThreshold: profile.warningThreshold,
      policies: profile.policies,
      headers: profile.headers,
      proxy: profile.proxy,
      engine: profile.engine
    });
  }).catch(err => {
    res.status(500).json({ msg: '获取扫描配置出错：' + err.message });
  });
});

/**
 * 新增一个扫描配置
 */
router.post('/profiles', [
  body('name').notEmpty().withMessage('配置名称不能为空'),
  body('maxScanTime').optional().isInt({ min: 1 }).withMessage((wrongTime) => `最大扫描时间格式不正确: ${wrongTime}，必须为正整数`),
  body('maxResponseTime').optional().isInt({ min: 1 }).withMessage((wrongTime) => `最大响应时间格式不正确: ${wrongTime}，必须为正整数`)
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 保存扫描配置
  const profile = new ScanProfile({
    name: req.body.name,
    maxScanTime: req.body?.maxScanTime ?? 600,
    maxResponseTime: req.body?.maxResponseTime ?? 30,
    auth: req.body?.auth ?? 'None',
    authUsername: req.body?.authUsername ?? '',
    authPassword: req.body?.authPassword ?? '',
    warningThreshold: req.body?.warningThreshold ?? 'informational',
    policies: req.body?.policies ?? 'GENERIC',
    headers: req.body?.headers ?? '',
    proxy: req.body?.proxy ?? '',
    engine: req.body?.engine ?? {
      w3af: true,
      zaproxy: true,
      arachni: true
    }
  });
  profile.save().then(profile => {
    res.json({ profileId: profile._id });
  }).catch(err => {
    res.status(500).json({ msg: '保存扫描配置出错：' + err.message });
  });
});

/**
 * 修改一个扫描配置
 */
router.put('/profiles/:profileId', [
  param('profileId').notEmpty().withMessage('扫描配置ID不能为空').isMongoId().withMessage((wrongId) => `扫描配置ID格式不正确: ${wrongId}`),
  body('name').optional().notEmpty().withMessage('配置名称不能为空'),
  body('maxScanTime').optional().isInt({ min: 1 }).withMessage((wrongTime) => `最大扫描时间格式不正确: ${wrongTime}，必须为正整数`),
  body('maxResponseTime').optional().isInt({ min: 1 }).withMessage((wrongTime) => `最大响应时间格式不正确: ${wrongTime}，必须为正整数`)
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 修改扫描配置
  const oldProfile = ScanProfile.findById(req.params.profileId);
  ScanProfile.findByIdAndUpdate(req.params.profileId, {
    name: req.body.name ?? oldProfile.name,
    maxScanTime: req.body.maxScanTime ?? oldProfile.maxScanTime,
    maxResponseTime: req.body.maxResponseTime ?? oldProfile.maxResponseTime,
    auth: req.body.auth ?? oldProfile.auth,
    authUsername: req.body.authUsername ?? oldProfile.authUsername,
    authPassword: req.body.authPassword ?? oldProfile.authPassword,
    warningThreshold: req.body.warningThreshold ?? oldProfile.warningThreshold,
    policies: req.body.policies ?? oldProfile.policies,
    headers: req.body.headers ?? oldProfile.headers,
    proxy: req.body.proxy ?? oldProfile.proxy,
    engine: {
      w3af: req.body.engine?.w3af ?? oldProfile.engine?.w3af,
      zaproxy: req.body.engine?.zaproxy ?? oldProfile.engine?.zaproxy,
      arachni: req.body.engine?.arachni ?? oldProfile.engine?.arachni
    }
  }).then(profile => {
    res.json({ profileId: profile._id });
  }).catch(err => {
    res.status(500).json({ msg: '修改扫描配置出错：' + err.message });
  });
});

/**
 * 删除一个扫描配置
 */
router.delete('/profiles/:profileId', [
  param('profileId').notEmpty().withMessage('扫描配置ID不能为空').isMongoId().withMessage((wrongId) => `扫描配置ID格式不正确: ${wrongId}`)
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  // 删除扫描配置
  ScanProfile.findById(req.params.profileId).then(profile => {
    if (!profile) {
      return res.status(404).json({ msg: `扫描配置不存在: ${req.params.profileId}` });
    }
    if (profile.isDefault) {
      return res.status(400).json({ msg: '默认扫描配置不能删除' });
    }
    profile.delete().then(() => {
      res.json({ msg: 'ok' });
    });
  }).catch(err => {
    res.status(500).json({ msg: '删除扫描配置出错：' + err.message });
  });
});

module.exports = { router };
