const express = require('express');
const { param, body, validationResult } = require('express-validator');
const path = require('path');
const router = express.Router();

const { AI_URL } = require('../config/ai_config');
const axios = require('axios');
const { Scan } = require('../utils/db');

/**
 * 发送一条信息，获得机器人的回复
 */
router.post('/query', [
  body('message').notEmpty().withMessage('聊天消息不能为空')
], (req, res) => {
  // 验证参数
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ msg: errors.array()[0].msg });
  }

  axios.create({
    timeout: 300000 // 设置超时时间为5分钟
  }).post(`${AI_URL}/chat`, {
    question: req.body.message
  }).then(response => {
    res.json(response.data);
  }).catch(err => {
    res.status(500).json({ msg: '发送聊天消息出错：' + err.message });
  });
});

/**
 * 获得机器人的状态
 */
router.get('/status', [], (req, res) => {
  axios.get(`${AI_URL}/status`).then(response => {
    res.json(response.data);
  }).catch(err => {
    res.status(500).json({ msg: '获取机器人状态出错：' + err.message });
  });
});

/**
 * 获得机器人的总结
 */
router.post('/summary', [
  body('scanId').notEmpty().withMessage('扫描ID不能为空').isMongoId().withMessage((wrongId) => `扫描ID格式错误：${wrongId}`)
], (req, res) => {
  // 获取报告
  Scan.findById(req.body.scanId).then(scan => {
    // 获取成功
    if (!scan || !scan.result) {
      res.status(404).json({ msg: `报告不存在: ${req.params.scanId}` });
    } else {
      const formData = new FormData();
      const blob = new Blob([JSON.stringify(scan.result)], { type: 'text/plain;charset=utf-8' });
      const file = new File([blob], 'report.json');
      formData.append('data', file);

      axios.post(`${AI_URL}/summary`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      }).then(response => {
        res.json(response.data);
      }).catch(err => {
        res.status(500).json({ msg: '获取机器人总结出错：' + err.message });
      });
    }
  }).catch(err => {
    // 获取失败，其他错误
    res.status(500).json({ msg: '获取报告信息出错：' + err.message });
  });
});

module.exports = { router };
