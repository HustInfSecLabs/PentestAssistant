/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的context action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');

class ZAPContextAction {
  /**
   * @description 将一个正则表达式添加到上下文中,以便在某个操作中排除或忽略特定的内容
   * @param {string} contextName 目标上下文
   * @param {string} regex 正则表达式
   * @returns {Promise<String>} OK
   */
  setExcludeFromContext = async (contextName, regex) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/excludeFromContext/?apikey=${apikey}&contextName=${contextName}&regex=${regex}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将一个正则表达式添加到上下文中，以便在某个操作中包含或考虑特定的内容
   * @param {string} contextName 目标上下文
   * @param {string} regex 正则表达式
   * @returns {Promise<String>} OK
   */
  setIncludeInContext = async (contextName, regex) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/includeInContext/?apikey=${apikey}&contextName=${contextName}&regex=${regex}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将正则表达式设置为包含和排除上下文条件，两者都以JSON字符串数组的形式提供
   * @param {string} contextName 目标上下文
   * @param {string} incRegexs 包含正则表达式
   * @param {string} excRegexs 用于排除内容的正则表达式
   * @returns {Promise<String>} OK
   */
  setContextRegexs = async (contextName, incRegexs, excRegexs) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/setContextRegexs/?apikey=${apikey}&contextName=${contextName}&incRegexs=${incRegexs}&excRegexs=${excRegexs}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 创建一个具有给定名称的新上下文在当前会话中
   * @param {string} contextName 目标上下文
   * @returns {Promise<String>} OK
   */
  createNewContext = async (contextName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/newContext/?apikey=${apikey}&contextName=${contextName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.contextId;
  };

  /**
   * @description 删除当前会话中的上下文
   * @param {string} contextName 目标上下文
   * @returns {Promise<String>} OK
   */
  removeContext = async (contextName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/removeContext/?apikey=${apikey}&contextName=${contextName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从文件中导入上下文。如果指定了相对文件路径，将根据ZAP“home”目录下的“contexts”目录来解析
   * @param {string} contextFile 文件路径
   * @returns {Promise<String>} OK
   */
  importContext = async (contextFile = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/importContext/?apikey=${apikey}&contextFile=${contextFile}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将具有指定名称的上下文导出到文件。如果指定了相对文件路径，将根据ZAP“home”目录下的“contexts”目录来解析
   * @param {string} contextName 目标上下文
   * @param {string} contextFile 文件路径
   * @returns {Promise<String>} OK
   */
  exportContext = async (contextName, contextFile = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/exportContext/?apikey=${apikey}&contextName=${contextName}&contextFile=${contextFile}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将逗号分隔的指定名称的技术包含到上下文中
   * @param {string} contextName 目标上下文
   * @param {string} technologyNames 指定名称的技术
   * @returns {Promise<String>} OK
   */
  includeContextTechnologies = async (contextName, technologyNames = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/includeContextTechnologies/?apikey=${apikey}&contextName=${contextName}&technologyNames=${technologyNames}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将所有内置技术包含到上下文中
   * @param {string} contextName 目标上下文
   * @returns {Promise<String>} OK
   */
  includeAllContextTechnologies = async (contextName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/includeAllContextTechnologies/?apikey=${apikey}&contextName=${contextName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从上下文中排除以逗号分隔的指定名称的技术
   * @param {string} contextName 目标上下文
   * @param {string} technologyNames 指定名称的技术
   * @returns {Promise<String>} OK
   */
  excludeContextTechnologies = async (contextName, technologyNames) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/excludeContextTechnologies/?apikey=${apikey}&contextName=${contextName}&technologyNames=${technologyNames}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从上下文中排除所有内置技术
   * @param {string} contextName 目标上下文
   * @returns {Promise<String>} OK
   */
  excludeAllContextTechnologies = async (contextName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/excludeAllContextTechnologies/?apikey=${apikey}&contextName=${contextName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将上下文设置为范围内（上下文默认情况下是在范围内的）
   * @param {string} contextName 目标上下文
   * @param {boolean} booleanInScope
   * @returns {Promise<String>} OK
   */
  setContextInScope = async (contextName, booleanInScope) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/setContextInScope/?apikey=${apikey}&contextName=${contextName}&booleanInScope=${booleanInScope}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置上下文的检查策略 - 这定义了ZAP如何检查请求是否经过身份验证
   * @param {string} contextName 目标上下文
   * @param {string} checkingStrategy 其中之一：EACH_RESP，EACH_REQ，EACH_REQ_RESP，POLL_URL
   * @param {string} pollUrl 用于ZAP进行轮询的URL，如果checkingStrategy = POLL_URL，则必须提供，否则会被忽略
   * @param {string} pollData 供应给pollUrl的POST数据，只有在checkingStrategy = POLL_URL时才生效
   * @param {string} pollHeaders 需要添加到轮询请求的任何额外标头，由空格字符分隔，只有在checkingStrategy = POLL_URL时才生效
   * @param {string} pollFrequency 大于零的整数，如果checkingStrategy = POLL_URL，则必须提供，否则会被忽略
   * @param {string} pollFrequencyUnits 其中之一：REQUESTS，SECONDS，如果checkingStrategy = POLL_URL，则必须提供，否则会被忽略
   * @returns {Promise<String>} OK
   */
  setContextCheckingStrategy = async (contextName, checkingStrategy, pollUrl, pollData, pollHeaders, pollFrequency, pollFrequencyUnits) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/context/action/setContextCheckingStrategy/?apikey=${apikey}&contextName=${contextName}&checkingStrategy=${checkingStrategy}&pollUrl=${pollUrl}&pollData=${pollData}
      &pollHeaders=${pollHeaders}&pollFrequency=${pollFrequency}&pollFrequencyUnits=${pollFrequencyUnits}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPContextAction;

const runTest = async () => {
  const client = new ZAPContextAction();
  const res = await client.setExcludeFromContext('默认上下文', '/http?:\\/\\//');
  console.log(res);
  // const res = await client.setIncludeInContext('默认上下文', '/http?:\\/\\//');
  // console.log(res);
  // const res = await client.createNewContext('test');
  // console.log(res);
  // const res = await client.removeContext('test');
  // console.log(res);
  // const res = await client.includeAllContextTechnologies('test');
  // console.log(res);
  // const res = await client.excludeContextTechnologies('test', 'DB');
  // console.log(res);
  // const res = await client.excludeAllContextTechnologies('test');
  // console.log(res);
  // const res = await client.setContextInScope('test', true);
  // console.log(res);
  // const res = await client.setContextCheckingStrategy('test', 'EACH_RESP', '', '', '', '', '');
  // console.log(res);
};

// runTest();
