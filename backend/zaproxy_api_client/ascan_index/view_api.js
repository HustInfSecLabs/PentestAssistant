/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的ascan action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');
const { enabled } = require('express/lib/application');

class ZAPAscanView {
  /**
   * @description  获取扫描的警告id
   * @param {number} scanId  指定扫描任务id
   * @returns {Promise<Array>} 扫描的警告id列表
   */
  getScanAlerts = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/alertsIds/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.alertsIds ?? [];
  };

  /**
   * @description  获取指定扫描任务id的状态
   * @param {number} scanId  指定扫描任务id
   * @returns {Promise<String>} 指定扫描任务id的状态
   */
  getAscanStatus = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/status/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.status ?? '';
  };

  /**
   * @description  获取扫描进度
   * @param {number} scanId  指定扫描任务id
   * @returns {Promise<String>} 扫描进度
   */
  getScanProgress = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/scanProgress/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.scanProgress;
  };

  /**
   * @description  获取具有给定ID的扫描期间发送的消息的ID。可以使用'message'核心视图获取消息
   * @param {number} scanId  指定扫描任务id
   * @returns {Promise<String>} message
   */
  getMessagesIds = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/messagesIds/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.messagesIds;
  };

  /**
   * @description   获取给定 ID 的扫描期间触发的警报的 ID 列表。可以通过 'alert' 核心视图获取警报
   * @param {number} scanId  指定扫描任务id
   * @returns {Promise<String>} message
   */
  getAlertsById = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/alertsIds/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.alertsIds;
  };

  /**
   * @description 获取当前所有的扫描任务的情况
   * @returns {Promise<String>} message
   */
  getAllAscan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/scans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.scans;
  };

  /**
   * @description 获取当前扫描策略名称
   * @returns {Promise<String>} 返回扫描策略
   */
  scanPolicyNames = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/scanPolicyNames/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.scanPolicyNames ?? [];
  };

  /**
   * @description 获取清除主动扫描中排除的URL正则
   * @returns {Promise<String>} 返回URL正则
   */
  excludedFromScan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/excludedFromScan/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.excludedFromScan ?? null;
  };

  /**
   * @description 获取扫描器
   * @param {string} scanPolicyName  扫描策略名称
   * @param {number} policyId  策略id
   * @returns {Promise<String>} 返回扫描器
   */
  getScanners = async (scanPolicyName = '', policyId = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/scanners/?apikey=${apikey}&scanPolicyName=${scanPolicyName}&policyId=${policyId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.scanners;
  };

  /**
   * @description 获取策略
   * @param {string} scanPolicyName  扫描策略名称
   * @param {number} policyId  策略id
   * @returns {Promise<String>} 返回策略
   */
  getPolicies = async (scanPolicyName = '', policyId = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/policies/?apikey=${apikey}&scanPolicyName=${scanPolicyName}&policyId=${policyId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.policies;
  };

  /**
   * @description 获取攻击模式队列
   * @returns {Promise<String>} 返回攻击模式队列
   */
  getAttackModeQueue = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/attackModeQueue/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.attackModeQueue;
  };

  /**
   * @description 获取所有被排除的参数
   * @returns {Promise<String>} 返回名称、URL和参数类型
   */
  getExcludedParams = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/excludedParams/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.excludedParams ?? [];
  };

  /**
   * @description 用已排除参数视图代替
   * @returns {Promise<String>} 返回名称、URL和参数类型
   */
  optionExcludedParamList = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionExcludedParamList/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.optionExcludedParamList ?? [];
  };

  /**
   * @description 获取被排除的参数的全部类型
   * @returns {Promise<String>} 返回ID和名称
   */
  excludedParamTypes = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/excludedParamTypes/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.excludedParamTypes ?? [];
  };

  /**
   * @description 获取攻击策略
   * @returns {Promise<String>} 返回攻击策略
   */
  optionAttackPolicy = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionAttackPolicy/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res?.data?.optionAttackPolicy ?? null;
  };

  /**
   * @description 查看延迟（毫秒）
   * @returns {Promise<String>} 延迟
   */
  optionDelayInMs = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionDelayInMs/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.DelayInMs;
  };

  /**
   * @description 查看处理 Anti-CSRF 令牌的选项
   * @returns {Promise<String>} true/false
   */
  optionHandleAntiCSRFTokens = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionHandleAntiCSRFTokens/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.HandleAntiCSRFTokens;
  };

  /**
   * @description 查看每次扫描的主机数量选项
   * @returns {Promise<String>} 每次扫描的主机数量选项
   */
  optionHostPerScan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionHostPerScan/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.HostPerScan;
  };

  /**
   * @description 查看规则最大持续时间（以分钟为单位）选项
   * @returns {Promise<String>} 规则最大持续时间
   */
  optionMaxRuleDurationInMins = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionMaxRuleDurationInMins/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxRuleDurationInMins;
  };

  /**
   * @description 查看扫描最大持续时间（以分钟为单位）选项
   * @returns {Promise<String>} 扫描最大持续时间
   */
  optionMaxScanDurationInMins = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionMaxScanDurationInMins/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxScanDurationInMins;
  };

  /**
   * @description 查看用户界面中的最大扫描次数选项
   * @returns {Promise<String>} 用户界面中的最大扫描次数选项
   */
  optionMaxScansInUI = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionMaxScansInUI/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxScansInUI;
  };

  /**
   * @description 查看启用目标参数的远程过程调用选项
   * @returns {Promise<String>} number
   */
  optionTargetParamsEnabledRPC = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionTargetParamsEnabledRPC/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.TargetParamsEnabledRPC;
  };

  /**
   * @description 查看启用目标参数的远程过程调用选项
   * @returns {Promise<String>} number
   */
  optionTargetParamsInjectable = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionTargetParamsInjectable/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.TargetParamsInjectable;
  };

  /**
   * @description 查看每主机的线程选项
   * @returns {Promise<String>} number
   */
  optionThreadPerHost = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionThreadPerHost/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.ThreadPerHost;
  };

  /**
   * @description 查看添加查询参数选项
   * @returns {Promise<String>} true/false
   */
  optionAddQueryParam = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionAddQueryParam/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.AddQueryParam;
  };

  /**
   * @description 查看启动时允许攻击选项
   * @returns {Promise<String>} true/false
   */
  optionAllowAttackOnStart = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionAllowAttackOnStart/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.AllowAttackOnStart;
  };

  /**
   * @description 告知当前的扫描器是否应注入HTTP请求头'X-ZAP-Scan-ID
   * @returns {Promise<String>} true/false
   */
  optionInjectPluginIdInHeader = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionInjectPluginIdInHeader/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.InjectPluginIdInHeader;
  };

  /**
   * @description 查看是否在攻击模式下弹出提示选项
   * @returns {Promise<String>} true/false
   */
  optionPromptInAttackMode = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionPromptInAttackMode/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.PromptInAttackMode;
  };

  /**
   * @description 查看是否在扫描任务完成后提供一个提示用于清除已完成的扫描结果
   * @returns {Promise<String>} true/false
   */
  optionPromptToClearFinishedScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionPromptToClearFinishedScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.PromptToClearFinishedScans;
  };

  /**
   * @description 查看在进行攻击模式期间是否重新扫描目标系统
   * @returns {Promise<String>} true/false
   */
  optionRescanInAttackMode = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionRescanInAttackMode/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.RescanInAttackMode;
  };

  /**
   * @description 查看是否对所有请求的HTTP标头进行扫描
   * @returns {Promise<String>} true/false
   */
  optionScanHeadersAllRequests = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionScanHeadersAllRequests/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.ScanHeadersAllRequests;
  };

  /**
   * @description 查看主动扫描器是否应该扫描空的 JSON 值
   * @returns {Promise<String>} true/false
   */
  optionScanNullJsonValues = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/view/optionScanNullJsonValues/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.ScanNullJsonValues;
  };
}

module.exports = ZAPAscanView;

const runTest = async () => {
  const client = new ZAPAscanView();
  const scanId = 0;
  const ascanStatus = await client.getAscanStatus(scanId);
  console.log(ascanStatus);
  // const scanProgress = await client.getScanProgress(scanId);
  // console.log(scanProgress);
  // const messagesIds = await client.getMessagesIds(scanId);
  // console.log(messagesIds);
  // const alertsIds = await client.getAlertsById(scanId);
  // console.log(alertsIds);
  // const scans = await client.getAllAscan();
  // console.log(scans);
  // const scanPolicyNames = await client.scanPolicyNames();
  // console.log(scanPolicyNames);
  // const excludedFromScan = await client.excludedFromScan();
  // console.log(excludedFromScan);
  // const scanners = await client.getScanners();
  // console.log(scanners);
  // const policies = await client.getPolicies();
  // console.log(policies);
  // const attackModeQueue = await client.getAttackModeQueue();
  // console.log(attackModeQueue);
  // const excludedParams = await client.getExcludedParams();
  // console.log(excludedParams);
  // const optionExcludedParamList = await client.optionExcludedParamList();
  // console.log(optionExcludedParamList);
  // const excludedParamTypes = await client.excludedParamTypes();
  // console.log(excludedParamTypes);
  // const AttackPolicy = await client.optionAttackPolicy();// 该函数会自动报错，原因暂时未知
  // console.log(AttackPolicy);
  // const DelayInMs = await client.optionDelayInMs();
  // console.log(DelayInMs);
  // const HandleAntiCSRFTokens = await client.optionHandleAntiCSRFTokens();
  // console.log(HandleAntiCSRFTokens);
  // const HostPerScan = await client.optionHostPerScan();
  // console.log(HostPerScan);
  // const MaxRuleDurationInMins = await client.optionMaxRuleDurationInMins();
  // console.log(MaxRuleDurationInMins);
  // const MaxScanDurationInMins = await client.optionMaxScanDurationInMins();
  // console.log(MaxScanDurationInMins);
  // const MaxScansInUI = await client.optionMaxScansInUI();
  // console.log(MaxScansInUI);
  // const TargetParamsEnabledRPC = await client.optionTargetParamsEnabledRPC();
  // console.log(TargetParamsEnabledRPC);
  // const TargetParamsInjectable = await client.optionTargetParamsInjectable();
  // console.log(TargetParamsInjectable);
  // const ThreadPerHost = await client.optionThreadPerHost();
  // console.log(ThreadPerHost);
  // const AddQueryParam = await client.optionAddQueryParam();
  // console.log(AddQueryParam);
  // const AllowAttackOnStart = await client.optionAllowAttackOnStart();
  // console.log(AllowAttackOnStart);
  // const InjectPluginIdInHeader = await client.optionInjectPluginIdInHeader();
  // console.log(InjectPluginIdInHeader);
  // const PromptInAttackMode = await client.optionPromptInAttackMode();
  // console.log(PromptInAttackMode);
  // const PromptToClearFinishedScans = await client.optionPromptToClearFinishedScans();
  // console.log(PromptToClearFinishedScans);
  // const RescanInAttackMode = await client.optionRescanInAttackMode();
  // console.log(RescanInAttackMode);
  // const ScanHeadersAllRequests = await client.optionScanHeadersAllRequests();
  // console.log(ScanHeadersAllRequests);
  // const ScanNullJsonValues = await client.optionScanNullJsonValues();
  // console.log(ScanNullJsonValues);
};

// runTest();
