/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的ascan action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');
const { enabled } = require('express/lib/application');

class ZAPAscanAction {
  /**
   * @description  通过指定的URL和/或内容运行主动扫描器
   * @param {string} url
   * @param {boolean} recurse  递归'参数可用于扫描指定URL下的URL
   * @param {boolean} inScopeOnly  仅指定范围内'可用于指定只扫描范围内的URL(如果指定的是内容则忽略该选项)
   * @param {string} scanPolicyName  参数'扫描策略名称'允许指定扫描策略(如果未指定扫描策略(如果未指定扫描策略，则使用默认扫描策略)
   * @param {string} method  参数'方式'和'post数据'允许组合指定的请求和指定的URL
   * @param {string} postData
   * @param {number} contextId  上下文id
   * @returns {Promise<String>} scanId
   */
  startAscan = async (url, contextId = 0, recurse = true, inScopeOnly = true, scanPolicyName = '', method = '', postData = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/scan/?apikey=${apikey}&url=${url}&recurse=${recurse}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.scan;
  };

  /**
   * @description  通过指定的URL和/或内容运行主动扫描器
   * @param {string} url
   * @param {number} contextId  上下文id
   * @param {number} userId  用户id
   * @param {boolean} recurse  递归'参数可用于扫描指定URL下的URL
   * @param {string} scanPolicyName  参数'扫描策略名称'允许指定扫描策略(如果未指定扫描策略(如果未指定扫描策略，则使用默认扫描策略)
   * @param {string} method  参数'方式'和'post数据'允许组合指定的请求和指定的URL
   * @param {string} postData
   * @returns {Promise<String>} scanId
   */
  startAscanAsUser = async (url, contextId, userId = 0, recurse = true, scanPolicyName = '', method = '', postData = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/scanAsUser/?apikey=${apikey}&url=${url}&contextId=${contextId}&userId=${userId}&recurse=${recurse}` +
      `&scanPolicyName=${scanPolicyName}&method=${method}&postData=${postData}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data;
  };

  /**
   * @description  暂停指定的扫描
   * @param {number} scanId 扫描任务的id
   * @returns {Promise<String>} OK
   */
  pauseAscan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/pause/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  恢复指定的扫描
   * @param {number} scanId 扫描任务的id
   * @returns {Promise<String>} OK
   */
  resumeAscan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/resume/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  停止/结束指定的扫描
   * @param {number} scanId 扫描任务的id
   * @returns {Promise<String>} OK
   */
  stopAscan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/stop/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  删除指定的扫描任务
   * @param {number} scanId 扫描任务的id
   * @returns {Promise<String>} OK
   */
  removeAscan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/removeScan/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  删除指定的扫描任务
   * @returns {Promise<String>} OK
   */
  pauseAllAscan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/pauseAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  恢复所有扫描任务
   * @returns {Promise<String>} OK
   */
  resumeAllAscan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/resumeAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  停止所有扫描任务
   * @returns {Promise<String>} OK
   */
  stopAllAscan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/stopAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  删除所有扫描任务
   * @returns {Promise<String>} OK
   */
  removeAllAscan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/removeAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  清除主动扫描中排除的URL正则
   * @returns {Promise<String>} OK
   */
  clearExcludedFromScan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/clearExcludedFromScan/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  添加一个应该从主动扫描中排除的URL正则
   * @param {string} regex 要添加的正则表达式
   * @returns {Promise<String>} OK
   */
  excludeFromScan = async (regex) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/excludeFromScan/?apikey=${apikey}&regex=${regex}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  启用具有给定名称的扫描策略的所有扫描器，如果没有给定名称，则启用默认的扫描器
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  enableAllScanners = async (scanPolicyName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/enableAllScanners/?apikey=${apikey}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  禁用具有给定名称的扫描策略的所有扫描器，如果没有给定名称，则禁用默认的扫描器
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  disableAllScanners = async (scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/disableAllScanners/?apikey=${apikey}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  将具有给定名称的扫描策略的扫描仪（使用逗号分隔的 ID 列表）启用，如果没有给定策略名称，则启用默认策略
   * @param {string} ids 扫描策略的名称
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  enableScanners = async (ids, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/enableScanners/?apikey=${apikey}&ids=${ids}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  禁用具有给定IDs的扫描器（以逗号分隔的ID列表），扫描策略的名称为给定名称，如果没有给出名称，则为默认值
   * @param {string} ids 扫描策略的名称
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  disableScanners = async (ids, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/disableScanners/?apikey=${apikey}&ids=${ids}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置启用策略
   * @param {string} ids  未知
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  setEnabledPolicies = async (ids, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setEnabledPolicies/?apikey=${apikey}&ids=${ids}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置启用策略
   * @param {string} ids  未知
   * @param {string} attackStrength  攻击强度
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  setPolicyAttackStrength = async (ids, attackStrength, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setPolicyAttackStrength/?apikey=${apikey}&ids=${ids}&attackStrength=${attackStrength}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置策略警报阈值
   * @param {number} id  策略id
   * @param {string} alertThreshold  警报阈值
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  setPolicyAlertThreshold = async (id, alertThreshold, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setPolicyAlertThreshold/?apikey=${apikey}&id=${id}&alertThreshold=${alertThreshold}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置扫描器攻击强度
   * @param {number} id  扫描器id
   * @param {string} attackStrength  攻击强度
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  setScannerAttackStrength = async (id, attackStrength, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setScannerAttackStrength/?apikey=${apikey}&id=${id}&attackStrength=${attackStrength}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置扫描器警报阈值
   * @param {number} id  扫描器id
   * @param {string} alertThreshold  警报阈值
   * @param {string} scanPolicyName 扫描策略的名称
   * @returns {Promise<String>} OK
   */
  setScannerAlertThreshold = async (id, alertThreshold, scanPolicyName = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setScannerAlertThreshold/?apikey=${apikey}&id=${id}&alertThreshold=${alertThreshold}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  添加扫描策略
   * @param {string} scanPolicyName  策略名称
   * @param {string} alertThreshold  警报阈值
   * @param {string} attackStrength 攻击强度
   * @returns {Promise<String>} OK
   */
  addScanPolicy = async (scanPolicyName, alertThreshold = '', attackStrength = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/addScanPolicy/?apikey=${apikey}&scanPolicyName=${scanPolicyName}&alertThreshold=${alertThreshold}&attackStrength=${attackStrength}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  删除指定的扫描策略
   * @param {string} scanPolicyName  策略名称
   * @returns {Promise<String>} OK
   */
  removeScanPolicy = async (scanPolicyName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/removeScanPolicy/?apikey=${apikey}&scanPolicyName=${scanPolicyName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  更新扫描策略
   * @param {string} scanPolicyName  策略名称
   * @param {string} alertThreshold  警报阈值
   * @param {string} attackStrength 攻击强度
   * @returns {Promise<String>} OK
   */
  updateScanPolicy = async (scanPolicyName, alertThreshold = '', attackStrength = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/updateScanPolicy/?apikey=${apikey}&scanPolicyName=${scanPolicyName}&alertThreshold=${alertThreshold}&attackStrength=${attackStrength}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  将给定文件系统路径中的扫描策略导入
   * @param {string} path  扫描策略的路径
   * @returns {Promise<String>} OK
   */
  importScanPolicy = async (path) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/importScanPolicy/?apikey=${apikey}&path=${path}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  使用指定的名称添加扫描中排除的新参数。可选设置，如果新条目应用于特定URL(默认，所有URL) 并设置参数类型的ID(默认，任何类型的ID)。类型id可以通过查看excludedParamTypes获得
   * @param {string} name 参数名称
   * @param {string} type 参数类型
   * @param {string} url
   * @returns {Promise<String>} OK
   */
  addExcludedParam = async (name, type = '', url = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/addExcludedParam/?apikey=${apikey}&name=${name}&type=${type}&url=${url}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  修改从扫描中排除的参数。允许修改参数的名称、URL和类型。参数可通过索引选择，索引可以通过被排除参数视图获取。
   * @param {number} idx 索引
   * @param {string} name 参数名称
   * @param {string} type 参数类型
   * @param {string} url
   * @returns {Promise<String>} OK
   */
  modifyExcludedParam = async (idx, name, type = '', url = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/modifyExcludedParam/?apikey=${apikey}&idx=${idx}&name=${name}&type=${type}&url=${url}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  移除被扫描排除的参数，使用给定的索引。可以通过查看 excludedParams 获取索引
   * @param {number} idx 索引
   * @returns {Promise<String>} OK
   */
  removeExcludedParam = async (idx) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/removeExcludedParam/?apikey=${apikey}&idx=${idx}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  使用给定的扫描ID和扫描器ID跳过扫描器
   * @param {number} scanId 索引
   * @param {number} scannerId 索引
   * @returns {Promise<String>} OK
   */
  skipScanner = async (scanId, scannerId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/skipScanner/?apikey=${apikey}&scanId=${scanId}&scannerId=${scannerId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置攻击策略
   * @param {string} String 索引
   * @returns {Promise<String>} OK
   */
  setOptionAttackPolicy = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionAttackPolicy/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置默认策略选项
   * @param {string} String 索引
   * @returns {Promise<String>} OK
   */
  setOptionDefaultPolicy = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionDefaultPolicy/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置活动扫描程序是否应向没有参数的GET请求添加查询参数
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionAddQueryParam = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionAddQueryParam/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置是否允许在扫描开始时进行攻击
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionAllowAttackOnStart = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionAllowAttackOnStart/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置延迟时间（以毫秒为单位）
   * @param {number} Integer 延迟时间
   * @returns {Promise<String>} OK
   */
  setOptionDelayInMs = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionDelayInMs/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description  设置是否处理防跨站请求伪造（anti-CSRF）令牌
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionHandleAntiCSRFTokens = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionHandleAntiCSRFTokens/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置每个扫描的主机数
   * @param {number} Integer 每个扫描的主机数
   * @returns {Promise<String>} OK
   */
  setOptionHostPerScan = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionHostPerScan/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否应该由主动扫描器注入HTTP请求头X-ZAP-Scan-ID，其中包含发送请求的扫描器的ID
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionInjectPluginIdInHeader = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionInjectPluginIdInHeader/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置扫描的最大持续时间（以分钟为单位）
   * @param {number} Integer 扫描的最大持续时间
   * @returns {Promise<String>} OK
   */
  setOptionMaxScanDurationInMins = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionMaxScanDurationInMins/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置同时执行的扫描数量
   * @param {number} Integer 同时执行的扫描数量
   * @returns {Promise<String>} OK
   */
  setOptionMaxScansInUI = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionMaxScansInUI/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置一个选项以在处于攻击模式时显示提示信息
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionPromptInAttackMode = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionPromptInAttackMode/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置在扫描完成后是否要提示用户清除已完成的扫描结果
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionPromptToClearFinishedScans = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionPromptToClearFinishedScans/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置在攻击模式下是否重新扫描
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionRescanInAttackMode = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionRescanInAttackMode/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否扫描所有请求的HTTP头部，而不仅仅是通过查询或请求体发送参数的请求
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionScanHeadersAllRequests = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionScanHeadersAllRequests/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 启用目标参数RPC设置（允许用户通过RPC通信与系统或网络应用程序进行交互，并在过程调用中启用目标参数设置。这种设置使用户能够配置和控制目标参数，以更好地定制和优化系统或网络应用的行为）
   * @param {number} Integer 参数RPC
   * @returns {Promise<String>} OK
   */
  setOptionTargetParamsEnabledRPC = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionTargetParamsEnabledRPC/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置目标参数可注入，以便在攻击过程中向目标发送恶意的输入，从而利用潜在的漏洞
   * @param {number} Integer 未知
   * @returns {Promise<String>} OK
   */
  setOptionTargetParamsInjectable = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionTargetParamsInjectable/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置每个主机的线程数
   * @param {number} Integer 未知
   * @returns {Promise<String>} OK
   */
  setOptionThreadPerHost = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionThreadPerHost/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置主动扫描器是否应该扫描空的 JSON 值
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionScanNullJsonValues = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/ascan/action/setOptionScanNullJsonValues/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPAscanAction;

const runTest = async () => {
  const client = new ZAPAscanAction();
  const scanId = 2;
  // const ascanId = await client.startAscan('http://www.vulnweb.com');
  // console.log(ascanId);
  // const ascanIdAsUser = await client.startAscanAsUser('http://www.vulnweb.com', 0);
  // console.log(ascanIdAsUser);
  // const pause = await client.pauseAscan(scanId);
  // console.log(pause);
  // const resume = await client.resumeAscan(scanId);
  // console.log(resume);
  // const stop = await client.stopAscan(scanId);
  // console.log(stop);
  // const remove = await client.removeAscan(scanId);
  // console.log(remove);
  // const pauseAll = await client.pauseAllAscan();
  // console.log(pauseAll);
  // const resumeAll = await client.resumeAllAscan();
  // console.log(resumeAll);
  // const stopAll = await client.stopAllAscan();
  // console.log(stopAll);
  // const removeAll = await client.removeAllAscan();
  // console.log(removeAll);
  // const clearExcluded = await client.clearExcludedFromAscan();
  // console.log(clearExcluded);
  // const excludeExcluded = await client.excludeFromScan('/http?:\\/\\//');
  // console.log(excludeExcluded);
  // const enableAllScanners = await client.enableAllScanners('');
  // console.log(enableAllScanners);
  // const disableAllScanners = await client.disableAllScanners('');
  // console.log(disableAllScanners);
  // const enableScanners = await client.enableScanners('6,7,10045');
  // console.log(enableScanners);
  // const disableScanners = await client.disableScanners('6,7,10045');
  // console.log(disableScanners);
  // const setEnabledPolicies = await client.setEnabledPolicies('');
  // console.log(setEnabledPolicies);
  // const setPolicyAttackStrength = await client.setPolicyAttackStrength('', '');
  // console.log(setPolicyAttackStrength);
  // const setPolicyAlertThreshold = await client.setPolicyAlertThreshold(1, 'Medium');
  // console.log(setPolicyAlertThreshold);
  // const setScannerAttackStrength = await client.setScannerAttackStrength(6, 'Medium');
  // console.log(setScannerAttackStrength);
  // const setScannerAlertThreshold = await client.setScannerAlertThreshold(6, 'Medium');
  // console.log(setScannerAlertThreshold);
  // const addScanPolicy = await client.addScanPolicy('test');
  // console.log(addScanPolicy);
  // const removeScanPolicy = await client.removeScanPolicy('test');
  // console.log(removeScanPolicy);
  // const updateScanPolicy = await client.updateScanPolicy('test');
  // console.log(updateScanPolicy);
  // const addExcludedParam = await client.addExcludedParam('查询字符串', '1');
  // console.log(addExcludedParam);
  // const modifyExcludedParam = await client.modifyExcludedParam(0, '任何', '-1');
  // console.log(modifyExcludedParam);
  // const setOptionAttackPolicy = await client.setOptionAttackPolicy('test');
  // console.log(setOptionAttackPolicy);
  // const setOptionDefaultPolicy = await client.setOptionDefaultPolicy('test');
  // console.log(setOptionDefaultPolicy);
  // const setOptionAddQueryParam = await client.setOptionAddQueryParam(true);
  // console.log(setOptionAddQueryParam);
  // const setOptionAllowAttackOnStart = await client.setOptionAllowAttackOnStart(true);
  // console.log(setOptionAllowAttackOnStart);
  // const setOptionDelayInMs = await client.setOptionDelayInMs(0);
  // console.log(setOptionDelayInMs);
  // const setOptionHandleAntiCSRFTokens = await client.setOptionHandleAntiCSRFTokens(true);
  // console.log(setOptionHandleAntiCSRFTokens);
  // const setOptionHostPerScan = await client.setOptionHostPerScan(1);
  // console.log(setOptionHostPerScan);
  // const setOptionInjectPluginIdInHeader = await client.setOptionInjectPluginIdInHeader(true);
  // console.log(setOptionInjectPluginIdInHeader);
  // const setOptionMaxScanDurationInMins = await client.setOptionMaxScanDurationInMins(1000);
  // console.log(setOptionMaxScanDurationInMins);
  // const setOptionMaxScansInUI = await client.setOptionMaxScansInUI(5);
  // console.log(setOptionMaxScansInUI);
  // const setOptionPromptInAttackMode = await client.setOptionPromptInAttackMode(true);
  // console.log(setOptionPromptInAttackMode);
  // const setOptionPromptToClearFinishedScans = await client.setOptionPromptToClearFinishedScans(false);
  // console.log(setOptionPromptToClearFinishedScans);
  // const setOptionRescanInAttackMode = await client.setOptionRescanInAttackMode(false);
  // console.log(setOptionRescanInAttackMode);
  // const setOptionScanHeadersAllRequests = await client.setOptionScanHeadersAllRequests(true);
  // console.log(setOptionScanHeadersAllRequests);
  // const setOptionTargetParamsEnabledRPC = await client.setOptionTargetParamsEnabledRPC(1);
  // console.log(setOptionTargetParamsEnabledRPC);
  // const setOptionTargetParamsInjectable = await client.setOptionTargetParamsInjectable(1);
  // console.log(setOptionTargetParamsInjectable);
  // const setOptionThreadPerHost = await client.setOptionThreadPerHost(1);
  // console.log(setOptionThreadPerHost);
  const setOptionScanNullJsonValues = await client.setOptionScanNullJsonValues(true);
  console.log(setOptionScanNullJsonValues);
};

// runTest();
