/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的httpSession action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');

class ZAPHttpSessionsAction {
  /**
   * @description 为指定站点创建一个空的会话
   * @param {string} site 站点
   * @param {string} session 会话
   * @returns {Promise<String>} OK
   */
  createEmptySession = async (site, session) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/createEmptySession/?apikey=${apikey}&site=${site}&session=${session}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从指定站点移除会话
   * @param {string} site 站点
   * @param {string} session 会话
   * @returns {Promise<String>} OK
   */
  removeSession = async (site, session) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/removeSession/?apikey=${apikey}&site=${site}&session=${session}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将指定会话设置为指定站点的活动会话
   * @param {string} site 站点
   * @param {string} session 会话
   * @returns {Promise<String>} OK
   */
  setActiveSession = async (site, session) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/setActiveSession/?apikey=${apikey}&site=${site}&session=${session}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 取消设置给定站点的活动会话
   * @param {string} site 站点
   * @returns {Promise<String>} OK
   */
  unsetActiveSession = async (site) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/unsetActiveSession/?apikey=${apikey}&site=${site}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将会话令牌添加到给定站点
   * @param {string} site 站点
   * @param {string} sessionToken 会话令牌
   * @returns {Promise<String>} OK
   */
  addSessionToken = async (site, sessionToken) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/addSessionToken/?apikey=${apikey}&site=${site}&sessionToken=${sessionToken}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从给定站点中删除会话令牌
   * @param {string} site 站点
   * @param {string} sessionToken 会话令牌
   * @returns {Promise<String>} OK
   */
  removeSessionToken = async (site, sessionToken) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/removeSessionToken/?apikey=${apikey}&site=${site}&sessionToken=${sessionToken}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从给定站点中删除会话令牌
   * @param {string} site 站点
   * @param {string} session 会话
   * @param {string} sessionToken 会话令牌
   * @param {string} tokenValue 会话令牌的值
   * @returns {Promise<String>} OK
   */
  setSessionTokenValue = async (site, session, sessionToken, tokenValue) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/setSessionTokenValue/?apikey=${apikey}&site=${site}&session=${session}&sessionToken=${sessionToken}&tokenValue=${tokenValue}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从给定站点中删除会话令牌
   * @param {string} site 站点
   * @param {string} oldSessionName 旧的会话名称
   * @param {string} newSessionName 新的会话名称
   * @returns {Promise<String>} OK
   */
  renameSession = async (site, oldSessionName, newSessionName) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/renameSession/?apikey=${apikey}&site=${site}&oldSessionName=${oldSessionName}&newSessionName=${newSessionName}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 从给定站点中删除会话令牌
   * @param {string} sessionToken 会话令牌
   * @param {string} tokenEnabled 是否激活
   * @returns {Promise<String>} OK
   */
  addDefaultSessionToken = async (sessionToken, tokenEnabled) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/addDefaultSessionToken/?apikey=${apikey}&sessionToken=${sessionToken}&tokenEnabled=${tokenEnabled}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否启用具有给定名称的默认会话令牌
   * @param {string} sessionToken 会话令牌
   * @param {string} tokenEnabled 是否激活
   * @returns {Promise<String>} OK
   */
  setDefaultSessionTokenEnabled = async (sessionToken, tokenEnabled) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/setDefaultSessionTokenEnabled/?apikey=${apikey}&sessionToken=${sessionToken}&tokenEnabled=${tokenEnabled}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否启用具有给定名称的默认会话令牌
   * @param {string} sessionToken 会话令牌
   * @returns {Promise<String>} OK
   */
  removeDefaultSessionToken = async (sessionToken) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/httpSessions/action/removeDefaultSessionToken/?apikey=${apikey}&sessionToken=${sessionToken}}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPHttpSessionsAction;

const runTest = async () => {
  const client = new ZAPHttpSessionsAction();
  // const res = await client.createEmptySession('test', 'test');
  // console.log(res);
  // const res = await client.removeSession('test', 'test');
  // console.log(res);
  // const res = await client.setActiveSession('test', 'test');
  // console.log(res);
  // const res = await client.unsetActiveSession('test');
  // console.log(res);
  // const res = await client.addSessionToken('test', 'aspsessionid');
  // console.log(res);
  // const res = await client.removeSessionToken('test', 'aspsessionid');
  // console.log(res);
  // const res = await client.setSessionTokenValue('test', 'test', 'aspsessionid', 'true');
  // console.log(res);
  // const res = await client.renameSession('test', 'test', 'test1');
  // console.log(res);
  // const res = await client.addDefaultSessionToken('test', 'true');
  // console.log(res);
  // const res = await client.setDefaultSessionTokenEnabled('test', 'true');
  // console.log(res);
  const res = await client.removeDefaultSessionToken('test');
  console.log(res);
};

// runTest();
