/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的spider action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');

class ZAPSpiderAction {
  /**
   * @description 创建一个spider扫描
   * @param {String} contextName 上下文名称
   * @param {String} url 要扫描的URL
   * @param {number} maxChildren 最大扫描的子级数量
   * @param {boolean} recurse 是否要递归地获取所有子级的数据
   * @param {boolean} subtreeOnly 是否获取子树信息
   * @returns {Promise<Number>} 返回创建的spider扫描的id
   */
  createSpiderScan = async (url, contextName = '', maxChildren = 0, recurse = false, subtreeOnly = false) => {
    const res = await axios.post(
      `${BASE_URL}/JSON/spider/action/scan/`,
      `apikey=${apikey}&url=${url}&maxChildren=${maxChildren}&recurse=${recurse}&contextName=${contextName}&subtreeOnly=${subtreeOnly}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.scan;
  };

  /**
   * @description 创建一个spider扫描
   * @param {number} contextId 上下文id
   * @param {number} userId 用户id
   * @param {String} url 要扫描的URL
   * @param {number} maxChildren 最大扫描的子级数量
   * @param {boolean} recurse 是否要递归地获取所有子级的数据
   * @param {boolean} subtreeOnly 是否获取子树信息
   * @returns {Promise<Number>} 返回创建的spider扫描的id
   */
  createSpiderScanAsUser = async (contextId, userId, url = '', maxChildren = 0, recurse = false, subtreeOnly = false) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/scanAsUser/?apikey=${apikey}&contextId=${contextId}&userId=${userId}&url=${url}&maxChildren=${maxChildren}&recurse=${recurse}&subtreeOnly=${subtreeOnly}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data;
  };

  /**
   * @description 暂停扫描
   * @param {Number} scanId 要暂停的spider扫描的id
   * @returns {Promise<String>} OK
   */
  pauseSpiderScan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/pause/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 重置扫描
   * @param {Number} scanId 要重置的spider扫描的id
   * @returns {Promise<String>} OK
   */
  resumeSpiderScan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/resume/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 移除扫描
   * @param {Number} scanId 要移除的spider扫描的id
   * @returns {Promise<String>} OK
   */
  removeSpiderScan = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/removeScan/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 暂停所有扫描任务
   * @returns {Promise<String>} OK
   */
  pauseAllSpiderScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/pauseAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 重置所有扫描任务
   * @returns {Promise<String>} OK
   */
  resumeAllSpiderScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/resumeAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 停止所有扫描任务
   * @returns {Promise<String>} OK
   */
  stopAllSpiderScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/stopAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 移除所有扫描任务
   * @returns {Promise<String>} OK
   */
  removeAllSpiderScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/removeAllScans/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 清除从爬虫扫描中排除的URL的正则表达式
   * @returns {Promise<String>} OK
   */
  clearExcludedFromScan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/clearExcludedFromScan/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 添加一个应该从爬虫扫描中排除的URL的正则表达式
   * @param {string} regex 要移除的正则表达式
   * @returns {Promise<String>} OK
   */
  excludeFromScan = async (regex) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/excludeFromScan/?apikey=${apikey}&regex=${regex}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 使用指定的值添加一个始终在范围内的新域名。可选设置新条目是否启用（默认为 true），以及新值是否指定为正则表达式（默认为 false）
   * @param {string} value 要添加的域名
   * @param {boolean} isRegex 是否指定为正则表达式
   * @param {boolean} isEnabled 新条目是否启用
   * @returns {Promise<String>} OK
   */
  addDomainAlwaysInScope = async (value, isRegex = false, isEnabled = true) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/addDomainAlwaysInScope/?apikey=${apikey}&value=${value}&isRegex=${isRegex}&isEnabled=${isEnabled}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 修改一个始终在范围内的域。如果启用或使用了正则表达式，允许修改值。可通过索引选择域，该索引可通过查看domainsAlwaysInScope获得
   * @param {number} idx 域的索引
   * @param {string} value 要添加的域名
   * @param {boolean} isRegex 是否指定为正则表达式
   * @param {boolean} isEnabled 新条目是否启用
   * @returns {Promise<String>} OK
   */
  modifyDomainAlwaysInScope = async (idx, value = '', isRegex = false, isEnabled = true) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/modifyDomainAlwaysInScope/?apikey=${apikey}&idx=${idx}&value=${value}&isRegex=${isRegex}&isEnabled=${isEnabled}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将给定索引的始终在范围内的域名移除。可以使用view domainsAlwaysInScope获取索引
   * @param {number} idx 域的索引
   * @returns {Promise<String>} OK
   */
  removeDomainAlwaysInScope = async (idx) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/removeDomainAlwaysInScope/?apikey=${apikey}&idx=${idx}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 启用始终在范围内的所有域名
   * @returns {Promise<String>} OK
   */
  enableAllDomainsAlwaysInScope = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/enableAllDomainsAlwaysInScope/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 禁用始终在范围内的所有域名
   * @returns {Promise<String>} OK
   */
  disableAllDomainsAlwaysInScope = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/disableAllDomainsAlwaysInScope/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置处理参数选项
   * @param {String} String 处理参数选项
   * @returns {Promise<String>} OK
   */
  setOptionHandleParameters = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionHandleParameters/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 使用 [add|modify|remove]DomainAlwaysInScope 动作代替
   * @param {String} String 处理参数选项
   * @returns {Promise<String>} OK
   */
  setOptionScopeString = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionScopeString/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置一个字符串，用于在匹配HTTP消息的URL时，跳过包含指定字符串的URL
   * @param {String} String 处理参数选项
   * @returns {Promise<String>} OK
   */
  setOptionSkipURLString = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionSkipURLString/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置HTTP请求中的用户代理
   * @param {String} String 用户代理
   * @returns {Promise<String>} OK
   */
  setOptionUserAgent = async (String) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionUserAgent/?apikey=${apikey}&String=${String}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置spider程序是否在爬取时接受cookies
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionAcceptCookies = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionAcceptCookies/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否处理已访问的Data参数
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionHandleODataParametersVisited = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionHandleODataParametersVisited/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置可以爬取的每个节点的最大子节点数，0表示没有限制
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionMaxChildren = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionMaxChildren/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置spider可以爬行的最大深度，0表示无限深度
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionMaxDepth = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionMaxDepth/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置最大持续时间
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionMaxDuration = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionMaxDuration/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 将响应解析的最大大小限制（以字节为单位）。这个设置允许spider跳过大的响应或文件。
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionMaxParseSizeBytes = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionMaxParseSizeBytes/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置在用户界面中显示的最大扫描数
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionMaxScansInUI = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionMaxScansInUI/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否解析注释。当这个选项被启用时，代码将会尝试解析并处理源代码中的注释
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionParseComments = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionParseComments/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 是否解析 Robots.txt 文件以遵守网站所有者的爬取规则
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionParseRobotsTxt = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionParseRobotsTxt/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置请求等待时间的选项
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionRequestWaitTime = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionRequestWaitTime/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置是否发送 Referer 头部
   * @param {boolean} Boolean
   * @returns {Promise<String>} OK
   */
  setOptionSendRefererHeader = async (Boolean) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionSendRefererHeader/?apikey=${apikey}&Boolean=${Boolean}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置线程数量
   * @param {number} Integer
   * @returns {Promise<String>} OK
   */
  setOptionThreadCount = async (Integer) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/action/setOptionThreadCount/?apikey=${apikey}&Integer=${Integer}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPSpiderAction;

const runTest = async () => {
  const client = new ZAPSpiderAction();
  const spiderScanId = 1;
  // const spiderScanId = await client.createSpiderScan('http://www.vulnweb.com', 5, true, '', true);
  // console.log(spiderScanId);
};

// runTest();
