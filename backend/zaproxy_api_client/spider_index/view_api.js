/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的spider view api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');

class ZAPSpiderView {
  /**
   * @description 获得所有spider扫描的列表
   * @returns {Promise<Array>} 返回所有扫描任务的id、状态和progress码
   */
  getSpiderScans = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/scans/?apikey=${apikey}`
    );
    return res.data.scans;
  };

  /**
   * @description 获得spider扫描的状态
   * @param {Number} scanId 要查询的spider扫描的id
   * @returns {Promise<String>} 返回spider扫描的进度
   */
  getSpiderStatus = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/status/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.status;
  };

  /**
   * @description 获得spider扫描的结果
   * @param {Number} scanId 要查询的spider扫描的id
   * @returns {Promise<String>} 返回spider扫描的结果
   */
  getSpiderResult = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/results/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.results;
  };

  /**
   * @description 获得spider扫描的结果
   * @param {Number} scanId 要查询的spider扫描的id
   * @returns {Promise<Array>} 返回spider扫描的详细结果
   */
  getSpiderFullResults = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/fullResults/?apikey=${apikey}&scanId=${scanId}`
    );
    return res.data.fullResults[0].urlsInScope;
  };

  /**
   * @description 停止扫描
   * @param {Number} scanId 要查询的spider扫描的id
   * @returns {Promise<String>} 返回spider扫描的进度
   * 暂时没啥用，因为如果前面的代码都是操作完才返回结果，此时如过调用stop函数会显示ERR_BAD_REQUEST
   */
  stopSpiderScan = async (scanId) => {
    await axios.get(
      `${BASE_URL}/JSON/spider/view/stop/?apikey=${apikey}&scanId=${scanId}`
    ).then(function (response) {
      console.log(response.data);
    }).catch(function (error) {
      console.log(error);
    });
  };

  /**
   * @description 获取被爬虫扫描排除的URL的正则表达式。
   * @returns {Promise<String>} 正则表达式
   */
  getExcludedFromScan = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/excludedFromScan/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.excludedFromScan;
  };

  /**
   * @description 返回基于Spider添加的HTTP消息的历史记录表中的唯一URL列表。
   * @returns {Promise<String>}  URL列表
   */
  getAllUrls = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/allUrls/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.allUrls;
  };

  /**
   * @description 返回指定扫描添加到站点树中的节点名称列表。
   * @param {Number} scanId 要查询的spider扫描的id
   * @returns {Promise<String>}  URL列表
   */
  addedNodes = async (scanId) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/addedNodes/?apikey=${apikey}&scanId=${scanId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.addedNodes;
  };

  /**
   * @description 返回指定扫描添加到站点树中的节点名称列表。
   * @returns {Promise<String>}  URL列表
   */
  getDomainsAlwaysInScope = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/domainsAlwaysInScope/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.domainsAlwaysInScope;
  };

  /**
   * @description 获取当前参数处理规则
   * @returns {Promise<String>}  当前参数处理规则
   */
  getOptionHandleParameters = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionHandleParameters/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.HandleParameters;
  };

  /**
   * @description 获取可以爬取的每个节点的最大子节点数（每个节点），0表示没有限制。
   * @returns {Promise<String>}  数字
   */
  getOptionMaxChildren = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionMaxChildren/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxChildren;
  };

  /**
   * @description 获取spider可以爬行的最大深度，如果无限制则为0。
   * @returns {Promise<String>}  数字
   */
  getOptionMaxDepth = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionMaxDepth/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxDepth;
  };

  /**
   * @description 获取最大持续时间
   * @returns {Promise<String>}  数字
   */
  getOptionMaxDuration = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionMaxDuration/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxDuration;
  };

  /**
   * @description 获取最大持续时间
   * @returns {Promise<String>}  数字
   */
  getOptionMaxParseSizeBytes = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionMaxParseSizeBytes/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxParseSizeBytes;
  };

  /**
   * @description 获取最大持续时间
   * @returns {Promise<String>}  数字
   */
  getOptionMaxScansInUI = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionMaxScansInUI/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.MaxScansInUI;
  };

  /**
   * @description 获取请求等待的最大时间
   * @returns {Promise<String>}  数字
   */
  getOptionRequestWaitTime = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionRequestWaitTime/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.RequestWaitTime;
  };

  /**
   * @description 获取被跳过的URL
   * @returns {Promise<String>}  数字
   */
  getOptionSkipURLString = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/spider/view/optionSkipURLString/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.SkipURLString;
  };
}

module.exports = ZAPSpiderView;

const runTest = async () => {
  const client = new ZAPSpiderView();
  const spiderScanId = 0;
  const spiderStatus = await client.getSpiderStatus(spiderScanId);
  console.log(spiderStatus);
  // const spiderResult = await client.getSpiderResult(spiderScanId);
  // console.log(spiderResult);
  // const spiderFullResult = await client.getSpiderFullResults(spiderScanId);
  // console.log(spiderFullResult);
  // const spiderScanList = await client.getSpiderScans();
  // console.log(spiderScanList);
  // const excludedFromScan = await client.getExcludedFromScan();
  // console.log(excludedFromScan);
  // const allUrls = await client.getAllUrls();
  // console.log(allUrls);
  // const addedNodes = await client.addedNodes(spiderScanId);
  // console.log(addedNodes);
  // const domainsAlwaysInScope = await client.getDomainsAlwaysInScope();
  // console.log(domainsAlwaysInScope);
  // const optionHandleParameters = await client.getOptionHandleParameters();
  // console.log(optionHandleParameters);
  // const optionMaxChildren = await client.getOptionMaxChildren();
  // console.log(optionMaxChildren);
  // const optionMaxDepth = await client.getOptionMaxDepth();
  // console.log(optionMaxDepth);
  // const optionMaxDuration = await client.getOptionMaxDuration();
  // console.log(optionMaxDuration);
  // const optionMaxParseSizeBytes = await client.getOptionMaxParseSizeBytes();
  // console.log(optionMaxParseSizeBytes);
  // const optionMaxScansInUI = await client.getOptionMaxScansInUI();
  // console.log(optionMaxScansInUI);
  // const optionRequestWaitTime = await client.getOptionRequestWaitTime();
  // console.log(optionRequestWaitTime);
  // const optionSkipURLString = await client.getOptionSkipURLString();
  // console.log(optionSkipURLString);
  // const spiderScanIdAsUser = await client.createSpiderScanAsUser(1, 1);// 参数随便填的，目前还不知道怎么获取userid
  // console.log(spiderScanIdAsUser);
  // const pauseResult = await client.pauseSpiderScan(spiderScanId);
  // console.log(pauseResult);
  // const resumeResult = await client.resumeSpiderScan(spiderScanId);
  // console.log(resumeResult);
  // const removeResult = await client.removeSpiderScan(spiderScanId);
  // console.log(removeResult);
  // const pauseAllScans = await client.pauseAllSpiderScans();
  // console.log(pauseAllScans);
  // const resumeAllScans = await client.resumeAllSpiderScans();
  // console.log(resumeAllScans);
  // const stopAllScans = await client.stopAllSpiderScans();
  // console.log(stopAllScans);
  // const removeAllScans = await client.removeAllSpiderScans();
  // console.log(removeAllScans);
  // const clearExcludedFromScan = await client.clearExcludedFromScan();
  // console.log(clearExcludedFromScan);
  // const excludeFromScan = await client.excludeFromScan('/http?:\\/\\//');
  // console.log(excludeFromScan);
  // const addDomainAlwaysInScope = await client.addDomainAlwaysInScope('http://www.vulnweb.com');
  // console.log(addDomainAlwaysInScope);
  // const modifyDomainAlwaysInScope = await client.modifyDomainAlwaysInScope(0);
  // console.log(modifyDomainAlwaysInScope);
  // const removeDomainAlwaysInScope = await client.removeDomainAlwaysInScope(0);
  // console.log(removeDomainAlwaysInScope);
  // const enableAllDomainsAlwaysInScope = await client.enableAllDomainsAlwaysInScope();
  // console.log(enableAllDomainsAlwaysInScope);
  // const disableAllDomainsAlwaysInScope = await client.disableAllDomainsAlwaysInScope();
  // console.log(disableAllDomainsAlwaysInScope);
};

// runTest();
