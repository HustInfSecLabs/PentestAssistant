/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的core view api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');
const { enabled } = require('express/lib/application');

class ZAPCoreView {
  /**
   * @description  获取 Sites 树中指定 URL 下的子节点
   * @param {string} url
   * @returns {Promise<String>} OK
   */
  getChildNodes = async (url) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/childNodes/?apikey=${apikey}&url=${url}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.childNodes;
  };

  /**
   * @description  获取应用于 URL 的用于从本地代理中排除的正则表达式
   * @returns {Promise<String>}
   */
  getExcludedFromProxy = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/excludedFromProxy/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.excludedFromProxy;
  };

  /**
   * @description  获取通过 ZAP 访问的主机的名称
   * @returns {Promise<String>} url
   */
  getHosts = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/hosts/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.hosts;
  };

  /**
   * @description  获得具有给定 ID 的 HTTP 消息。
   * @param {number} id HTTP 消息的ID
   * @returns {Promise<String>} 返回 ID、请求/响应头和主体、Cookie、注释、类型、往返时间 (RTT) 和时间戳。
   */
  getMessageById = async (id) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/message/?apikey=${apikey}&id=${id}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.message;
  };

  /**
   * @description  获取由ZAP发送的HTTP消息，包括请求和响应，可以通过URL进行过滤，并通过 'start' 位置和消息计数进行分页。
   * @param {string} baseurl
   * @param {number} start  起始位置
   * @param {number} count  每页呈现的数量
   * @returns {Promise<String>} note,rtt,responseBody,cookieParams,requestBody,responseHeader,requestHeader,id:type,timestamp,tags
   */
  getMessagesByZap = async (baseurl = '', start = 0, count = 5) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/messages/?apikey=${apikey}&baseurl=${baseurl}&start=${start}&count=${count}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.messages;
  };

  /**
   * @description  获取具有给定ID组的HTTP消息。
   * @param {string} ids
   * @returns {Promise<String>} 返回对应的 ID、请求/响应头和主体、Cookie、注释、类型、往返时间 (RTT) 和时间戳。
   */
  getMessageByIds = async (ids) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/messagesById/?apikey=${apikey}&ids=${ids}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.messagesById;
  };

  /**
   * @description  获取模式。
   * @returns {Promise<String>} 返回模式类型
   */
  getMode = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/mode/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.mode;
  };

  /**
   * @description  获取消息的数量，可选择按URL过滤。
   * @param {string} baseurl
   * @returns {Promise<String>} 返回消息的数量
   */
  getNumberOfMessages = async (baseurl = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/numberOfMessages/?apikey=${apikey}&baseurl=${baseurl}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.numberOfMessages;
  };

  /**
   * @description  获取具有警报覆盖的文件路径。
   * @returns {Promise<String>} 返回文件路径
   */
  getOptionAlertOverridesFilePath = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/optionAlertOverridesFilePath/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.optionAlertOverridesFilePath;
  };

  /**
   * @description  获取报告中包含的最大警报实例数。
   * @returns {Promise<String>} 返回最大警报实例数
   */
  getOptionMaximumAlertInstances = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/optionMaximumAlertInstances/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.optionMaximumAlertInstances;
  };

  /**
   * @description  获取是否在生成的报告中合并相关的警报。
   * @returns {Promise<String>} true/false
   */
  getOptionMergeRelatedAlerts = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/optionMergeRelatedAlerts/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.optionMergeRelatedAlerts;
  };

  /**
   * @description  获取当前会话文件的位置。
   * @returns {Promise<String>} 路径
   */
  getSessionLocation = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/sessionLocation/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.sessionLocation;
  };

  /**
   * @description  获取通过 ZAP 访问的站点（包括协议和域名）。
   * @returns {Promise<String>} 协议和域名
   */
  getSites = async () => {
    const res = await axios.get(
      `${BASE_URL}/JSON/core/view/sites/?apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.sites;
  };
}

module.exports = ZAPCoreView;

const runTest = async () => {
  const client = new ZAPCoreView();
  // const res = await client.getChildNodes('http://www.vulnweb.com');
  // console.log(res);
  // const res = await client.getExcludedFromProxy();
  // console.log(res);
  // const res = await client.getHosts();
  // console.log(res);
  // const res = await client.getMessagesByZap('http://www.vulnweb.com');
  // console.log(res);
  // const res = await client.getMessageById(8);
  // console.log(res);
  // const res = await client.getMessageByIds('8,6');
  // console.log(res);
  // const res = await client.getMode();
  // console.log(res);
  // const res = await client.getNumberOfMessages();
  // console.log(res);
  // const res = await client.getOptionAlertOverridesFilePath();
  // console.log(res);
  // const res = await client.getOptionMaximumAlertInstances();
  // console.log(res);
  // const res = await client.getOptionMergeRelatedAlerts();
  // console.log(res);
  // const res = await client.getSessionLocation();
  // console.log(res);
  const res = await client.getSites();
  console.log(res);
};

// runTest();
