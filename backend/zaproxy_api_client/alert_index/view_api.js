/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的alert view api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');
const { resolve } = require('eslint-plugin-promise/rules/lib/promise-statics');

class ZAPAlertView {
  /**
   * @description 获取ZAP 抛出的警报
   * @param {string} baseurl 目标网址
   * @param {number} start 开始位置
   * @param {number} count 单次要查看的警报数量
   * @param {string} riskId 暂定
   * @returns {Promise<String>} 返回每个警报的详细信息
   */
  getAlertStatus = async (baseurl, start = 0, count = '', riskId = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/alerts/?apikey=${apikey}&baseurl=${baseurl}&start=${start}&count=${count}&riskId=${riskId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.alerts;
  };

  /**
   * @description 获取给定ID的警报
   * @param {Number} Id 要查询的警报情况的Id
   * @returns {Promise<String>} 返回对应Id的警报内容
   */
  getTargetIdAlert = async (Id) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/alert/?apikey=${apikey}&id=${Id}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.alert;
  };

  /**
   * @description 按每个风险级别分组获取警报数量，可以选择按URL进行过滤
   * @param {string} baseurl 目标网址
   * @returns {Promise<String>} 返回每个风险级别分组对应的警报数量
   */
  getAlertsSummary = async (baseurl) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/alertsSummary/?apikey=${apikey}&baseurl=${baseurl}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.alertsSummary;
  };

  /**
   * @description 获取警报数量
   * @param {string} baseurl 目标网址
   * @param {string} riskId 暂定
   * @returns {Promise<String>} 返回警报总数量
   */
  getNumberOfAlerts = async (baseurl, riskId = '') => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/numberOfAlerts/?apikey=${apikey}&baseurl=${baseurl}&riskId=${riskId}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.numberOfAlerts;
  };

  /**
   * @description 获取警报的摘要
   * @param {string} baseurl 目标网址
   * @param {boolean} recurse 如果'recurse'为真，则返回与指定'url'开头的所有url相关的警报，否则仅返回与完全相同'url'（忽略url参数）的警报。
   * @returns {Promise<String>} 相当于alerts的简介版
   */
  getAlertsByRisk = async (baseurl, recurse = false) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/alertsByRisk/?apikey=${apikey}&baseurl=${baseurl}&recurse=${recurse}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.alertsByRisk;
  };

  /**
   * @description 获取警报的数量
   * @param {string} baseurl 目标网址
   * @param {boolean} recurse 如果'recurse'为真，则返回与指定'url'开头的所有url相关的警报，否则仅返回与完全相同'url'（忽略url参数）的警报。
   * @returns {Promise<String>} 返回警报数量，效果类似alertsSummary
   */
  getAlertCountsByRisk = async (baseurl, recurse = false) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/alert/view/alertCountsByRisk/?apikey=${apikey}&baseurl=${baseurl}&recurse=${recurse}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data;
  };
}

module.exports = ZAPAlertView;

const runTest = async () => {
  const client = new ZAPAlertView();
  const alertCountsByRisk = await client.getAlertCountsByRisk('http://www.vulnweb.com');
  console.log(alertCountsByRisk);
};

// runTest();
