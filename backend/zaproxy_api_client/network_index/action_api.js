/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的spider action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');

class ZAPNetworkAction {
  /**
   * @description 设置最大超时时间
   * @param {Number} timeout 最大超时秒数
   * @returns {Promise<String>} OK
   */
  setConnectionTimeout = async (timeout) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/network/action/setConnectionTimeout/?timeout=${timeout}&apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置HTTP Proxy是否开启
   * @param {Boolean} enabled 是否开启
   * @returns {Promise<String>} OK
   */
  setHttpProxyEnabled = async (enabled) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/network/action/setHttpProxyEnabled/?enabled=${enabled}&apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 设置HTTP Proxy配置
   * @param {String} host HTTP Proxy地址
   * @param {Number} port HTTP Proxy端口
   * @returns {Promise<String>} OK
   */
  setHttpProxy = async (host, port) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/network/action/setHttpProxy/?host=${host}&port=${port}&apikey=${apikey}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPNetworkAction;

const runTest = async () => {
  const client = new ZAPNetworkAction();
  const spiderScanId = 1;
  // const spiderScanId = await client.createSpiderScan('http://www.vulnweb.com', 5, true, '', true);
  // console.log(spiderScanId);
};

// runTest();
