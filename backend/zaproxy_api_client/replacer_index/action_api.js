/**
 * @module zaproxy_api_client
 * @description 与zaproxy的api交互的客户端的replacer action api部分
 * @see https://www.zaproxy.org/docs/api/#introduction
 */

const axios = require('axios');
const {
  BASE_URL,
  apikey
} = require('../config');

class ZAPReplacerAction {
  /**
   * @description 添加一个HTTP报头替换规则
   * @returns {Promise<String>} OK
   * @param {string} description 描述主键
   * @param {boolean} enabled 是否启用
   * @param {string} matchType 匹配类型
   * @param {boolean} matchRegex 是否正则匹配
   * @param {string} matchString 匹配字符串
   * @param {string} replacement 替换字符串
   */
  addReplacerRule = async (description, enabled, matchType, matchRegex, matchString, replacement) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/replacer/action/addRule/?description=${description}&enabled=${enabled}&matchType=${matchType}&matchRegex=${matchRegex}&matchString=${matchString}&replacement=${replacement}&initiators=&url=`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };

  /**
   * @description 删除当前会话中的上下文
   * @param {string} contextName 目标上下文
   * @returns {Promise<String>} OK
   */
  removeReplacerRule = async (description) => {
    const res = await axios.get(
      `${BASE_URL}/JSON/replacer/action/removeRule/?description=${description}`
    ).catch(function (error) {
      console.log(error);
    });
    return res.data.Result;
  };
}

module.exports = ZAPReplacerAction;

const runTest = async () => {
  const client = new ZAPReplacerAction();
};

// runTest();
