
/**
 * @description Arachni客户端api
 * @type {path.PlatformPath | path}
 *
 * 负责与Arachni引擎的交互，并储存运行状态。
 * 1. 通过setProfile方法设置配置文件
 * 2. 通过getStatus方法获得引擎运行状态
 * 3. 通过startScan方法启动扫描
 * 4. 通过stopScan方法停止扫描
 * 5. 通过getLogs方法获得实时日志
 * 6. 通过getResult方法获得扫描结果
 *
 *
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

const { BASE_URL, ARACHNI_USERNAME, ARACHNI_PASSWORD } = require('./config');
const ArachniChecks = require('./arachni_checks');

const credentials = Buffer.from(`${ARACHNI_USERNAME}:${ARACHNI_PASSWORD}`).toString('base64');
const authHeader = `Basic ${credentials}`;

class ArachniAPIClient {
  /* 成员变量 */
  /**
   * @description 私有变量profile，用于存储配置的json格式
   */
  #profile = {};
  /**
   * @description 私有变量status，用于存储运行状态
   */

  #status = {
    scanId: null,
    status: 'Stopped'
  };

  /* 成员函数 */
  #getScansId = async () => {
    return await axios.get(
      `${BASE_URL}/scans`,
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #getScanStatus = async (scanId) => {
    return await axios.get(
      `${BASE_URL}/scans/${scanId}`,
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #startNewScan = async (url, profile) => {
    return await axios.post(
      `${BASE_URL}/scans`,
      {
        url,
        ...profile
      },
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #getScanReportJSON = async (scanId) => {
    return await axios.get(
      `${BASE_URL}/scans/${scanId}/report`,
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #pauseRuningScan = async (scanId) => {
    return await axios.put(
      `${BASE_URL}/scans/${scanId}/pause`,
      {},
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #resumePausedScan = async (scanId) => {
    return await axios.put(
      `${BASE_URL}/scans/${scanId}/resume`,
      {},
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  #deleteScan = async (scanId) => {
    return await axios.delete(
      `${BASE_URL}/scans/${scanId}`,
      {
        headers: {
          Authorization: authHeader,
          'Content-Type': 'application/json'
        }
      }
    );
  };

  /* 公有成员函数 */
  /**
   * @description 设置配置文件
   * @param profile<Object>
   * @returns Promise<void>
   * 运行过程：首先将传递的参数赋值给私有变量，然后将私有变量写入配置文件
   */
  setProfile = async (profile) => {
    // TODO: 生成配置文件字符串）。
    // Object.assign(this.#profile, profile);
    /* 生成配置文件字符串 */
    let [proxyHost, proxyPort] = ['', ''];
    if (profile.proxy !== '') {
      try {
        const proxyURL = new URL(profile.proxy.startsWith('http') ? profile.proxy : `http://${profile.proxy}`);
        proxyHost = proxyURL.hostname;
        proxyPort = proxyURL.port;
      } catch (e) {
        throw new Error('Invalid proxy URL');
      }
    }
    const httpHeaders = profile.headers.split('\n')
      .filter(header => header.indexOf(':') !== -1)
      .reduce((acc, line) => {
        const [key, value] = line.split(':');
        acc[key] = value;
        return acc;
      }, {});

    const policies = profile.policies.split('|').map(item => item.trim());
    const checks = Array.from(new Set(policies.reduce((acc, policy) => {
      if (policy in ArachniChecks) { return acc.concat(ArachniChecks[policy]); } else { return acc; }
    }, [])));

    this.#profile = { // 默认配置
      http: {
        user_agent: 'Arachni/v2.0dev',
        request_redirect_limit: 5,
        request_concurrency: 20,
        request_queue_size: 100,
        response_max_size: 500000,
        cookies: {},

        /** 扫描参数配置 **/
        request_timeout: profile.maxResponseTime * 1000,

        /** 认证配置 **/
        authentication_type: profile.auth === 'Basic' ? 'basic' : profile.auth === 'Digest' ? 'digest' : profile.auth === 'NTLM' ? 'ntlm' : 'auto',
        authentication_username: profile.auth === 'None' ? '' : profile.authUsername,
        authentication_password: profile.auth === 'None' ? '' : profile.authPassword,

        /** HTTP配置 **/
        request_headers: httpHeaders,
        proxy_host: proxyHost,
        proxy_port: proxyPort
      },
      audit: {
        parameter_values: true,
        exclude_vector_patterns: [],
        include_vector_patterns: [],
        link_templates: []
      },
      input: {
        values: {},
        default_values: {
          '(?i-mx:name)': profile.authUsername,
          '(?i-mx:user)': profile.authUsername,
          '(?i-mx:usr)': profile.authUsername,
          '(?i-mx:pass)': profile.authPassword,
          '(?i-mx:txt)': 'arachni_text',
          '(?i-mx:num)': '132',
          '(?i-mx:amount)': '100',
          '(?i-mx:mail)': 'arachni@email.gr',
          '(?i-mx:account)': '12',
          '(?i-mx:id)': '1'
        },
        without_defaults: false,
        force: false
      },
      browser_cluster: {
        wait_for_elements: {},
        pool_size: 6,
        job_timeout: 25,
        worker_time_to_live: 100,
        ignore_images: false,
        screen_width: 1600,
        screen_height: 1200
      },
      scope: {
        redundant_path_patterns: {},
        dom_depth_limit: 5,
        exclude_path_patterns: [],
        exclude_content_patterns: [],
        include_path_patterns: [],
        restrict_paths: [],
        extend_paths: [],
        url_rewrites: {}
      },
      session: {},
      checks,
      platforms: [],
      plugins: {},
      no_fingerprinting: false,
      authorized_by: null
    };

    /*
    "checks" : [
      "ssn",
      "cvs_svn_users",
      "emails",
      "x_frame_options",
      "form_upload",
      "captcha",
      "insecure_cookies",
      "credit_card",
      "http_only_cookies",
      "html_objects",
      "unencrypted_password_forms",
      "insecure_cors_policy",
      "password_autocomplete",
      "hsts",
      "mixed_resource",
      "cookie_set_for_parent_domain",
      "private_ip",
      "origin_spoof_access_restriction_bypass",
      "http_put",
      "htaccess_limit",
      "allowed_methods",
      "common_admin_interfaces",
      "backup_files",
      "insecure_cross_domain_policy_headers",
      "backup_directories",
      "webdav",
      "common_files",
      "directory_listing",
      "insecure_client_access_policy",
      "localstart_asp",
      "interesting_responses",
      "xst",
      "insecure_cross_domain_policy_access",
      "backdoors",
      "common_directories",
      "rfi",
      "response_splitting",
      "sql_injection",
      "no_sql_injection",
      "os_cmd_injection",
      "sql_injection_timing",
      "xss_event",
      "path_traversal",
      "code_injection_php_input_wrapper",
      "os_cmd_injection_timing",
      "no_sql_injection_differential",
      "xpath_injection",
      "csrf",
      "xxe",
      "unvalidated_redirect_dom",
      "code_injection",
      "session_fixation",
      "sql_injection_differential",
      "xss_dom_script_context",
      "xss",
      "xss_script_context",
      "trainer",
      "xss_dom",
      "xss_tag",
      "file_inclusion",
      "xss_path",
      "source_code_disclosure",
      "unvalidated_redirect",
      "code_injection_timing",
      "ldap_injection"
    ],
     */

    // Object.assign(this.#profile, profile);
    // console.log(this.#profile);
  };

  /**
   * @description 获得运行状态
   * @returns {Promise<{scanId: null}>}
   */
  getStatus = async () => {
    if (this.#status.status === 'Stopped') {
      // 扫描未开始
      return {
        scanId: null
      };
    } else {
      // 扫描已开始，状态未知
      const AraStatus = await this.#getScanStatus(this.#status.scanId).then(res => res.data);
      if (AraStatus.status === 'done' || AraStatus.status === 'aborted') {
        // 扫描正好结束
        this.#status.status = 'Stopped';
        return {
          scanId: null
        };
      } else {
        // 扫描仍在运行中
        return {
          scanId: this.#status.scanId,
          progress: 0,
          urlCount: AraStatus.statistics.found_pages,
          vulnCount: AraStatus.issues.length
        };
      }
    }
  };

  /**
   * @description 启动扫描
   * @param url<String>
   * @returns {Promise<void>}
   */
  startScan = async (url) => {
    // if (this.#status.status !== 'Stopped') {
    //   throw new Error('Arachni扫描正在进行中，无法开启新任务');
    // } else {
    await this.clearScan();
    this.#status.scanId = await this.#startNewScan(url, this.#profile).then(res => res.data.id);
    this.#status.status = 'Running';
    return this.#status.scanId;
    // }
  };

  /**
   * @description 获得扫描结果
   * @returns {Promise<Object>}
   */
  getResult = async () => {
    const reportJson = await this.#getScanReportJSON(this.#status.scanId).then(res => res.data);

    const [urls, vulns] = [[], []];
    for (const url in reportJson.sitemap) {
      if (reportJson.sitemap[url] === 200) {
        urls.push({
          url,
          method: 'GET',
          postData: '',
          resourceType: 'static'
        });
      }
    }

    for (const vuln of reportJson.issues) {
      vulns.push({
        name: vuln.name,
        cwe: vuln.cwe,
        level: vuln?.severity?.toLowerCase() ?? 'unknown',
        href: vuln.vector.url,
        engine: 'arachni',
        information: {
          description: vuln?.description,
          proof: vuln?.proof,
          request: ((vuln?.request?.headers_string ?? '').trim() + '\n\n' + (vuln?.request?.body ?? '').trim()).trim(),
          response: ((vuln?.response?.headers_string ?? '').trim() + '\n\n' + (vuln?.response?.body ?? '').trim()).trim()
        }
      });
    }
    return {
      urls,
      vulns
    };
  };

  /**
   * @description 停止扫描
   * @returns {Promise<void>}
   */
  stopScan = async () => {
    if (this.#status.status === 'Stopped') {
      // 已经停止扫描的情况下调用此函数，并不报错
      return;
    } else {
      await this.#pauseRuningScan(this.#status.scanId);
    }
    this.#status.status = 'Stopped';
  };

  /**
   * @description 清除扫描记录
   * @returns {Promise<Object>}
   */
  clearScan = async () => {
    await this.#getScansId().then(res =>
      Object.keys(res.data).map(item => item)
    ).then(async item => {
      await Promise.all(item.map(item => this.#deleteScan(item)));
    });
  };

  /**
     * @description 初始化API客户端
     * @returns {Promise<void>}
     */
  initClient = async () => {
    // TODO: 初始化API客户端
  };
}

const arachniAPIClient = new ArachniAPIClient();

module.exports = { arachniAPIClient };

const runTest = async () => {
  await arachniAPIClient.setProfile(null);
  const scanId = await arachniAPIClient.startScan('http://192.168.50.129:11452');
  console.log(scanId);
  console.log(await arachniAPIClient.getStatus());

  setTimeout(async () => {
    // await arachniAPIClient.stopScan(scanId);
    console.log(await arachniAPIClient.getStatus());
    const result = await arachniAPIClient.getResult(scanId);
    console.log(result);
    // await arachniAPIClient.clearScan();
  }, 10000);
  // await arachniAPIClient.stopScan('3d7f1cec97c88e613145c9cf01a6271a');
};

// runTest();
