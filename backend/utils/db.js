const Time = require('silly-datetime');
const mongoose = require('mongoose');

const dateFormat = (date) => {
  return Time.format(date, 'YYYY-MM-DD HH:mm:ss');
};

/*******************************************
 * 扫描数据类型
 * 包含扫描、扫描配置、扫描引擎、扫描结果
 * 只需导出扫描和扫描配置数据类型
 *******************************************/

/** 扫描引擎 **/
const scanEngineSchema = new mongoose.Schema({
  /** 各引擎是否开启 **/
  w3af: Boolean,
  zaproxy: Boolean,
  arachni: Boolean
});

/** 扫描配置 **/
const scanProfileSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  }, // 扫描配置名称

  /** 扫描参数配置 **/
  maxScanTime: {
    type: Number,
    default: 600
  }, // 最大扫描时间
  maxResponseTime: {
    type: Number,
    default: 30
  }, // 最大响应时间

  /** 认证配置 **/
  auth: {
    type: String,
    enum: ['None', 'Basic', 'Digest', 'NTLM', 'Form'],
    default: 'None'
  },
  authUsername: {
    type: String,
    default: ''
  },
  authPassword: {
    type: String,
    default: ''
  },

  /** 漏洞扫描配置 **/
  warningThreshold: {
    type: String,
    enum: ['informational', 'low', 'medium', 'high', 'critical'],
    default: 'informational'
  },

  policies: {
    type: String,
    default: 'GENERIC'
  },

  /** HTTP配置 **/
  headers: {
    type: String,
    default: ''
  },
  proxy: {
    type: String,
    default: ''
  },

  /** 扫描引擎配置 **/
  engine: {
    type: scanEngineSchema,
    default:
      {
        w3af: true,
        zaproxy: false,
        arachni: false
      }
  }, // 扫描引擎配置

  /** 默认配置属性，默认配置不可删除 **/
  isDefault: {
    type: Boolean,
    default: false
  } // 是否为默认配置
});

scanProfileSchema.pre('remove', function (next) {
  const data = this;
  if (data.isDefault === true) {
    next(new Error('默认配置不可删除'));
  } else {
    next();
  }
});

/** 扫描结果：URL **/
const scanResultUrlSchema = new mongoose.Schema({
  url: String, // URL
  method: String, // 请求方法
  postData: String, // POST数据
  resourceType: String // 资源类型
});

/** 扫描结果：漏洞 **/
const scanResultVulnSchema = new mongoose.Schema({
  name: String, // 漏洞名称
  level: String, // 漏洞等级
  cwe: Number, // CWE编号
  href: [{
    url: String,
    properties: {
      w3af: {
        count: Number,
        information: mongoose.Schema.Types.Mixed
      },
      zaproxy: {
        count: Number,
        information: mongoose.Schema.Types.Mixed
      },
      arachni: {
        count: Number,
        information: mongoose.Schema.Types.Mixed
      }
    } // 各个引擎扫描的漏洞信息
  }], // 漏洞出现位置
  description: String, // 漏洞描述
  mitigation: [{
    phase: String,
    strategy: String,
    suggestion: String
  }] // 漏洞修复建议
});

/** 扫描结果 **/
// TODO: scanResult的更多配置
const scanResultSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  }, // 扫描报告名称
  createTime: {
    type: Date,
    default: Date.now
  }, // 创建时间，Date类型存储
  // urlCount: Number, // 扫描URL数量
  // vulnCount: Number // 扫描漏洞数量
  urls: [scanResultUrlSchema], // 扫描URL
  vulns: [scanResultVulnSchema] // 扫描漏洞
});

// 虚拟属性，格式化后的创建时间
scanResultSchema.virtual('createTimeFormat').get(function () {
  return dateFormat(this.createTime);
});

// 虚拟属性，扫描URL数量
scanResultSchema.virtual('urlCount').get(function () {
  return this.urls.length;
});

// 虚拟属性，扫描漏洞数量
scanResultSchema.virtual('vulnCount').get(function () {
  return this.vulns.length;
});

/** 扫描引擎状态 **/
// ScanManager类使用的保存扫描状态数据类型
const scanEngineStatusSchema = new mongoose.Schema({
  scanId: String,
  status: String,
  message: String,
  progress: Number,
  urlCount: Number,
  vulnCount: Number,
  result: Object
});
const scanStatusSchema = new mongoose.Schema({
  w3afStatus: {
    type: scanEngineStatusSchema,
    default: { status: 'Unused', message: '', scanId: -1, progress: 0, urlCount: 0, vulnCount: 0 }
  },
  zaproxyStatus: {
    type: scanEngineStatusSchema,
    default: { status: 'Unused', message: '', scanId: -1, progress: 0, urlCount: 0, vulnCount: 0 }
  },
  arachniStatus: {
    type: scanEngineStatusSchema,
    default: { status: 'Unused', message: '', scanId: -1, progress: 0, urlCount: 0, vulnCount: 0 }
  }
});

/** 扫描 **/
const scanSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  }, // 扫描名称
  target: {
    type: String,
    required: true
  }, // 扫描目标URL
  status: {
    type: String,
    enum: ['Running', 'Stopped', 'Timeout', 'Halted', 'Error']
  }, // 扫描状态，Running正在运行，Stopped正常结束，Timeout超时结束，Halted用户手动结束，Error发生错误
  createTime: {
    type: Date,
    default: Date.now
  }, // 创建时间，Date类型存储
  creator: String, // 创建者
  profile: scanProfileSchema, // 扫描配置文件
  engineStatus: scanStatusSchema, // 扫描引擎状态
  result: scanResultSchema // 扫描结果
});

// 虚拟属性，格式化后的创建时间
scanSchema.virtual('createTimeFormat').get(function () {
  return dateFormat(this.createTime);
});

/*******************************************
 * 漏洞数据类型
 *******************************************/
const vulnSchema = new mongoose.Schema({
  cwe: {
    type: Number,
    required: true,
    unique: true
  },
  name: String,
  level: String,
  description: String,
  mitigation: [{
    phase: String,
    strategy: String,
    suggestion: String
  }]
});

/*******************************************
 * 网络数据类型
 *******************************************/
const interfaceSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  }, // 网卡名称
  status: {
    type: String,
    enum: ['UP', 'DOWN', 'ERROR', 'DETECTING', 'UNKNOWN']
  }, // 网卡状态，Up启用，Down禁用，Error发生错误，Detecting正在检测
  number: Number, // 网卡编号
  mac: String, // MAC地址
  type: String, // 类型
  speed: String, // 速度
  duplex: String, // 双工模式

  ipv4: String, // IPv4地址
  maskv4: String, // IPv4子网掩码
  dnsv4: [String], // IPv4 DNS服务器
  gatewayv4: String, // IPv4网关
  broadcastv4: String, // IPv4广播地址

  ipv6: [String] // IPv6地址

});

const networkSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  }, // 网络名称
  description: String, // 网络描述
  creator: String, // 创建者
  createTime: {
    type: Date,
    default: Date.now
  }, // 创建时间，Date类型存储
  isDefault: {
    type: Boolean,
    default: false
  }, // 是否为默认存储的当前网络配置
  interfaces: [interfaceSchema] // 网卡配置
});

networkSchema.virtual('createTimeFormat').get(function () {
  return dateFormat(this.createTime);
});

const Scan = new mongoose.model('Scan', scanSchema);
const ScanProfile = new mongoose.model('ScanProfile', scanProfileSchema);
const ScanStatus = new mongoose.model('ScanStatus', scanStatusSchema);
const ScanResult = new mongoose.model('ScanResult', scanResultSchema);
const Vuln = new mongoose.model('Vuln', vulnSchema);

const Interface = new mongoose.model('Interface', interfaceSchema);
const Network = new mongoose.model('Network', networkSchema);

module.exports = {
  Scan,
  ScanProfile,
  ScanStatus,
  ScanResult,
  Vuln,
  Interface,
  Network,
};