[
    {
        "ID": "5",
        "Name": "J2EE Misconfiguration: Data Transmission Without Encryption",
        "Description": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.",
                    "Description_Merged": "The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "在网络传输过程中，发送的信息可能会被攻击者窃取。如果数据以明文形式发送或者加密弱，则攻击者可以读取或修改内容。",
        "Name_ZH": "J2EE配置错误：未加密的数据传输",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "产品配置应确保所有受访问控制页面使用SSL或具有相等强度和经过验证的声誉的加密机制。",
                    "Description_Merged": "产品配置应确保所有受访问控制页面使用SSL或具有相等强度和经过验证的声誉的加密机制。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "6",
        "Name": "J2EE Misconfiguration: Insufficient Session-ID Length",
        "Description": "The J2EE application is configured to use an insufficient session ID length.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.",
                    "Description_Merged": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.",
                    "Description_Merged": "A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "J2EE应用程序配置了不足够的会话ID长度。",
        "Name_ZH": "J2EE配置错误：会话ID长度不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "会话标识符应至少为128位长度，以防止暴力猜测会话。较短的会话标识符会使应用程序容易受到暴力猜测会话攻击。",
                    "Description_Merged": "会话标识符应至少为128位长度，以防止暴力猜测会话。较短的会话标识符会使应用程序容易受到暴力猜测会话攻击。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "可被猜测的有效会话标识符的下限是在任何给定时刻活跃于网站上的用户数。然而，任何没有注销会话的用户都会增加这个数字。（这是有一个短的非活跃会话超时的许多良好理由之一。）假设64位会话标识符，假设熵为32位。对于一个大型网站，假设攻击者每秒可以尝试1,000次猜测，并且任何给定时刻有10,000个有效会话标识符。在这些假设下，攻击者成功猜测一个有效会话标识符的预期时间小于4分钟。现在假设一个提供64位熵的128位会话标识符。对于一个非常大的网站，攻击者可能每秒尝试10,000次猜测，可被猜测的有效会话标识符有100,000个。在这些假设下，攻击者成功猜测一个有效会话标识符的预期时间大于292年。",
                    "Description_Merged": "可被猜测的有效会话标识符的下限是在任何给定时刻活跃于网站上的用户数。然而，任何没有注销会话的用户都会增加这个数字。（这是有一个短的非活跃会话超时的许多良好理由之一。）假设64位会话标识符，假设熵为32位。对于一个大型网站，假设攻击者每秒可以尝试1,000次猜测，并且任何给定时刻有10,000个有效会话标识符。在这些假设下，攻击者成功猜测一个有效会话标识符的预期时间小于4分钟。现在假设一个提供64位熵的128位会话标识符。对于一个非常大的网站，攻击者可能每秒尝试10,000次猜测，可被猜测的有效会话标识符有100,000个。在这些假设下，攻击者成功猜测一个有效会话标识符的预期时间大于292年。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "7",
        "Name": "J2EE Misconfiguration: Missing Custom Error Page",
        "Description": "The default error page of a web application should not display sensitive information about the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Handle exceptions appropriately in source code.",
                    "Description_Merged": "Handle exceptions appropriately in source code.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration"
                    ],
                    "Description": "Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.",
                    "Description_Merged": "Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.",
                    "Phase_Merged": "Implementation / System Configuration"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not attempt to process an error or attempt to mask it.",
                    "Description_Merged": "Do not attempt to process an error or attempt to mask it.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Verify return values are correct and do not supply sensitive information about the system.",
                    "Description_Merged": "Verify return values are correct and do not supply sensitive information about the system.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "Web应用程序的默认错误页面不应显示有关产品的敏感信息。",
        "Name_ZH": "J2EE配置错误：缺失自定义错误页面",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在源代码中适当处理异常。",
                    "Description_Merged": "在源代码中适当处理异常。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "实施",
                        "系统配置"
                    ],
                    "Description": "始终定义适当的错误页面。应用配置应指定默认错误页面，以确保应用程序永远不会向攻击者泄露错误信息。处理标准HTTP错误代码不仅有助于用户友好性，也是一种良好的安全实践。良好的配置还将定义一个最后机会的错误处理程序，捕获应用程序可能抛出的任何异常。",
                    "Description_Merged": "始终定义适当的错误页面。应用配置应指定默认错误页面，以确保应用程序永远不会向攻击者泄露错误信息。处理标准HTTP错误代码不仅有助于用户友好性，也是一种良好的安全实践。良好的配置还将定义一个最后机会的错误处理程序，捕获应用程序可能抛出的任何异常。",
                    "Phase_Merged": "实施 / 系统配置"
                },
                {
                    "Phase": "实施",
                    "Description": "不要尝试处理错误或试图掩盖错误。",
                    "Description_Merged": "不要尝试处理错误或试图掩盖错误。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "验证返回值是否正确，并且不提供有关系统的敏感信息。",
                    "Description_Merged": "验证返回值是否正确，并且不提供有关系统的敏感信息。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "8",
        "Name": "J2EE Misconfiguration: Entity Bean Declared Remote",
        "Description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Declare Java beans \"local\" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.",
                    "Description_Merged": "Declare Java beans \"local\" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "当应用程序为实体Bean公开远程接口时，可能会同时公开用于获取或设置Bean数据的方法。攻击者可以利用这些方法来读取敏感信息，或以违反应用程序预期的方式更改数据，从而可能导致其他漏洞。",
        "Name_ZH": "J2EE配置错误：声明实体Bean为远程访问",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在可能的情况下，将Java bean声明为“本地”。当必须远程访问bean时，请确保不暴露敏感信息，并确保应用程序逻辑对可能被攻击者修改的任何数据进行适当验证。",
                    "Description_Merged": "在可能的情况下，将Java bean声明为“本地”。当必须远程访问bean时，请确保不暴露敏感信息，并确保应用程序逻辑对可能被攻击者修改的任何数据进行适当验证。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "9",
        "Name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
        "Description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.",
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "如果向EJB方法分配了提升的访问权限，则攻击者可以利用这些权限来利用产品漏洞。",
        "Name_ZH": "J2EE配置错误：EJB方法的访问权限过弱",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "在分配EJB方法的访问权限时，遵循最小权限原则。不应将调用EJB方法的权限授予“任何人”角色。",
                    "Description_Merged": "在分配EJB方法的访问权限时，遵循最小权限原则。不应将调用EJB方法的权限授予“任何人”角色。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "11",
        "Name": "ASP.NET Misconfiguration: Creating Debug Binary",
        "Description": "Debugging messages help attackers learn about the system and plan a form of attack.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.",
                    "Description_Merged": "Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "调试信息帮助攻击者了解系统并计划一种攻击形式。",
        "Name_ZH": "ASP.NET配置错误：创建调试二进制文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "避免将调试二进制文件发布到生产环境中。在应用程序部署到生产环境时，将调试模式更改为false。",
                    "Description_Merged": "避免将调试二进制文件发布到生产环境中。在应用程序部署到生产环境时，将调试模式更改为false。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "12",
        "Name": "ASP.NET Misconfiguration: Missing Custom Error Page",
        "Description": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.",
                    "Description_Merged": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not attempt to process an error or attempt to mask it.",
                    "Description_Merged": "Do not attempt to process an error or attempt to mask it.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Verify return values are correct and do not supply sensitive information about the system.",
                    "Description_Merged": "Verify return values are correct and do not supply sensitive information about the system.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "ASP .NET应用程序必须启用自定义错误页面，以防止攻击者从框架的内置响应中获取信息。",
        "Name_ZH": "ASP.NET配置错误：缺失自定义错误页面",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "在源代码中适当处理异常。ASP .NET应用程序应配置为使用自定义错误页面而非框架默认页面。",
                    "Description_Merged": "在源代码中适当处理异常。ASP .NET应用程序应配置为使用自定义错误页面而非框架默认页面。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要尝试处理错误或试图掩盖错误。",
                    "Description_Merged": "不要尝试处理错误或试图掩盖错误。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "验证返回值是否正确，并且不提供有关系统的敏感信息。",
                    "Description_Merged": "验证返回值是否正确，并且不提供有关系统的敏感信息。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "13",
        "Name": "ASP.NET Misconfiguration: Password in Configuration File",
        "Description": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
                    "Description_Merged": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在配置文件中存储明文密码允许任何能够读取该文件的人访问受密码保护的资源，使其成为攻击者的易目标。",
        "Name_ZH": "ASP.NET配置错误：配置文件中包含密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "配置文件中存储的凭据应进行加密，使用标准API和业界认可的算法来加密存储在配置文件中的凭据。",
                    "Description_Merged": "配置文件中存储的凭据应进行加密，使用标准API和业界认可的算法来加密存储在配置文件中的凭据。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "14",
        "Name": "Compiler Removal of Code to Clear Buffers",
        "Description": "Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka \"dead store removal.\"",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Store the sensitive data in a \"volatile\" memory location if available.",
                    "Description_Merged": "Store the sensitive data in a \"volatile\" memory location if available.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "If possible, configure your compiler so that it does not remove dead stores.",
                    "Description_Merged": "If possible, configure your compiler so that it does not remove dead stores.",
                    "Phase_Merged": "Build and Compilation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Where possible, encrypt sensitive data that are used by a software system.",
                    "Description_Merged": "Where possible, encrypt sensitive data that are used by a software system.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "根据源代码，敏感内存被清除，但编译器优化在内存不再被读取时将其保留，也被称为“无用存储删除”。",
        "Name_ZH": "编译器删除代码以清除缓冲区",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果可行，将敏感数据存储在“易失性”内存位置。",
                    "Description_Merged": "如果可行，将敏感数据存储在“易失性”内存位置。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "如果可能，请配置编译器不要移除无用的存储。",
                    "Description_Merged": "如果可能，请配置编译器不要移除无用的存储。",
                    "Phase_Merged": "构建和编译"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在可能的情况下，加密软件系统使用的敏感数据。",
                    "Description_Merged": "在可能的情况下，加密软件系统使用的敏感数据。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "15",
        "Name": "External Control of System or Configuration Setting",
        "Description": "One or more system settings or configuration elements can be externally controlled by a user.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
                    "Description_Merged": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
                    "Description_Merged": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "一个或多个系统设置或配置元素可以被用户外部控制。",
        "Name_ZH": "外部控制系统或配置设置",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "由于设置操纵涵盖了各种各样的功能，试图对其进行详细说明将不可避免地是不完整的。与其寻找设置操纵类别中涉及的功能之间的紧密关系，不如退一步考虑一下攻击者不应该被允许控制的系统值的种类。",
                    "Description_Merged": "由于设置操纵涵盖了各种各样的功能，试图对其进行详细说明将不可避免地是不完整的。与其寻找设置操纵类别中涉及的功能之间的紧密关系，不如退一步考虑一下攻击者不应该被允许控制的系统值的种类。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "一般情况下，不要允许用户提供的或其他不受信任的数据控制敏感值。攻击者通过控制这些值获得的影响力并不总是立即显而易见的，但不要低估攻击者的创造力。",
                    "Description_Merged": "一般情况下，不要允许用户提供的或其他不受信任的数据控制敏感值。攻击者通过控制这些值获得的影响力并不总是立即显而易见的，但不要低估攻击者的创造力。",
                    "Phase_Merged": "实施 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "20",
        "Name": "Improper Input Validation",
        "Description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]",
                    "Description_Merged": "Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-7",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).",
                    "Description_Merged": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                            "Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."
                        ]
                    },
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
                    "Description_Merged": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-35",
                    "Phase": "Implementation",
                    "Description": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
                    "Description_Merged": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
                    "Description_Merged": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.",
                            "Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."
                        ]
                    },
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Description_Merged": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品接收输入或数据，但未验证或错误验证输入是否具有安全和正确处理数据所需的属性。",
        "Name_ZH": "不正确的输入验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": "考虑使用语言理论安全（LangSec）技术，通过使用形式语言对输入进行特征化，并构建该语言的“识别器”。这有效地要求解析成为一个独立的层，有效地在原始输入和内部数据表示之间建立边界，而不是将解析器代码散布在整个程序中，这可能会导致错误或不一致性，从而产生漏洞。[REF-1109] [REF-1110] [REF-1111]",
                    "Description_Merged": "考虑使用语言理论安全（LangSec）技术，通过使用形式语言对输入进行特征化，并构建该语言的“识别器”。这有效地要求解析成为一个独立的层，有效地在原始输入和内部数据表示之间建立边界，而不是将解析器代码散布在整个程序中，这可能会导致错误或不一致性，从而产生漏洞。[REF-1109] [REF-1110] [REF-1111]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-7",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用输入验证框架，如Struts或OWASP ESAPI Validation API。注意，使用框架并不能自动解决所有输入验证问题；要谨慎使用框架本身可能出现的弱点（CWE-1173）。",
                    "Description_Merged": "使用输入验证框架，如Struts或OWASP ESAPI Validation API。注意，使用框架并不能自动解决所有输入验证问题；要谨慎使用框架本身可能出现的弱点（CWE-1173）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                            "即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。"
                        ]
                    },
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。\n即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "当应用程序合并来自多个来源的数据时，请在合并源之后执行验证。单个数据元素可能会通过验证步骤，但在合并后可能违反预期的限制。",
                    "Description_Merged": "当应用程序合并来自多个来源的数据时，请在合并源之后执行验证。单个数据元素可能会通过验证步骤，但在合并后可能违反预期的限制。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-35",
                    "Phase": "实施",
                    "Description": "在调用跨语言边界的代码（例如从解释性语言到本机代码）时，特别小心验证所有输入。这可能会在语言边界之间创建意外的交互。确保您不违反与您进行接口的语言的任何预期。例如，尽管Java可能不容易受到缓冲区溢出的攻击，但在调用本机代码时提供一个大的参数可能会触发溢出。",
                    "Description_Merged": "在调用跨语言边界的代码（例如从解释性语言到本机代码）时，特别小心验证所有输入。这可能会在语言边界之间创建意外的交互。确保您不违反与您进行接口的语言的任何预期。例如，尽管Java可能不容易受到缓冲区溢出的攻击，但在调用本机代码时提供一个大的参数可能会触发溢出。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "直接将输入类型转换为预期的数据类型，例如使用转换函数将字符串转换为数字。在转换为预期的数据类型后，确保输入的值位于预期的可接受值范围内，并且保持多字段的一致性。",
                    "Description_Merged": "直接将输入类型转换为预期的数据类型，例如使用转换函数将字符串转换为数字。在转换为预期的数据类型后，确保输入的值位于预期的可接受值范围内，并且保持多字段的一致性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。",
                            "考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。"
                        ]
                    },
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。\n考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Description_Merged": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "22",
        "Name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
        "Description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-20.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                            "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:"
                        ],
                        "ul": {
                            "li": [
                                "realpath() in C",
                                "getCanonicalPath() in Java",
                                "GetFullPath() in ASP.NET",
                                "realpath() or abs_path() in Perl",
                                "realpath() in PHP"
                            ]
                        }
                    },
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\nrealpath() in C\ngetCanonicalPath() in Java\nGetFullPath() in ASP.NET\nrealpath() or abs_path() in Perl\nrealpath() in PHP",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": {
                        "p": [
                            "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                            "For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability."
                        ]
                    },
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.",
                            "This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."
                        ]
                    },
                    "Description_Merged": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                            "In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nIn the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个路径名，用于标识位于限制父目录下的文件或目录，但该产品未正确消除路径名中的特殊元素，这些特殊元素可能导致路径名解析为限制目录之外的位置。",
        "Name_ZH": "不正确的路径限制到受限目录（'路径遍历'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-20.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                            "使用内置的路径规范化函数 (如C中的realpath())，它可以生成路径名的规范版本，有效地删除\"..\"序列和符号链接 (CWE-23, CWE-59)。包括："
                        ],
                        "ul": {
                            "li": [
                                "C中的realpath()",
                                "Java中的getCanonicalPath()",
                                "ASP.NET中的GetFullPath()",
                                "在Perl中使用realpath()或abs_path()。",
                                "在PHP中使用realpath()。"
                            ]
                        }
                    },
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。\n使用内置的路径规范化函数 (如C中的realpath())，它可以生成路径名的规范版本，有效地删除\"..\"序列和符号链接 (CWE-23, CWE-59)。包括：\nC中的realpath()\nJava中的getCanonicalPath()\nASP.NET中的GetFullPath()\n在Perl中使用realpath()或abs_path()。\n在PHP中使用realpath()。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": {
                        "p": [
                            "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                            "例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap [REF-185]等功能提供了这种能力。"
                        ]
                    },
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。\n例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap [REF-185]等功能提供了这种能力。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。",
                            "这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。"
                        ]
                    },
                    "Description_Merged": "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。\n这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                            "在路径遍历的情况下，揭示路径信息的错误消息可以帮助攻击者构造适当的攻击字符串以在文件系统层次结构中移动。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。\n在路径遍历的情况下，揭示路径信息的错误消息可以帮助攻击者构造适当的攻击字符串以在文件系统层次结构中移动。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "23",
        "Name": "Relative Path Traversal",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                            "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:"
                        ],
                        "ul": {
                            "li": [
                                "realpath() in C",
                                "getCanonicalPath() in Java",
                                "GetFullPath() in ASP.NET",
                                "realpath() or abs_path() in Perl",
                                "realpath() in PHP"
                            ]
                        }
                    },
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\nrealpath() in C\ngetCanonicalPath() in Java\nGetFullPath() in ASP.NET\nrealpath() or abs_path() in Perl\nrealpath() in PHP",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除像\".. \"这样的序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "相对路径遍历",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                            "使用内置的路径规范化函数 (如C中的realpath())，它可以生成路径名的规范版本，有效地删除\"..\"序列和符号链接 (CWE-23, CWE-59)。包括："
                        ],
                        "ul": {
                            "li": [
                                "C中的realpath()",
                                "Java中的getCanonicalPath()",
                                "ASP.NET中的GetFullPath()",
                                "在Perl中使用realpath()或abs_path()。",
                                "在PHP中使用realpath()。"
                            ]
                        }
                    },
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。\n使用内置的路径规范化函数 (如C中的realpath())，它可以生成路径名的规范版本，有效地删除\"..\"序列和符号链接 (CWE-23, CWE-59)。包括：\nC中的realpath()\nJava中的getCanonicalPath()\nASP.NET中的GetFullPath()\n在Perl中使用realpath()或abs_path()。\n在PHP中使用realpath()。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "24",
        "Name": "Path Traversal: '../filedir'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除\"../\"序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'../filedir'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "25",
        "Name": "Path Traversal: '/../filedir'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除\"/../\"序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'/../filedir'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "26",
        "Name": "Path Traversal: '/dir/../filename'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除\"/dir/../filename\"序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'/dir/../filename'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "27",
        "Name": "Path Traversal: 'dir/../../filename'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal \"../\" sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除多个内部\"../\"序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'dir/../../filename'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "28",
        "Name": "Path Traversal: '..\\filedir'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"..\\\" sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除\"..\\\"序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'..\\filedir'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "29",
        "Name": "Path Traversal: '\\..\\filename'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除'\\..\\filename'（以反斜杠和点点开头）序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'\\..\\filename'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "30",
        "Name": "Path Traversal: '\\dir\\..\\filename'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入构建一个应位于限制目录中的路径名，但未正确消除'\\dir\\..\\filename'（以反斜杠和点点开头）序列，这些序列可能导致解析到该目录之外的位置。",
        "Name_ZH": "路径遍历：'\\dir\\..\\filename'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "31",
        "Name": "Path Traversal: 'dir\\..\\..\\filename'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和“dir\\..\\..\\filename”（多个内部反斜杠点点）序列，这可能导致解析到目录之外的位置。",
        "Name_ZH": "路径遍历：'dir\\..\\..\\filename'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "32",
        "Name": "Path Traversal: '...' (Triple Dot)",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和“...”（三个点）序列，这可能导致解析到目录之外的位置。",
        "Name_ZH": "路径遍历：'...'（三个点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "33",
        "Name": "Path Traversal: '....' (Multiple Dot)",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和“....”（多个点）序列，这可能导致解析到目录之外的位置。",
        "Name_ZH": "路径遍历：'....'（多个点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "34",
        "Name": "Path Traversal: '....//'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和“....//”（双重点点斜杠）序列，这可能导致解析到目录之外的位置。",
        "Name_ZH": "路径遍历：'....//'（多个点和斜杠）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "35",
        "Name": "Path Traversal: '.../...//'",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和“.../...//”（双重三个点斜杠）序列，这可能导致解析到目录之外的位置。",
        "Name_ZH": "路径遍历：'.../...//'（多个点、斜杠和斜杠）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "36",
        "Name": "Absolute Path Traversal",
        "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用外部输入来构建应该在受限目录内的路径名，但它没有正确地中和绝对路径序列，比如“/abs/path”，这可能导致解析到目录之外的位置。",
        "Name_ZH": "绝对路径遍历",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "37",
        "Name": "Path Traversal: '/absolute/pathname/here'",
        "Description": "The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以斜杠绝对路径形式（'/absolute/pathname/here'）的输入，但没有适当的验证，这可能允许攻击者遍历文件系统到未预期的位置或访问任意文件。",
        "Name_ZH": "路径遍历：'/absolute/pathname/here'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "38",
        "Name": "Path Traversal: '\\absolute\\pathname\\here'",
        "Description": "The product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以反斜杠绝对路径形式（'\\absolute\\pathname\\here'）的输入，但没有适当的验证，这可能允许攻击者遍历文件系统到未预期的位置或访问任意文件。",
        "Name_ZH": "路径遍历：'\\absolute\\pathname\\here'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "39",
        "Name": "Path Traversal: 'C:dirname'",
        "Description": "The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受包含驱动器字母或Windows卷标（'C:dirname'）的输入，这可能会将访问重定向到未预期的位置或任意文件。",
        "Name_ZH": "路径遍历：'C:dirname'",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "40",
        "Name": "Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)",
        "Description": "The product accepts input that identifies a Windows UNC share ('\\\\UNC\\share\\name') that potentially redirects access to an unintended location or arbitrary file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受标识Windows UNC共享（'\\\\UNC\\share\\name'）的输入，这可能会将访问重定向到未预期的位置或任意文件。",
        "Name_ZH": "路径遍历：'\\\\UNC\\share\\name\\'（Windows UNC共享）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "41",
        "Name": "Improper Resolution of Path Equivalence",
        "Description": "The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品容易通过路径等价性泄露文件系统内容。路径等价性涉及在文件和目录名称中使用特殊字符。相关操作旨在为同一对象生成多个名称。",
        "Name_ZH": "不正确的路径等价解析",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "42",
        "Name": "Path Equivalence: 'filename.' (Trailing Dot)",
        "Description": "The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以点结尾的路径输入（'filedir.'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'filename.'（尾部点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "43",
        "Name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)",
        "Description": "The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以多个点结尾的路径输入（'filedir....'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'filename....'（多个尾部点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "44",
        "Name": "Path Equivalence: 'file.name' (Internal Dot)",
        "Description": "The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以内部点形式的路径输入（'file.ordir'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'file.name'（内部点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "45",
        "Name": "Path Equivalence: 'file...name' (Multiple Internal Dot)",
        "Description": "The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以多个内部点形式的路径输入（'file...dir'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'file...name'（多个内部点）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "46",
        "Name": "Path Equivalence: 'filename ' (Trailing Space)",
        "Description": "The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以空格结尾的路径输入（'filedir '），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'filename '（尾部空格）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "47",
        "Name": "Path Equivalence: ' filename' (Leading Space)",
        "Description": "The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以空格开头的路径输入（' filedir'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：' filename'（前导空格）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "48",
        "Name": "Path Equivalence: 'file name' (Internal Whitespace)",
        "Description": "The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以内部空格形式的路径输入（'file(SPACE)name'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'file name'（内部空白）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "49",
        "Name": "Path Equivalence: 'filename/' (Trailing Slash)",
        "Description": "The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以斜杠结尾的路径输入（'filedir/'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'filename/'（尾部斜杠）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "50",
        "Name": "Path Equivalence: '//multiple/leading/slash'",
        "Description": "The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品接受以多个斜杠开头的路径输入（'//multiple/leading/slash'），但没有适当的验证，这可能导致模糊的路径解析，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价：'//multiple/leading/slash'（多个前导斜杠）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "51",
        "Name": "Path Equivalence: '/multiple//internal/slash'",
        "Description": "The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以多个内部斜杠（'/multiple//internal/slash/'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'/multiple//internal/slash' ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "52",
        "Name": "Path Equivalence: '/multiple/trailing/slash//'",
        "Description": "The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以多个尾部斜杠（'/multiple/trailing/slash//'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'/multiple/trailing/slash//' ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "53",
        "Name": "Path Equivalence: '\\multiple\\\\internal\\backslash'",
        "Description": "The product accepts path input in the form of multiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以多个内部反斜杠（'\\multiple\\trailing\\\\slash'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'\\multiple\\\\internal\\backslash' ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "54",
        "Name": "Path Equivalence: 'filedir\\' (Trailing Backslash)",
        "Description": "The product accepts path input in the form of trailing backslash ('filedir\\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以尾部反斜杠（'filedir\\'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'filedir\\' （尾部反斜杠） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "55",
        "Name": "Path Equivalence: '/./' (Single Dot Directory)",
        "Description": "The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以单个点目录利用（'/./'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'/./' （单点目录） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "56",
        "Name": "Path Equivalence: 'filedir*' (Wildcard)",
        "Description": "The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接受以星号通配符（'filedir*'）形式的路径输入，但没有适当的验证，这可能导致路径解析不明确，并允许攻击者遍历文件系统到意外位置或访问任意文件。",
        "Name_ZH": "路径等价性：'filedir*' （通配符） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "57",
        "Name": "Path Equivalence: 'fakedir/../realdir/filename'",
        "Description": "The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品包含保护机制来限制对'realdir/filename'的访问，但它使用外部输入构建路径名（'fakedir/../realdir/filename'），这些路径名未被这些机制处理。这允许攻击者对目标文件执行未经授权的操作。",
        "Name_ZH": "路径等价性：'fakedir/../realdir/filename' ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "58",
        "Name": "Path Equivalence: Windows 8.3 Filename",
        "Description": "The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.",
                    "Description_Merged": "Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品包含了一个保护机制，限制对Windows操作系统上的长文件名的访问，但它没有正确限制对等效的\"8.3\"短文件名的访问。",
        "Name_ZH": "路径等价性：Windows 8.3 文件名 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "通过编辑Windows注册表禁用Windows支持8.3文件名。禁止8.3文件名不会删除先前生成的8.3文件名。",
                    "Description_Merged": "通过编辑Windows注册表禁用Windows支持8.3文件名。禁止8.3文件名不会删除先前生成的8.3文件名。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "59",
        "Name": "Improper Link Resolution Before File Access ('Link Following')",
        "Description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                            "Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."
                        ]
                    },
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品在打开文件或目录时没有充分考虑到文件是一个解析到意外资源的链接或快捷方式。这可能允许攻击者使产品对未经授权的文件进行操作。",
        "Name_ZH": "文件访问前不正确的链接解析（链接跟随） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                            "拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。"
                        ]
                    },
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。\n拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "61",
        "Name": "UNIX Symbolic Link (Symlink) Following",
        "Description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
                    "Description_Merged": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                            "Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."
                        ]
                    },
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品在打开文件或目录时没有充分考虑到文件是一个解析到意图控制范围之外目标的符号链接。这可能允许攻击者使产品对未经授权的文件进行操作。",
        "Name_ZH": "UNIX 符号链接（Symlink）跟随 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "符号链接攻击经常发生在程序创建的存储文件/链接的tmp目录中。应限制对该目录的访问，防止攻击者操纵文件。",
                    "Description_Merged": "符号链接攻击经常发生在程序创建的存储文件/链接的tmp目录中。应限制对该目录的访问，防止攻击者操纵文件。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                            "拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。"
                        ]
                    },
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。\n拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "62",
        "Name": "UNIX Hard Link",
        "Description": "The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                            "Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."
                        ]
                    },
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "当打开文件或目录时，该产品未能充分考虑当名称与指向目标超出预期控制范围的硬链接相关联的情况。这可能使攻击者能够导致产品在未授权的文件上操作。",
        "Name_ZH": "UNIX 硬链接 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                            "拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。"
                        ]
                    },
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。\n拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "64",
        "Name": "Windows Shortcut Following (.LNK)",
        "Description": "The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                            "Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."
                        ]
                    },
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "当打开文件或目录时，该产品未能充分处理文件是Windows快捷方式（.LNK），其目标超出预期控制范围的情况。这可能使攻击者能够导致产品在未授权的文件上操作。",
        "Name_ZH": "Windows 快捷方式跟随（.LNK） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                            "拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。"
                        ]
                    },
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。\n拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "65",
        "Name": "Windows Hard Link",
        "Description": "The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                            "Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted."
                        ]
                    },
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "当打开文件或目录时，该产品未能充分处理名称与指向目标超出预期控制范围的硬链接相关联的情况。这可能使攻击者能够导致产品在未授权的文件上操作。",
        "Name_ZH": "Windows 硬链接 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-48.1",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                            "拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。"
                        ]
                    },
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。\n拒绝访问文件可以防止攻击者用链接替换该文件，链接指向敏感文件。确保系统良好的隔离，提供可信的受保护区域。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "66",
        "Name": "Improper Handling of File Names that Identify Virtual Resources",
        "Description": "The product does not handle or incorrectly handles a file name that identifies a \"virtual\" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品无法正确处理或处理不当由文件名标识的“虚拟”资源，该资源在与文件名相关联的目录中未直接指定，导致产品在非文件资源上执行基于文件的操作。",
        "Name_ZH": "处理虚拟资源标识文件名不正确 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "67",
        "Name": "Improper Handling of Windows Device Names",
        "Description": "The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.",
                    "Description_Merged": "Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品从用户输入构建路径名，但未能正确处理或处理不当包含Windows设备名称（如AUX或CON）的路径名。这通常导致拒绝服务或信息暴露，当应用程序尝试将路径名作为常规文件进行处理时。",
        "Name_ZH": "处理 Windows 设备名称不正确 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "熟悉系统部署的操作系统中的设备名称。检查输入是否包含这些设备名称。",
                    "Description_Merged": "熟悉系统部署的操作系统中的设备名称。检查输入是否包含这些设备名称。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "69",
        "Name": "Improper Handling of Windows ::DATA Alternate Data Stream",
        "Description": "The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Software tools are capable of finding ADSs on your system.",
                    "Description_Merged": "Software tools are capable of finding ADSs on your system.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that the source code correctly parses the filename to read or write to the correct stream.",
                    "Description_Merged": "Ensure that the source code correctly parses the filename to read or write to the correct stream.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未能正确防止对备用数据流（ADS）的访问或检测到其使用。",
        "Name_ZH": "处理 Windows ::DATA 替代数据流不正确 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "软件工具能够找到系统中的ADS。",
                    "Description_Merged": "软件工具能够找到系统中的ADS。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "实施",
                    "Description": "确保源代码正确解析文件名以读取或写入正确的流。",
                    "Description_Merged": "确保源代码正确解析文件名以读取或写入正确的流。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "71",
        "Name": "DEPRECATED: Apple '.DS_Store'",
        "Description": "This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它代表了UNIX硬链接弱点类型的特定观察示例，而不是自己独立的弱点类型。请参考CWE-62。",
        "Name_ZH": "已废弃：Apple '.DS_Store' ",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "72",
        "Name": "Improper Handling of Apple HFS+ Alternate Data Stream Path",
        "Description": "The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未能正确处理可能标识HFS+文件系统上文件的数据或资源分支的特殊路径。",
        "Name_ZH": "处理 Apple HFS+ 替代数据流路径不正确 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "73",
        "Name": "External Control of File Name or Path",
        "Description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.",
                    "Description_Merged": "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": {
                        "p": [
                            "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.",
                            "Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Description_Merged": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59).",
                    "Description_Merged": "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Installation",
                        "Operation"
                    ],
                    "Description": "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.",
                    "Description_Merged": "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.",
                    "Phase_Merged": "Installation / Operation"
                },
                {
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Description": "If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Description_Merged": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品允许用户输入控制或影响在文件系统操作中使用的路径或文件名。",
        "Name_ZH": "文件名或路径受外部控制 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "当文件名集合有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名的映射，并拒绝其他所有输入。例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap等功能提供了这种能力。",
                    "Description_Merged": "当文件名集合有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名的映射，并拒绝其他所有输入。例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap等功能提供了这种能力。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": {
                        "p": [
                            "在一个\"jail\"或类似的沙盒环境中运行代码，强制执行进程和操作系统之间的严格边界。这可以有效限制对特定目录中的所有文件的访问。",
                            "示例包括Unix chroot jail和AppArmor。一般来说，托管代码可能提供一些保护。",
                            "这可能不是一个可行的解决方案，它只限制了对操作系统的影响；您的应用程序的其他部分可能仍然容易受到攻击。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Description_Merged": "在一个\"jail\"或类似的沙盒环境中运行代码，强制执行进程和操作系统之间的严格边界。这可以有效限制对特定目录中的所有文件的访问。\n示例包括Unix chroot jail和AppArmor。一般来说，托管代码可能提供一些保护。\n这可能不是一个可行的解决方案，它只限制了对操作系统的影响；您的应用程序的其他部分可能仍然容易受到攻击。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "使用内置的路径规范化函数（如C语言中的realpath()），生成路径名的规范版本，有效地删除\".. \"序列和符号链接（CWE-23，CWE-59）。",
                    "Description_Merged": "使用内置的路径规范化函数（如C语言中的realpath()），生成路径名的规范版本，有效地删除\".. \"序列和符号链接（CWE-23，CWE-59）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "安装",
                        "操作"
                    ],
                    "Description": "使用操作系统级别的权限，并以低权限用户身份运行，以限制任何成功攻击的范围。",
                    "Description_Merged": "使用操作系统级别的权限，并以低权限用户身份运行，以限制任何成功攻击的范围。",
                    "Phase_Merged": "安装 / 操作"
                },
                {
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Description": "如果您正在使用PHP，请配置您的应用程序不使用register_globals。在实施过程中，开发应用程序时不要依赖此功能，但要注意实施register_globals模拟的弱点，例如CWE-95、CWE-621和类似问题。",
                    "Description_Merged": "如果您正在使用PHP，请配置您的应用程序不使用register_globals。在实施过程中，开发应用程序时不要依赖此功能，但要注意实施register_globals模拟的弱点，例如CWE-95、CWE-621和类似问题。",
                    "Phase_Merged": "操作 / 实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Description_Merged": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "74",
        "Name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
        "Description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Description_Merged": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.",
                    "Description_Merged": "Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用上游组件的外部影响输入构建命令、数据结构或记录的全部或部分，但未能中和或不正确中和可能修改解析或解释方式的特殊元素，当它被发送到下游组件时。",
        "Name_ZH": "未正确中和下游组件使用的输出中的特殊元素（注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Description_Merged": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "使用适当的allowlist和denylist解析混合来过滤所有输入中的控制平面语法。",
                    "Description_Merged": "使用适当的allowlist和denylist解析混合来过滤所有输入中的控制平面语法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "75",
        "Name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
        "Description": "The product does not adequately filter user-controlled input for special elements with control implications.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Description_Merged": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
                    "Description_Merged": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未能充分过滤用户可控输入中具有控制影响的特殊元素。",
        "Name_ZH": "未将特殊元素正确消毒到不同的平面中（特殊元素注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Description_Merged": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "使用适当的allowlist和denylist解析混合来过滤所有输入中的特殊元素语法。",
                    "Description_Merged": "使用适当的allowlist和denylist解析混合来过滤所有输入中的特殊元素语法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "76",
        "Name": "Improper Neutralization of Equivalent Special Elements",
        "Description": "The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Description_Merged": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.",
                    "Description_Merged": "Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品正确地消除了某些特殊元素，但错误地消除了等效的特殊元素。",
        "Name_ZH": "未正确中和等价的特殊元素 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Description_Merged": "可以选择不受这些问题影响的编程语言和支持技术。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "使用适当的allowlist和denylist解析混合来过滤所有输入中的等效特殊元素语法。",
                    "Description_Merged": "使用适当的allowlist和denylist解析混合来过滤所有输入中的等效特殊元素语法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "77",
        "Name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
        "Description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
                    "Description_Merged": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If possible, ensure that all external commands called from the program are statically created.",
                    "Description_Merged": "If possible, ensure that all external commands called from the program are statically created.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Operation",
                    "Description": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
                    "Description_Merged": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Assign permissions that prevent the user from accessing/opening privileged files.",
                    "Description_Merged": "Assign permissions that prevent the user from accessing/opening privileged files.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品使用上游组件的外部可影响输入构建了一条命令的全部或部分，但在发送给下游组件时未能消除或错误地消除可能修改预期命令的特殊元素。",
        "Name_ZH": "未正确中和命令中使用的特殊元素（命令注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "如果可能，尽量使用库调用而不是外部进程来重新创建所需功能。",
                    "Description_Merged": "如果可能，尽量使用库调用而不是外部进程来重新创建所需功能。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果可能，请确保从程序调用的所有外部命令是静态创建的。",
                    "Description_Merged": "如果可能，请确保从程序调用的所有外部命令是静态创建的。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "操作",
                    "Description": "运行时：可以以allowlist的方式使用运行时策略执行，以防止使用任何非授权命令。",
                    "Description_Merged": "运行时：可以以allowlist的方式使用运行时策略执行，以防止使用任何非授权命令。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "系统配置",
                    "Description": "分配权限以防止用户访问/打开特权文件。",
                    "Description_Merged": "分配权限以防止用户访问/打开特权文件。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "78",
        "Name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "Description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
                    "Description_Merged": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.",
                    "Description_Merged": "For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.",
                    "Description_Merged": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "Architecture and Design",
                    "Strategy": "Parameterization",
                    "Description": {
                        "p": [
                            "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
                            "Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments."
                        ]
                    },
                    "Description_Merged": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nSome languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Parameterization"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.",
                            "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \"&gt;\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.",
                            "Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \"&gt;\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "Operation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Description_Merged": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Description_Merged": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                            "In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nIn the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Operation",
                    "Strategy": "Sandbox or Jail",
                    "Description": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
                    "Description_Merged": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品使用上游组件的外部可影响输入构建了一条操作系统命令的全部或部分，但在发送给下游组件时未能消除或错误地消除可能修改预期操作系统命令的特殊元素。",
        "Name_ZH": "未正确中和操作系统命令中使用的特殊元素（操作系统命令注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "如果可能，尽量使用库调用而不是外部进程来重新创建所需功能。",
                    "Description_Merged": "如果可能，尽量使用库调用而不是外部进程来重新创建所需功能。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": "对于将用于生成要执行的命令的任何数据，尽可能避免让该数据受到外部控制。例如，在Web应用程序中，这可能需要将数据存储在会话状态的本地位置，而不是将其发送到客户端的隐藏表单字段中。",
                    "Description_Merged": "对于将用于生成要执行的命令的任何数据，尽可能避免让该数据受到外部控制。例如，在Web应用程序中，这可能需要将数据存储在会话状态的本地位置，而不是将其发送到客户端的隐藏表单字段中。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "Phase": "实施",
                    "Description": "如果要执行的程序允许在输入文件或标准输入中指定参数，则考虑使用该模式传递参数，而不是使用命令行。",
                    "Description_Merged": "如果要执行的程序允许在输入文件或标准输入中指定参数，则考虑使用该模式传递参数，而不是使用命令行。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "架构与设计",
                    "Strategy": "参数化",
                    "Description": {
                        "p": [
                            "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。",
                            "某些语言提供了多个函数用于调用命令。在可能的情况下，识别出任何使用单个字符串调用命令shell的函数，并将其替换为需要单独参数的函数。这些函数通常会对参数进行适当的引用和过滤。例如，在C语言中，system()函数接受一个包含要执行的整个命令的字符串，而execl()、execve()和其他函数则需要一个字符串数组，每个参数一个字符串。在Windows中，CreateProcess()一次只接受一个命令。在Perl中，如果将system()提供一个参数数组，则它会引用每个参数。"
                        ]
                    },
                    "Description_Merged": "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。\n某些语言提供了多个函数用于调用命令。在可能的情况下，识别出任何使用单个字符串调用命令shell的函数，并将其替换为需要单独参数的函数。这些函数通常会对参数进行适当的引用和过滤。例如，在C语言中，system()函数接受一个包含要执行的整个命令的字符串，而execl()、execve()和其他函数则需要一个字符串数组，每个参数一个字符串。在Windows中，CreateProcess()一次只接受一个命令。在Perl中，如果将system()提供一个参数数组，则它会引用每个参数。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "参数化"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "构造操作系统命令字符串时，使用严格的允许列表，根据请求中参数的预期值来限制字符集。这将间接地限制攻击的范围，但这种技术比起正确的输出编码和转义来说不那么重要。",
                            "请注意，正确的输出编码、转义和引用是预防操作系统命令注入最有效的解决方案，尽管输入验证可能提供一些深度防御。这是因为它有效地限制了输出中会出现的内容。输入验证并不能始终预防操作系统命令注入，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，在调用邮件程序时，您可能需要允许主题字段包含像\";\"和\"&gt;\"这样的危险输入，这些字符需要进行转义或其他处理。在这种情况下，去除这些字符可能会降低操作系统命令注入的风险，但会导致不正确的行为，因为主题字段将无法按用户意图进行记录。这可能看起来是一个小小的不便，但当程序依赖于良好结构化的主题行以便将消息传递给其他组件时，这可能更加重要。",
                            "即使在验证过程中犯了错误（例如忘记了100个输入字段中的一个），适当的编码仍然有可能保护您免受注入攻击。只要它不是孤立进行的，输入验证仍然是一种有用的技术，因为它可能显著减少攻击面，允许您检测某些攻击，并提供其他安全益处，这些益处无法通过适当的编码解决。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n构造操作系统命令字符串时，使用严格的允许列表，根据请求中参数的预期值来限制字符集。这将间接地限制攻击的范围，但这种技术比起正确的输出编码和转义来说不那么重要。\n请注意，正确的输出编码、转义和引用是预防操作系统命令注入最有效的解决方案，尽管输入验证可能提供一些深度防御。这是因为它有效地限制了输出中会出现的内容。输入验证并不能始终预防操作系统命令注入，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，在调用邮件程序时，您可能需要允许主题字段包含像\";\"和\"&gt;\"这样的危险输入，这些字符需要进行转义或其他处理。在这种情况下，去除这些字符可能会降低操作系统命令注入的风险，但会导致不正确的行为，因为主题字段将无法按用户意图进行记录。这可能看起来是一个小小的不便，但当程序依赖于良好结构化的主题行以便将消息传递给其他组件时，这可能更加重要。\n即使在验证过程中犯了错误（例如忘记了100个输入字段中的一个），适当的编码仍然有可能保护您免受注入攻击。只要它不是孤立进行的，输入验证仍然是一种有用的技术，因为它可能显著减少攻击面，允许您检测某些攻击，并提供其他安全益处，这些益处无法通过适当的编码解决。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "操作",
                    "Strategy": "编译或构建加固",
                    "Description": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Description_Merged": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Description_Merged": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                            "在OS命令注入的情况下，返回给用户的错误信息可能会透露是否正在执行OS命令，以及可能正在使用的命令。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。\n在OS命令注入的情况下，返回给用户的错误信息可能会透露是否正在执行OS命令，以及可能正在使用的命令。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "操作",
                    "Strategy": "沙箱或监狱",
                    "Description": "使用运行时策略强制执行创建允许命令的白名单，然后阻止使用任何不在白名单中的命令。可以使用诸如AppArmor之类的技术来实现这一点。",
                    "Description_Merged": "使用运行时策略强制执行创建允许命令的白名单，然后阻止使用任何不在白名单中的命令。可以使用诸如AppArmor之类的技术来实现这一点。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "79",
        "Name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "Description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": {
                        "p": [
                            "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                            "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                            "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                            "etc. Note that HTML Entity Encoding is only appropriate for the HTML body.",
                            "Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed."
                        ],
                        "ul": {
                            "li": [
                                "HTML body",
                                "Element attributes (such as src=\"XYZ\")",
                                "URIs",
                                "JavaScript sections",
                                "Cascading Style Sheets and style property"
                            ]
                        }
                    },
                    "Description_Merged": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nParts of the same output document may require different encodings, which will vary depending on whether the output is in the:\netc. Note that HTML Entity Encoding is only appropriate for the HTML body.\nConsult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.\nHTML body\nElement attributes (such as src=\"XYZ\")\nURIs\nJavaScript sections\nCascading Style Sheets and style property",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.",
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "Architecture and Design",
                    "Strategy": "Parameterization",
                    "Description": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
                    "Description_Merged": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Parameterization"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                            "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"&lt;3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"&lt;\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"&lt;\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                            "Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                            "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"&lt;3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"&lt;\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"&lt;\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品在将用户可控输入放置在用作向其他用户提供的网页时未能消除或错误地消除用户可控输入。",
        "Name_ZH": "未正确中和 Web 页面生成过程中的输入（跨站脚本攻击） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "使生成正确编码输出更容易的库和框架的例子包括Microsoft的Anti-XSS库、OWASP ESAPI编码模块和Apache Wicket。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n使生成正确编码输出更容易的库和框架的例子包括Microsoft的Anti-XSS库、OWASP ESAPI编码模块和Apache Wicket。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": {
                        "p": [
                            "了解数据将被使用的上下文和预期的编码。这在在不同组件之间传输数据或生成可能同时包含多种编码的输出（如网页或多部分邮件消息）时尤为重要。研究所有预期的通信协议和数据表示以确定所需的编码策略。",
                            "对于将输出到另一个网页的任何数据，特别是从外部输入接收的数据，请对所有非字母数字字符使用适当的编码。",
                            "相同输出文档的不同部分可能需要不同的编码，这取决于输出是否在：",
                            "等等。请注意，HTML实体编码仅适用于HTML正文。",
                            "请参考XSS Prevention Cheat Sheet [REF-724]，了解所需的编码和转义类型的更多详细信息。"
                        ],
                        "ul": {
                            "li": [
                                "HTML正文",
                                "元素属性（如src=\"XYZ\"）",
                                "统一资源标识符（URIs）",
                                "JavaScript部分",
                                "层叠样式表和style属性"
                            ]
                        }
                    },
                    "Description_Merged": "了解数据将被使用的上下文和预期的编码。这在在不同组件之间传输数据或生成可能同时包含多种编码的输出（如网页或多部分邮件消息）时尤为重要。研究所有预期的通信协议和数据表示以确定所需的编码策略。\n对于将输出到另一个网页的任何数据，特别是从外部输入接收的数据，请对所有非字母数字字符使用适当的编码。\n相同输出文档的不同部分可能需要不同的编码，这取决于输出是否在：\n等等。请注意，HTML实体编码仅适用于HTML正文。\n请参考XSS Prevention Cheat Sheet [REF-724]，了解所需的编码和转义类型的更多详细信息。\nHTML正文\n元素属性（如src=\"XYZ\"）\n统一资源标识符（URIs）\nJavaScript部分\n层叠样式表和style属性",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.",
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "架构与设计",
                    "Strategy": "参数化",
                    "Description": "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。",
                    "Description_Merged": "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "参数化"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在动态构建网页时，使用严格的允许列表，基于请求中参数的预期值限制字符集。所有输入都应该经过验证和清理，不仅仅是用户应该指定的参数，还包括隐藏字段、Cookie、头部、URL等请求中的所有数据。一个常见的错误是只验证站点预期重新显示的字段。通常会看到应用服务器或应用程序未预料到的请求数据被反映出来。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的所有部分。",
                            "请注意，适当的输出编码、转义和引用是防止跨站脚本攻击最有效的解决方案，尽管输入验证可能提供一些深度防御。这是因为它有效地限制了输出中会出现的内容。输入验证并不总能防止跨站脚本攻击，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，在聊天应用程序中，心形表情符（\"&lt;3\"）可能会通过验证步骤，因为它常被使用。然而，它不能直接插入到网页中，因为它包含\"&lt;\"字符，需要进行转义或其他处理。在这种情况下，去除\"&lt;\"可能会降低跨站脚本攻击的风险，但会导致不正确的行为，因为表情符将无法记录。这可能看起来是一个小不便，但在一个希望表示不等式的数学论坛中，它将更重要。",
                            "即使在验证过程中犯了错误（例如忘记了100个输入字段中的一个），适当的编码仍然有可能保护您免受注入攻击。只要它不是孤立进行的，输入验证仍然是一种有用的技术，因为它可能显著减少攻击面，允许您检测某些攻击，并提供其他安全益处，这些益处无法通过适当的编码解决。",
                            "确保您在应用程序的明确定义的接口处进行输入验证。这将有助于保护应用程序，即使组件被重用或移动到其他位置。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在动态构建网页时，使用严格的允许列表，基于请求中参数的预期值限制字符集。所有输入都应该经过验证和清理，不仅仅是用户应该指定的参数，还包括隐藏字段、Cookie、头部、URL等请求中的所有数据。一个常见的错误是只验证站点预期重新显示的字段。通常会看到应用服务器或应用程序未预料到的请求数据被反映出来。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的所有部分。\n请注意，适当的输出编码、转义和引用是防止跨站脚本攻击最有效的解决方案，尽管输入验证可能提供一些深度防御。这是因为它有效地限制了输出中会出现的内容。输入验证并不总能防止跨站脚本攻击，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，在聊天应用程序中，心形表情符（\"&lt;3\"）可能会通过验证步骤，因为它常被使用。然而，它不能直接插入到网页中，因为它包含\"&lt;\"字符，需要进行转义或其他处理。在这种情况下，去除\"&lt;\"可能会降低跨站脚本攻击的风险，但会导致不正确的行为，因为表情符将无法记录。这可能看起来是一个小不便，但在一个希望表示不等式的数学论坛中，它将更重要。\n即使在验证过程中犯了错误（例如忘记了100个输入字段中的一个），适当的编码仍然有可能保护您免受注入攻击。只要它不是孤立进行的，输入验证仍然是一种有用的技术，因为它可能显著减少攻击面，允许您检测某些攻击，并提供其他安全益处，这些益处无法通过适当的编码解决。\n确保您在应用程序的明确定义的接口处进行输入验证。这将有助于保护应用程序，即使组件被重用或移动到其他位置。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "80",
        "Name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"&lt;\", \"&gt;\", and \"&amp;\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但在发送给处理网页的下游组件时未能消除或错误地消除特殊字符（如\"&lt;\", \"&gt;\", 和 \"&amp;\"），这些特殊字符可能被解释为网页脚本元素。",
        "Name_ZH": "未正确中和 Web 页面中脚本相关的 HTML 标签（基本 XSS） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "81",
        "Name": "Improper Neutralization of Script in an Error Message Web Page",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not write user-controlled input to error pages.",
                    "Description_Merged": "Do not write user-controlled input to error pages.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但在发送给错误页面时未能消除或错误地消除可能被解释为网页脚本元素的特殊字符。",
        "Name_ZH": "未正确中和错误消息 Web 页面中的脚本 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不要将用户可控输入写入错误页面。",
                    "Description_Merged": "不要将用户可控输入写入错误页面。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "82",
        "Name": "Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
        "Description": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该Web应用程序未能消除或错误地消除HTML IMG标签的属性中的脚本元素，如src属性。",
        "Name_ZH": "未正确中和 Web 页面中 IMG 标签的属性中的脚本 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "83",
        "Name": "Improper Neutralization of Script in Attributes in a Web Page",
        "Description": "The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品未能消除或错误地消除标签中危险属性（如onmouseover、onload、onerror或style）中的\"javascript:\"或其他URI。",
        "Name_ZH": "未正确中和 Web 页面中属性中的脚本 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "84",
        "Name": "Improper Neutralization of Encoded URI Schemes in a Web Page",
        "Description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Resolve all URIs to absolute or canonical representations before processing.",
                    "Description_Merged": "Resolve all URIs to absolute or canonical representations before processing.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该Web应用程序错误地消除了使用URI编码伪装的可执行脚本的用户可控输入。",
        "Name_ZH": "未正确中和 Web 页面中编码的 URI 方案 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在处理之前，将所有URI解析为绝对或规范表示形式。",
                    "Description_Merged": "在处理之前，将所有URI解析为绝对或规范表示形式。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "85",
        "Name": "Doubled Character XSS Manipulations",
        "Description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Resolve all filtered input to absolute or canonical representations before processing.",
                    "Description_Merged": "Resolve all filtered input to absolute or canonical representations before processing.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该网络应用程序未对用户可控制的输入进行过滤，该输入可能伪装成使用了字符重复的可执行脚本。",
        "Name_ZH": "重复字符 XSS 操作 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在处理之前，将所有经过过滤的输入解析为绝对或规范表示形式。",
                    "Description_Merged": "在处理之前，将所有经过过滤的输入解析为绝对或规范表示形式。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "86",
        "Name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
        "Description": "The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品未对标签名、URI方案和其他标识符中的无效字符或字节序列进行中间处理或错误中间处理。",
        "Name_ZH": "未正确中和 Web 页面标识符中的无效字符 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "87",
        "Name": "Improper Neutralization of Alternate XSS Syntax",
        "Description": "The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Resolve all input to absolute or canonical representations before processing.",
                    "Description_Merged": "Resolve all input to absolute or canonical representations before processing.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Description_Merged": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                            "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
                        ]
                    },
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "Implementation",
                    "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Description_Merged": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品未对用户可控制的输入进行中间处理或错误中间处理，以处理备用的脚本语法。",
        "Name_ZH": "未正确中和替代的 XSS 语法 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在处理之前，将所有输入解析为绝对或规范表示形式。",
                    "Description_Merged": "在处理之前，将所有输入解析为绝对或规范表示形式。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Description_Merged": "对于每个输入参数，仔细检查是否符合严格的正向规范（白名单），定义特定允许的字符和格式。不仅应对用户应指定的参数进行中和处理，而且对请求中的所有数据进行处理，包括标签属性、隐藏字段、cookie、头部、URL等。一种常见的错误是只验证网站上预期重新显示的字段，这会导致持续的跨站脚本漏洞。我们经常遇到来自请求的数据被应用服务器或开发团队未预料到的应用程序反映。此外，当前未反映的字段可能会被未来的开发人员使用。因此，建议验证HTTP请求的全部部分。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-30.1",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                            "在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。"
                        ]
                    },
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。\n在网页中经常出现输出编码不一致的问题。如果在HTTP头中没有指定编码，浏览器通常会猜测正在使用的编码。这可能会使浏览器受到微妙的跨站脚本攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-43",
                    "Phase": "实施",
                    "Description": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Description_Merged": "在Struts中，将所有来自表单bean的数据写入时，将bean的filter属性设置为true。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-31",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "为了减轻针对用户会话Cookie的跨站脚本攻击，将会话Cookie设置为HttpOnly。在支持HttpOnly功能的浏览器中（如较新版本的Internet Explorer和Firefox），该属性可以防止恶意客户端脚本（使用document.cookie）访问用户的会话Cookie。但这并不是完整的解决方案，因为并非所有浏览器都支持HttpOnly。更重要的是，XMLHTTPRequest和其他强大的浏览器技术可以读取HTTP头，包括设置了HttpOnly标志的Set-Cookie头。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "88",
        "Name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
        "Description": "The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Parameterization",
                    "Description": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
                    "Effectiveness": "High",
                    "Description_Merged": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Parameterization"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.",
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
                    "Description_Merged": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.",
                            "Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."
                        ]
                    },
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Description_Merged": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
                    "Description_Merged": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Description_Merged": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品在构建一个由另一个控制范围内的组件执行的命令字符串时，未正确分隔命令字符串中的参数、选项或开关。",
        "Name_ZH": "未正确中和命令中的参数分隔符（参数注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "参数化",
                    "Description": "在可能的情况下，避免构建一个包含命令及其参数的单个字符串。一些语言或框架提供了支持指定独立参数的函数，例如作为数组，用于在构建命令时自动执行适当的引号或转义。例如，在PHP中，可以使用escapeshellarg()对system()的单个参数进行转义，或者可以使用包含多个参数的数组调用exec()。在C语言中，代码通常可以从使用只接受单个字符串的system()转换为使用exec()，后者需要为每个参数提供单独的函数参数。",
                    "Effectiveness": "High",
                    "Description_Merged": "在可能的情况下，避免构建一个包含命令及其参数的单个字符串。一些语言或框架提供了支持指定独立参数的函数，例如作为数组，用于在构建命令时自动执行适当的引号或转义。例如，在PHP中，可以使用escapeshellarg()对system()的单个参数进行转义，或者可以使用包含多个参数的数组调用exec()。在C语言中，代码通常可以从使用只接受单个字符串的system()转换为使用exec()，后者需要为每个参数提供单独的函数参数。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "参数化"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "了解所有可能的不可信输入进入产品的领域：参数或参数、cookie、从网络读取的任何内容、环境变量、请求头部及内容、URL组件、电子邮件、文件、数据库以及为应用程序提供数据的任何外部系统。在定义良好的接口处进行输入验证。",
                    "Description_Merged": "了解所有可能的不可信输入进入产品的领域：参数或参数、cookie、从网络读取的任何内容、环境变量、请求头部及内容、URL组件、电子邮件、文件、数据库以及为应用程序提供数据的任何外部系统。在定义良好的接口处进行输入验证。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "直接将输入类型转换为预期的数据类型，例如使用转换函数将字符串转换为数字。在转换为预期的数据类型后，确保输入的值位于预期的可接受值范围内，并且保持多字段的一致性。",
                    "Description_Merged": "直接将输入类型转换为预期的数据类型，例如使用转换函数将字符串转换为数字。在转换为预期的数据类型后，确保输入的值位于预期的可接受值范围内，并且保持多字段的一致性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。",
                            "考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。"
                        ]
                    },
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。\n考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Description_Merged": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "当应用程序合并来自多个来源的数据时，请在合并源之后执行验证。单个数据元素可能会通过验证步骤，但在合并后可能违反预期的限制。",
                    "Description_Merged": "当应用程序合并来自多个来源的数据时，请在合并源之后执行验证。单个数据元素可能会通过验证步骤，但在合并后可能违反预期的限制。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Description_Merged": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "89",
        "Name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "Description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "Architecture and Design",
                    "Strategy": "Parameterization",
                    "Description": {
                        "p": [
                            "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
                            "Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]"
                        ]
                    },
                    "Description_Merged": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nProcess SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Parameterization"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                            "Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures."
                        ]
                    },
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nSpecifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": {
                        "p": [
                            "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                            "Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP."
                        ]
                    },
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInstead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.",
                            "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.",
                            "When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\nWhen feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                            "In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nIn the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品在构建一个由上游组件的外部可影响输入执行的SQL命令的全部或部分时，未对可以修改发送给下游组件的SQL命令的意图的特殊元素进行中间处理或错误中间处理。",
        "Name_ZH": "未正确中和 SQL 命令中使用的特殊元素（SQL 注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用Hibernate或Enterprise Java Beans等持久层，如果正确使用，可以有效防止SQL注入。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用Hibernate或Enterprise Java Beans等持久层，如果正确使用，可以有效防止SQL注入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "架构与设计",
                    "Strategy": "参数化",
                    "Description": {
                        "p": [
                            "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。",
                            "使用预编译语句、参数化查询或存储过程来处理SQL查询。这些特性应该接受参数或变量，并支持强类型。不要在这些特性内动态构建和执行查询字符串，使用类似\"exec\"的功能，因为这可能重新引入SQL注入的可能性。【REF-867】"
                        ]
                    },
                    "Description_Merged": "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。\n使用预编译语句、参数化查询或存储过程来处理SQL查询。这些特性应该接受参数或变量，并支持强类型。不要在这些特性内动态构建和执行查询字符串，使用类似\"exec\"的功能，因为这可能重新引入SQL注入的可能性。【REF-867】",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "参数化"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                            "在创建SQL数据库的用户帐户时，遵循最小权限原则。数据库用户应仅具有使用其帐户所需的最低权限。如果系统要求一个用户可以读取和修改自己的数据，则限制其权限，使其无法读取/写入其他用户的数据。对于所有数据库对象，使用尽可能严格的权限，例如仅允许执行存储过程。"
                        ]
                    },
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。\n在创建SQL数据库的用户帐户时，遵循最小权限原则。数据库用户应仅具有使用其帐户所需的最低权限。如果系统要求一个用户可以读取和修改自己的数据，则限制其权限，使其无法读取/写入其他用户的数据。对于所有数据库对象，使用尽可能严格的权限，例如仅允许执行存储过程。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": {
                        "p": [
                            "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                            "可以使用数据库或编程语言中的现有功能，而不是构建新的实现。例如，Oracle的DBMS_ASSERT包可以检查或强制参数具有某些属性，使它们更不容易受到SQL注入的影响。对于MySQL，mysql_real_escape_string() API函数在C和PHP中都可用。"
                        ]
                    },
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。\n可以使用数据库或编程语言中的现有功能，而不是构建新的实现。例如，Oracle的DBMS_ASSERT包可以检查或强制参数具有某些属性，使它们更不容易受到SQL注入的影响。对于MySQL，mysql_real_escape_string() API函数在C和PHP中都可用。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在构建SQL查询字符串时，使用严格的允许列表，根据请求中参数的预期值来限制字符集。这间接限制了攻击范围，但这种技术不如适当的输出编码和转义重要。",
                            "请注意，适当的输出编码、转义和引用是防止SQL注入最有效的解决方案，尽管输入验证可能提供一定的深度防御。这是因为它有效地限制了输出中可能出现的内容。输入验证并不总能防止SQL注入，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，名字\"O'Reilly\"可能会通过验证步骤，因为它是英语中常见的姓氏。但是，它不能直接插入数据库，因为它包含\"'\"的撇号字符，需要进行转义或其他处理。在这种情况下，去除撇号可能会减少SQL注入的风险，但会产生错误行为，因为将记录错误的名称。",
                            "在可行的情况下，最安全的做法可能是完全禁止使用元字符，而不是转义它们。这将提供一定的深度防御。在数据输入到数据库后，后续处理过程可能忽略在使用之前转义元字符，而您可能无法控制这些处理过程。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在构建SQL查询字符串时，使用严格的允许列表，根据请求中参数的预期值来限制字符集。这间接限制了攻击范围，但这种技术不如适当的输出编码和转义重要。\n请注意，适当的输出编码、转义和引用是防止SQL注入最有效的解决方案，尽管输入验证可能提供一定的深度防御。这是因为它有效地限制了输出中可能出现的内容。输入验证并不总能防止SQL注入，特别是如果您需要支持可能包含任意字符的自由文本字段。例如，名字\"O'Reilly\"可能会通过验证步骤，因为它是英语中常见的姓氏。但是，它不能直接插入数据库，因为它包含\"'\"的撇号字符，需要进行转义或其他处理。在这种情况下，去除撇号可能会减少SQL注入的风险，但会产生错误行为，因为将记录错误的名称。\n在可行的情况下，最安全的做法可能是完全禁止使用元字符，而不是转义它们。这将提供一定的深度防御。在数据输入到数据库后，后续处理过程可能忽略在使用之前转义元字符，而您可能无法控制这些处理过程。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                            "在SQL注入的上下文中，透露SQL查询结构的错误信息可能帮助攻击者针对成功的攻击字符串进行定制。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。\n在SQL注入的上下文中，透露SQL查询结构的错误信息可能帮助攻击者针对成功的攻击字符串进行定制。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "90",
        "Name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "Description": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在构建一个由上游组件的外部可影响输入执行的LDAP查询的全部或部分时，未对可以修改发送给下游组件的LDAP查询的意图的特殊元素进行中间处理或错误中间处理。",
        "Name_ZH": "未正确中和 LDAP 查询中使用的特殊元素（LDAP 注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "91",
        "Name": "XML Injection (aka Blind XPath Injection)",
        "Description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确中间处理特殊元素，这些元素用于XML，允许攻击者在XML被最终系统处理之前修改语法、内容或命令。",
        "Name_ZH": "XML 注入（又称盲 XPath 注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "92",
        "Name": "DEPRECATED: Improper Sanitization of Custom Special Characters",
        "Description": "This entry has been deprecated. It originally came from PLOVER, which sometimes defined \"other\" and \"miscellaneous\" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用。它最初来自PLOVER，有时为了满足分类的详尽要求而定义了“其他”和“杂项”类别。在CWE的上下文中，更抽象的条目在映射情况下更为合适。CWE-75是更合适的映射。",
        "Name_ZH": "已废弃：未正确消毒自定义特殊字符 ",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "93",
        "Name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "Description": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Avoid using CRLF as a special sequence.",
                    "Description_Merged": "Avoid using CRLF as a special sequence.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Appropriately filter or quote CRLF sequences in user-controlled input.",
                    "Description_Merged": "Appropriately filter or quote CRLF sequences in user-controlled input.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用CRLF（回车换行）作为特殊元素，例如分隔行或记录，但未对输入中的CRLF序列进行中间处理或错误中间处理。",
        "Name_ZH": "未正确中和 CRLF 序列（CRLF 注入） ",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "避免使用CRLF作为特殊序列。",
                    "Description_Merged": "避免使用CRLF作为特殊序列。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "适当地过滤或引用用户可控制的输入中的CRLF序列。",
                    "Description_Merged": "适当地过滤或引用用户可控制的输入中的CRLF序列。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "94",
        "Name": "Improper Control of Generation of Code ('Code Injection')",
        "Description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Refactor your program so that you do not have to dynamically generate code.",
                    "Description_Merged": "Refactor your program so that you do not have to dynamically generate code.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.",
                            "Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Description_Merged": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit()."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nTo reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Description_Merged": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Phase_Merged": "Testing"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "Operation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Description_Merged": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Description_Merged": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品在构建一个由上游组件的外部可影响输入执行的代码段的全部或部分时，未对可以修改意图的代码段的语法或行为的特殊元素进行中间处理或错误中间处理。",
        "Name_ZH": "代码生成的控制不正确（代码注入）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "重构您的程序，以便不必动态生成代码。",
                    "Description_Merged": "重构您的程序，以便不必动态生成代码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "在执行代码时，将其运行在“监狱”或类似的沙盒环境中，以强制执行进程和操作系统之间的严格边界。这可以有效限制您的产品可以执行哪些代码。",
                            "示例包括Unix chroot jail和AppArmor。一般来说，托管代码可能提供一些保护。",
                            "这可能不是一个可行的解决方案，它只限制了对操作系统的影响；您的应用程序的其他部分可能仍然容易受到攻击。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Description_Merged": "在执行代码时，将其运行在“监狱”或类似的沙盒环境中，以强制执行进程和操作系统之间的严格边界。这可以有效限制您的产品可以执行哪些代码。\n示例包括Unix chroot jail和AppArmor。一般来说，托管代码可能提供一些保护。\n这可能不是一个可行的解决方案，它只限制了对操作系统的影响；您的应用程序的其他部分可能仍然容易受到攻击。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "为减少代码注入的可能性，使用严格的允许列表来限制允许使用的结构。如果您正在动态构建调用函数的代码，则仅验证输入是否为字母数字可能是不够的。攻击者仍然可能能够引用您并未打算允许的危险函数，例如system()、exec()或exit()。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n为减少代码注入的可能性，使用严格的允许列表来限制允许使用的结构。如果您正在动态构建调用函数的代码，则仅验证输入是否为字母数字可能是不够的。攻击者仍然可能能够引用您并未打算允许的危险函数，例如system()、exec()或exit()。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Description_Merged": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Phase_Merged": "测试"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "操作",
                    "Strategy": "编译或构建加固",
                    "Description": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Description_Merged": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-32",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Description_Merged": "在一个执行自动污点传播并防止使用被污染变量执行命令的环境中运行代码，比如Perl的“-T”开关。这将强制程序执行去除污点的验证步骤，但你必须小心正确验证输入，以免意外将危险输入标记为未污染（参见CWE-183和CWE-184）。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "95",
        "Name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "If possible, refactor your code so that it does not need to use eval() at all.",
                    "Description_Merged": "If possible, refactor your code so that it does not need to use eval() at all.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.",
                            "Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."
                        ]
                    },
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将输入用于动态评估调用（如“eval”）之前，未对代码语法进行中和或错误中和。",
        "Name_ZH": "不适当中和动态评估代码中的指令（'Eval注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "如果可能，重构您的代码，使其完全不需要使用eval()。",
                    "Description_Merged": "如果可能，重构您的代码，使其完全不需要使用eval()。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。",
                            "考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。"
                        ]
                    },
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序当前的内部表示形式 (CWE-180, CWE-181)。确保应用程序不会无意中对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。使用OWASP ESAPI规范化控制等库来进行处理。\n考虑在输入不再发生变化之前进行重复的规范化。这样可以避免双重解码和类似的情况，但可能会无意中修改允许包含正确编码的危险内容的输入。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "96",
        "Name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files.",
                    "Description_Merged": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将输入插入可执行资源（如库、配置文件或模板）之前，未对代码语法进行中和或错误中和。",
        "Name_ZH": "不适当中和静态保存代码中的指令（'静态代码注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "执行适当的输出验证和转义，以消除写入代码文件的数据中的所有代码语法。",
                    "Description_Merged": "执行适当的输出验证和转义，以消除写入代码文件的数据中的所有代码语法。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                }
            ]
        }
    },
    {
        "ID": "97",
        "Name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
        "Description": "The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品生成一个网页，但未对用户可控输入进行中和或错误中和，该输入可能被解释为服务器端包含（SSI）指令。",
        "Name_ZH": "Web页面中的服务器端包含（SSI）不适当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "98",
        "Name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
        "Description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": {
                        "p": [
                            "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                            "For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability."
                        ]
                    },
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.",
                            "This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."
                        ]
                    },
                    "Description_Merged": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                            "Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."
                        ]
                    },
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                },
                {
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.",
                    "Description_Merged": "Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                            "Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009."
                        ]
                    },
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\nOften, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": "Set allow_url_fopen to false, which limits the ability to include files from remote locations.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion.",
                    "Description_Merged": "Set allow_url_fopen to false, which limits the ability to include files from remote locations.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该PHP应用程序从上游组件接收输入，但在使用“require”、“include”或类似函数之前，未限制或错误限制输入。",
        "Name_ZH": "PHP程序中的包含/要求语句的文件名控制不当（'PHP远程文件包含'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": {
                        "p": [
                            "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                            "例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap [REF-185]等功能提供了这种能力。"
                        ]
                    },
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。\n例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。ESAPI AccessReferenceMap [REF-185]等功能提供了这种能力。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的列表来限制所使用的字符集。如果可行，仅允许文件名中有一个“.”字符，以避免出现CWE-23等漏洞，并排除目录分隔符（如“/”）以避免CWE-36。使用一个允许的文件扩展名列表，这将有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的列表来限制所使用的字符集。如果可行，仅允许文件名中有一个“.”字符，以避免出现CWE-23等漏洞，并排除目录分隔符（如“/”）以避免CWE-36。使用一个允许的文件扩展名列表，这将有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。",
                            "这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。"
                        ]
                    },
                    "Description_Merged": "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。\n这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                            "许多文件包含问题是因为程序员假设某些输入不能被修改，特别是对于cookie和URL组件。"
                        ]
                    },
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。\n许多文件包含问题是因为程序员假设某些输入不能被修改，特别是对于cookie和URL组件。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                },
                {
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在最新版本的PHP中开发和运行您的代码，最好是PHP 6或更高版本。较早版本的PHP解释器中的许多高风险功能已被删除、限制或默认禁用。",
                    "Description_Merged": "在最新版本的PHP中开发和运行您的代码，最好是PHP 6或更高版本。较早版本的PHP解释器中的许多高风险功能已被删除、限制或默认禁用。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                            "通常，程序员不会保护仅用于核心程序包含的文件的直接访问。这些包含文件可能假设关键变量已由调用程序初始化。因此，使用register_globals与直接访问包含文件的能力相结合，可能允许攻击者进行文件包含攻击。截至2009年，这仍然是一种非常常见的模式。"
                        ]
                    },
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。\n通常，程序员不会保护仅用于核心程序包含的文件的直接访问。这些包含文件可能假设关键变量已由调用程序初始化。因此，使用register_globals与直接访问包含文件的能力相结合，可能允许攻击者进行文件包含攻击。截至2009年，这仍然是一种非常常见的模式。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": "将allow_url_fopen设置为false，以限制从远程位置包含文件的能力。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion.",
                    "Description_Merged": "将allow_url_fopen设置为false，以限制从远程位置包含文件的能力。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "99",
        "Name": "Improper Control of Resource Identifiers ('Resource Injection')",
        "Description": "The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将输入用作可能超出预期控制范围的资源的标识符之前，未限制或错误限制输入。",
        "Name_ZH": "资源标识符的控制不当（'资源注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于检查恶意或格式错误的输入。这很可能会错过至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这可以给攻击者足够的空间绕过预期的验证。然而，对于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被彻底拒绝的情况，这可能是有用的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于检查恶意或格式错误的输入。这很可能会错过至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这可以给攻击者足够的空间绕过预期的验证。然而，对于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被彻底拒绝的情况，这可能是有用的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "102",
        "Name": "Struts: Duplicate Validation Forms",
        "Description": "The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.",
                    "Description_Merged": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用具有相同名称的多个验证表单，这可能导致Struts验证器验证程序员不希望验证的表单。",
        "Name_ZH": "Struts：重复的验证表单",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "DTD或模式验证无法捕获相同表单名称的重复出现。可以通过对xml配置文件进行手动检查或自动静态分析来找到实现中的问题。",
                    "Description_Merged": "DTD或模式验证无法捕获相同表单名称的重复出现。可以通过对xml配置文件进行手动检查或自动静态分析来找到实现中的问题。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "103",
        "Name": "Struts: Incomplete validate() Method Definition",
        "Description": "The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Implement the validate() method and call super.validate() within that method.",
                    "Description_Merged": "Implement the validate() method and call super.validate() within that method.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品具有一个验证器表单，要么未定义validate()方法，要么定义了validate()方法但未调用super.validate()。",
        "Name_ZH": "Struts：不完整的validate()方法定义",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "实现validate()方法并在该方法内调用super.validate()。",
                    "Description_Merged": "实现validate()方法并在该方法内调用super.validate()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "104",
        "Name": "Struts: Form Bean Does Not Extend Validation Class",
        "Description": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all forms extend one of the Validation Classes.",
                    "Description_Merged": "Ensure that all forms extend one of the Validation Classes.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "如果一个表单bean没有扩展Validator框架的ActionForm子类，它可能会使应用程序暴露于与不足的输入验证相关的其他弱点。",
        "Name_ZH": "Struts：表单Bean未扩展验证类",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保所有表单都扩展自其中一个验证类。",
                    "Description_Merged": "确保所有表单都扩展自其中一个验证类。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "105",
        "Name": "Struts: Form Field Without Validator",
        "Description": "The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.",
                    "Description_Merged": "Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品具有一个表单字段，该字段未由相应的验证表单进行验证，这可能会引入与不足的输入验证相关的其他弱点。",
        "Name_ZH": "Struts：缺少验证器的表单字段",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "验证所有表单字段。如果一个字段未使用，仍然重要的是对其进行约束，使其为空或未定义。",
                    "Description_Merged": "验证所有表单字段。如果一个字段未使用，仍然重要的是对其进行约束，使其为空或未定义。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "106",
        "Name": "Struts: Plug-in Framework not in Use",
        "Description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Use an input validation framework such as Struts.",
                    "Description_Merged": "Use an input validation framework such as Struts.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use an input validation framework such as Struts.",
                    "Description_Merged": "Use an input validation framework such as Struts.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:",
                        "ul": {
                            "li": [
                                "Phone number fields contain only valid characters in phone numbers",
                                "Boolean values are only \"T\" or \"F\"",
                                "Free-form strings are of a reasonable length and composition"
                            ]
                        }
                    },
                    "Description_Merged": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:\nPhone number fields contain only valid characters in phone numbers\nBoolean values are only \"T\" or \"F\"\nFree-form strings are of a reasonable length and composition",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:",
                        "ul": {
                            "li": [
                                "Phone number fields contain only valid characters in phone numbers",
                                "Boolean values are only \"T\" or \"F\"",
                                "Free-form strings are of a reasonable length and composition"
                            ]
                        }
                    },
                    "Description_Merged": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:\nPhone number fields contain only valid characters in phone numbers\nBoolean values are only \"T\" or \"F\"\nFree-form strings are of a reasonable length and composition",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "当应用程序不使用诸如Struts Validator之类的输入验证框架时，引入与不足的输入验证相关的弱点的风险更大。",
        "Name_ZH": "Struts：未使用插件框架",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "使用诸如Struts的输入验证框架。",
                    "Description_Merged": "使用诸如Struts的输入验证框架。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用诸如Struts的输入验证框架。",
                    "Description_Merged": "使用诸如Struts的输入验证框架。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": "在应用程序处理之前，使用Struts Validator验证所有程序输入。确保配置Struts Validator时没有漏洞。验证器的示例用法包括检查：",
                        "ul": {
                            "li": [
                                "电话号码字段中是否只包含电话号码中的有效字符。",
                                "布尔值只能是\"T\"或\"F\"。",
                                "自由格式的字符串应该具有合理的长度和组成。"
                            ]
                        }
                    },
                    "Description_Merged": "在应用程序处理之前，使用Struts Validator验证所有程序输入。确保配置Struts Validator时没有漏洞。验证器的示例用法包括检查：\n电话号码字段中是否只包含电话号码中的有效字符。\n布尔值只能是\"T\"或\"F\"。\n自由格式的字符串应该具有合理的长度和组成。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": "在应用程序处理之前，使用Struts Validator验证所有程序输入。确保配置Struts Validator时没有漏洞。验证器的示例用法包括检查：",
                        "ul": {
                            "li": [
                                "电话号码字段中是否只包含电话号码中的有效字符。",
                                "布尔值只能是\"T\"或\"F\"。",
                                "自由格式的字符串应该具有合理的长度和组成。"
                            ]
                        }
                    },
                    "Description_Merged": "在应用程序处理之前，使用Struts Validator验证所有程序输入。确保配置Struts Validator时没有漏洞。验证器的示例用法包括检查：\n电话号码字段中是否只包含电话号码中的有效字符。\n布尔值只能是\"T\"或\"F\"。\n自由格式的字符串应该具有合理的长度和组成。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "107",
        "Name": "Struts: Unused Validation Form",
        "Description": "An unused validation form indicates that validation logic is not up-to-date.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Remove the unused Validation Form from the validation.xml file.",
                    "Description_Merged": "Remove the unused Validation Form from the validation.xml file.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "未使用的验证表单表明验证逻辑不是最新的。",
        "Name_ZH": "Struts：未使用的验证表单",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "从validation.xml文件中删除未使用的验证表单。",
                    "Description_Merged": "从validation.xml文件中删除未使用的验证表单。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "108",
        "Name": "Struts: Unvalidated Action Form",
        "Description": "Every Action Form must have a corresponding validation form.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Map every Action Form to a corresponding validation form.",
                            "An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated."
                        ]
                    },
                    "Description_Merged": "Map every Action Form to a corresponding validation form.\nAn action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "每个动作表单必须有相应的验证表单。",
        "Name_ZH": "Struts：未经验证的操作表单",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "将每个操作表单映射到相应的验证表单。",
                            "一个操作或表单可以以其他方式执行验证，但是Struts验证器提供了一种优秀的方式来验证所有的输入至少接受基本级别的验证。如果没有这种方法，很难，甚至是不可能，以较高的信心确定所有的输入是否经过验证。"
                        ]
                    },
                    "Description_Merged": "将每个操作表单映射到相应的验证表单。\n一个操作或表单可以以其他方式执行验证，但是Struts验证器提供了一种优秀的方式来验证所有的输入至少接受基本级别的验证。如果没有这种方法，很难，甚至是不可能，以较高的信心确定所有的输入是否经过验证。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "109",
        "Name": "Struts: Validator Turned Off",
        "Description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that an action form mapping enables validation. Set the validate field to true.",
                    "Description_Merged": "Ensure that an action form mapping enables validation. Set the validate field to true.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "已关闭通过Struts bean进行的自动过滤，这会禁用Struts验证器和自定义验证逻辑。这会使应用程序暴露于与不充分的输入验证相关的其他弱点。",
        "Name_ZH": "Struts：验证器关闭",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保操作表单映射启用了验证。将validate字段设置为true。",
                    "Description_Merged": "确保操作表单映射启用了验证。将validate字段设置为true。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "110",
        "Name": "Struts: Validator Without Form Field",
        "Description": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "与其关联的验证字段未出现在其所属的表单中，表明验证逻辑已过时。",
        "Name_ZH": "Struts：没有表单字段的验证器",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "111",
        "Name": "Direct Use of Unsafe JNI",
        "Description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Implement error handling around the JNI call.",
                    "Description_Merged": "Implement error handling around the JNI call.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Refactoring",
                    "Description": "Do not use JNI calls if you don't trust the native library.",
                    "Description_Merged": "Do not use JNI calls if you don't trust the native library.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Refactoring"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Refactoring",
                    "Description": "Be reluctant to use JNI calls. A Java API equivalent may exist.",
                    "Description_Merged": "Be reluctant to use JNI calls. A Java API equivalent may exist.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "当Java应用程序使用Java本地接口（JNI）调用使用其他编程语言编写的代码时，即使这些弱点在Java中不会出现，也会使应用程序暴露于该代码的弱点。",
        "Name_ZH": "直接使用不安全的JNI",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在JNI调用周围实施错误处理。",
                    "Description_Merged": "在JNI调用周围实施错误处理。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Strategy": "重构",
                    "Description": "如果不信任本地库，请勿使用JNI调用。",
                    "Description_Merged": "如果不信任本地库，请勿使用JNI调用。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "重构"
                },
                {
                    "Phase": "实施",
                    "Strategy": "重构",
                    "Description": "在使用JNI调用时要谨慎。可能存在Java API等效。",
                    "Description_Merged": "在使用JNI调用时要谨慎。可能存在Java API等效。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "112",
        "Name": "Missing XML Validation",
        "Description": "The product accepts XML from an untrusted source but does not validate the XML against the proper schema.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Always validate XML input against a known XML Schema or DTD.",
                            "It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed."
                        ]
                    },
                    "Description_Merged": "Always validate XML input against a known XML Schema or DTD.\nIt is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接受来自不受信任的源的XML，但未对XML进行适当的模式验证。",
        "Name_ZH": "缺少XML验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "始终对XML输入进行验证，以确保符合已知的XML模式或DTD。",
                            "一个XML解析器无法验证文档内容的所有方面，因为解析器无法理解数据的完整语义。然而，解析器可以完整和彻底地检查文档的结构，从而向处理文档的代码保证内容是格式良好的。"
                        ]
                    },
                    "Description_Merged": "始终对XML输入进行验证，以确保符合已知的XML模式或DTD。\n一个XML解析器无法验证文档内容的所有方面，因为解析器无法理解数据的完整语义。然而，解析器可以完整和彻底地检查文档的结构，从而向处理文档的代码保证内容是格式良好的。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "113",
        "Name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
        "Description": "The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Construct HTTP headers very carefully, avoiding the use of non-validated input data.",
                    "Description_Merged": "Construct HTTP headers very carefully, avoiding the use of non-validated input data.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品从HTTP代理/组件（如Web服务器、代理、浏览器等）接收数据，但在将数据包含在传出的HTTP头部之前，没有中和或错误地中和CR和LF字符。",
        "Name_ZH": "HTTP头部中的CRLF序列不适当中和（'HTTP请求/响应拆分'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "请非常谨慎地构建HTTP头部，避免使用未经验证的输入数据。",
                    "Description_Merged": "请非常谨慎地构建HTTP头部，避免使用未经验证的输入数据。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假定所有输入都是恶意的。采用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。如果输入不严格符合规范，请拒绝或转换成符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假定所有输入都是恶意的。采用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。如果输入不严格符合规范，请拒绝或转换成符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "114",
        "Name": "Process Control",
        "Description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.",
                    "Description_Merged": "Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "在不受信任的源或不受信任的环境中执行命令或加载库可能导致应用程序代表攻击者执行恶意命令（和有效负载）。",
        "Name_ZH": "进程控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "加载的库应该被充分了解并来自可信的来源。应用程序可以执行包含对其他安全问题敏感的调用的本地库中的代码，例如缓冲区溢出或命令注入。应该验证所有本地库以确定应用程序是否需要使用该库。很难确定这些本地库实际上做什么，恶意代码的潜在风险很高。此外，这些本地库中的疏忽错误的潜在风险也很高，因为其中许多是用C或C++编写的，可能容易受到缓冲区溢出或竞争条件问题的影响。为了帮助防止缓冲区溢出攻击，请验证所有对本地调用的输入内容和长度。如果本地库不来自可信的来源，请检查其源代码。在使用之前，应该从经过审核的源代码构建该库。",
                    "Description_Merged": "加载的库应该被充分了解并来自可信的来源。应用程序可以执行包含对其他安全问题敏感的调用的本地库中的代码，例如缓冲区溢出或命令注入。应该验证所有本地库以确定应用程序是否需要使用该库。很难确定这些本地库实际上做什么，恶意代码的潜在风险很高。此外，这些本地库中的疏忽错误的潜在风险也很高，因为其中许多是用C或C++编写的，可能容易受到缓冲区溢出或竞争条件问题的影响。为了帮助防止缓冲区溢出攻击，请验证所有对本地调用的输入内容和长度。如果本地库不来自可信的来源，请检查其源代码。在使用之前，应该从经过审核的源代码构建该库。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "115",
        "Name": "Misinterpretation of Input",
        "Description": "The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品以安全相关的方式错误地解释输入，无论是来自攻击者还是其他产品。",
        "Name_ZH": "输入的错误解释",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "116",
        "Name": "Improper Encoding or Escaping of Output",
        "Description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.",
                            "Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\nAlternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "Architecture and Design",
                    "Strategy": "Parameterization",
                    "Description": {
                        "p": [
                            "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
                            "For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection."
                        ]
                    },
                    "Description_Merged": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nFor example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Parameterization"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "Description_Merged": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.",
                    "Description_Merged": "In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).",
                    "Description_Merged": "Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Requirements",
                    "Description": "Fully specify which encodings are required by components that will be communicating with each other.",
                    "Description_Merged": "Fully specify which encodings are required by components that will be communicating with each other.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Description_Merged": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品为与另一个组件进行通信而准备了一个结构化消息，但数据的编码或转义要么缺失，要么做得不正确。因此，消息的预期结构未得到保留。",
        "Name_ZH": "输出的编码或转义不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。",
                            "或者，使用内置函数，但考虑使用包装器以防这些函数被发现存在漏洞。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。\n或者，使用内置函数，但考虑使用包装器以防这些函数被发现存在漏洞。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-27",
                    "Phase": "架构与设计",
                    "Strategy": "参数化",
                    "Description": {
                        "p": [
                            "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。",
                            "例如，存储过程可以强制执行数据库查询结构并降低SQL注入的可能性。"
                        ]
                    },
                    "Description_Merged": "如果可用，使用自动强制执行数据和代码之间分离的结构化机制。这些机制可以自动提供相关的引用、编码和验证，而不是依赖开发人员在每个生成输出的点提供这种能力。\n例如，存储过程可以强制执行数据库查询结构并降低SQL注入的可能性。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "参数化"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "了解数据将被使用的上下文和预期的编码。这在在不同组件之间传输数据或生成可能同时包含多种编码的输出（如网页或多部分邮件消息）时尤为重要。研究所有预期的通信协议和数据表示以确定所需的编码策略。",
                    "Description_Merged": "了解数据将被使用的上下文和预期的编码。这在在不同组件之间传输数据或生成可能同时包含多种编码的输出（如网页或多部分邮件消息）时尤为重要。研究所有预期的通信协议和数据表示以确定所需的编码策略。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在某些情况下，当输出编码不是完整解决方案时，输入验证可能是一个重要的策略。例如，您可能会提供将由使用不同编码或表示的多个消费者处理的相同输出。在其他情况下，您可能需要允许用户提供的输入包含控制信息，例如支持维基或公告板中的格式化的有限HTML标签。当必须满足此类要求时，请使用非常严格的允许列表来限制可以使用的控制序列。验证所得到的语法结构是否符合预期。对于其余的输入，请使用正常的编码方法。",
                    "Description_Merged": "在某些情况下，当输出编码不是完整解决方案时，输入验证可能是一个重要的策略。例如，您可能会提供将由使用不同编码或表示的多个消费者处理的相同输出。在其他情况下，您可能需要允许用户提供的输入包含控制信息，例如支持维基或公告板中的格式化的有限HTML标签。当必须满足此类要求时，请使用非常严格的允许列表来限制可以使用的控制序列。验证所得到的语法结构是否符合预期。对于其余的输入，请使用正常的编码方法。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用输入验证作为深度防御措施，以降低输出编码错误的可能性（参见CWE-20）。",
                    "Description_Merged": "使用输入验证作为深度防御措施，以降低输出编码错误的可能性（参见CWE-20）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "需求",
                    "Description": "明确指定组件之间将进行通信所需的编码方式。",
                    "Description_Merged": "明确指定组件之间将进行通信所需的编码方式。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Description_Merged": "在组件之间交换数据时，请确保两个组件都使用相同的字符编码。确保在每个接口处应用正确的编码。每当协议允许时，明确设置所使用的编码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "117",
        "Name": "Improper Output Neutralization for Logs",
        "Description": "The product does not neutralize or incorrectly neutralizes output that is written to logs.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品未能对写入日志的输出进行中和或错误中和。",
        "Name_ZH": "日志的输出中和不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "118",
        "Name": "Incorrect Access of Indexable Resource ('Range Error')",
        "Description": "The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未能限制或错误限制使用索引或指针访问的资源（如内存或文件）内的操作。",
        "Name_ZH": "对可索引资源的错误访问（'范围错误'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "119",
        "Name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "Description": "The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.",
                            "Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions."
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "Implementation",
                    "Description": {
                        "p": "Consider adhering to the following rules when allocating and managing an application's memory:",
                        "ul": {
                            "li": [
                                "Double check that the buffer is as large as specified.",
                                "When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.",
                                "Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.",
                                "If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."
                            ]
                        }
                    },
                    "Description_Merged": "Consider adhering to the following rules when allocating and managing an application's memory:\nDouble check that the buffer is as large as specified.\nWhen using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\nCheck buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\nIf necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "Implementation",
                    "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在内存缓冲区上执行操作，但可能读取或写入超出缓冲区预期边界的内存位置。",
        "Name_ZH": "内存缓冲区边界内操作的限制不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。",
                            "需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。\n需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。"
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "实施",
                    "Description": {
                        "p": "在分配和管理应用程序内存时，请遵循以下规则：",
                        "ul": {
                            "li": [
                                "确保缓冲区的大小与指定的大小一致。",
                                "当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。",
                                "如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。",
                                "如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。"
                            ]
                        }
                    },
                    "Description_Merged": "在分配和管理应用程序内存时，请遵循以下规则：\n确保缓冲区的大小与指定的大小一致。\n当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。\n如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。\n如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "实施",
                    "Description": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "120",
        "Name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "Description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.",
                            "Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions."
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "Implementation",
                    "Description": {
                        "p": "Consider adhering to the following rules when allocating and managing an application's memory:",
                        "ul": {
                            "li": [
                                "Double check that your buffer is as large as you specify.",
                                "When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.",
                                "Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.",
                                "If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."
                            ]
                        }
                    },
                    "Description_Merged": "Consider adhering to the following rules when allocating and managing an application's memory:\nDouble check that your buffer is as large as you specify.\nWhen using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\nCheck buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\nIf necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": [
                        "Build and Compilation",
                        "Operation"
                    ],
                    "Description": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
                    "Description_Merged": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
                    "Phase_Merged": "Build and Compilation / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "Implementation",
                    "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "产品在未验证输入缓冲区的大小小于输出缓冲区大小的情况下，将输入缓冲区复制到输出缓冲区，导致缓冲区溢出。",
        "Name_ZH": "无需检查输入的缓冲区复制（'经典缓冲区溢出'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。",
                            "需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。\n需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。"
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "实施",
                    "Description": {
                        "p": "在分配和管理应用程序内存时，请遵循以下规则：",
                        "ul": {
                            "li": [
                                "仔细检查所指定的缓冲区是否足够大。",
                                "当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。",
                                "如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。",
                                "如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。"
                            ]
                        }
                    },
                    "Description_Merged": "在分配和管理应用程序内存时，请遵循以下规则：\n仔细检查所指定的缓冲区是否足够大。\n当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。\n如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。\n如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": [
                        "构建和编译",
                        "操作"
                    ],
                    "Description": "迄今为止，编译器或操作系统级别的大多数缓冲区溢出问题的缓解技术只解决了其中的一部分，甚至很少提供完全的保护。实施增加攻击者工作量的策略是一个好的做法，例如让攻击者猜测每次程序执行时都会变化的未知值。",
                    "Description_Merged": "迄今为止，编译器或操作系统级别的大多数缓冲区溢出问题的缓解技术只解决了其中的一部分，甚至很少提供完全的保护。实施增加攻击者工作量的策略是一个好的做法，例如让攻击者猜测每次程序执行时都会变化的未知值。",
                    "Phase_Merged": "构建和编译 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "实施",
                    "Description": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "121",
        "Name": "Stack-based Buffer Overflow",
        "Description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement and perform bounds checking on input.",
                    "Description_Merged": "Implement and perform bounds checking on input.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.",
                    "Description_Merged": "Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "基于堆栈的缓冲区溢出条件指的是被覆盖的缓冲区分配在堆栈上（即局部变量或者很少情况下是函数参数）的情况。",
        "Name_ZH": "基于堆栈的缓冲区溢出",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Description_Merged": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对输入进行边界检查的实现和执行。",
                    "Description_Merged": "对输入进行边界检查的实现和执行。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "不要使用危险函数（如gets）。使用更安全的、检查边界错误的等效函数。",
                    "Description_Merged": "不要使用危险函数（如gets）。使用更安全的、检查边界错误的等效函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "122",
        "Name": "Heap-based Buffer Overflow",
        "Description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Pre-design: Use a language or compiler that performs automatic bounds checking.",
                    "Description_Merged": "Pre-design: Use a language or compiler that performs automatic bounds checking."
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement and perform bounds checking on input.",
                    "Description_Merged": "Implement and perform bounds checking on input.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.",
                    "Description_Merged": "Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Operation",
                    "Description": "Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.",
                    "Description_Merged": "Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "堆溢出条件是指发生缓冲区溢出的情况，其中可以被覆盖的缓冲区在内存的堆部分分配，通常意味着使用malloc()等例程分配了缓冲区。",
        "Name_ZH": "基于堆的缓冲区溢出",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "预先设计：使用一种能够执行自动边界检查的语言或编译器。",
                    "Description_Merged": "预先设计：使用一种能够执行自动边界检查的语言或编译器。"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Description_Merged": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "实施",
                    "Description": "对输入进行边界检查的实现和执行。",
                    "Description_Merged": "对输入进行边界检查的实现和执行。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": "不要使用危险函数（如gets）。寻找它们的安全等效函数，这些函数会检查边界。",
                    "Description_Merged": "不要使用危险函数（如gets）。寻找它们的安全等效函数，这些函数会检查边界。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "操作",
                    "Description": "使用操作系统级别的预防功能。这并不是一个完整的解决方案，但提供了一定的深度防御。",
                    "Description_Merged": "使用操作系统级别的预防功能。这并不是一个完整的解决方案，但提供了一定的深度防御。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "123",
        "Name": "Write-what-where Condition",
        "Description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Language Selection",
                    "Description": "Use a language that provides appropriate memory abstractions.",
                    "Description_Merged": "Use a language that provides appropriate memory abstractions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Operation",
                    "Description": "Use OS-level preventative functionality integrated after the fact. Not a complete solution.",
                    "Description_Merged": "Use OS-level preventative functionality integrated after the fact. Not a complete solution.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "攻击者能够将任意值写入任意位置的任何情况，通常是缓冲区溢出的结果。",
        "Name_ZH": "写-在哪里-什么条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "语言选择",
                    "Description": "使用提供适当内存抽象的语言。",
                    "Description_Merged": "使用提供适当内存抽象的语言。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "操作",
                    "Description": "事后集成操作系统级别的预防功能。这并不是一个完整的解决方案。",
                    "Description_Merged": "事后集成操作系统级别的预防功能。这并不是一个完整的解决方案。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "124",
        "Name": "Buffer Underwrite ('Buffer Underflow')",
        "Description": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Choose a language that is not susceptible to these issues.",
                    "Description_Merged": "Choose a language that is not susceptible to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.",
                    "Description_Merged": "All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品使用索引或指针引用缓冲区开始之前的内存位置来写入缓冲区。",
        "Name_ZH": "缓冲区下写（'缓冲区下溢'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "选择一种不容易受到这些问题影响的语言。",
                    "Description_Merged": "选择一种不容易受到这些问题影响的语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "所有用作索引或指针算术的计算值都应进行验证，以确保它们在预期范围内。",
                    "Description_Merged": "所有用作索引或指针算术的计算值都应进行验证，以确保它们在预期范围内。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "125",
        "Name": "Out-of-bounds Read",
        "Description": "The product reads data past the end, or before the beginning, of the intended buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nTo reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Language Selection",
                    "Description": "Use a language that provides appropriate memory abstractions.",
                    "Description_Merged": "Use a language that provides appropriate memory abstractions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Language Selection"
                }
            ]
        },
        "Description_ZH": "产品读取超出预期缓冲区结束或开始位置的数据。",
        "Name_ZH": "越界读取",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "为了减少引入越界读取的可能性，请确保验证和确保任何长度参数、缓冲区大小计算或偏移量的正确计算。特别要注意不要依赖不可信输入中的哨兵（例如特殊字符如NUL）。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n为了减少引入越界读取的可能性，请确保验证和确保任何长度参数、缓冲区大小计算或偏移量的正确计算。特别要注意不要依赖不可信输入中的哨兵（例如特殊字符如NUL）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "语言选择",
                    "Description": "使用提供适当内存抽象的语言。",
                    "Description_Merged": "使用提供适当内存抽象的语言。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "语言选择"
                }
            ]
        }
    },
    {
        "ID": "126",
        "Name": "Buffer Over-read",
        "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用索引或指针等缓冲区访问机制来读取缓冲区后面的内存位置。",
        "Name_ZH": "缓冲区过读取",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "127",
        "Name": "Buffer Under-read",
        "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用缓冲区访问机制（如索引或指针）从缓冲区中读取，但这些索引或指针引用的是目标缓冲区之前的内存位置。",
        "Name_ZH": "缓冲区下读取",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "128",
        "Name": "Wrap-around Error",
        "Description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Requirements specification: The choice could be made to use a language that is not susceptible to these issues.",
                    "Description_Merged": "Requirements specification: The choice could be made to use a language that is not susceptible to these issues."
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Provide clear upper and lower bounds on the scale of any protocols designed.",
                    "Description_Merged": "Provide clear upper and lower bounds on the scale of any protocols designed.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Perform validation on all incremented variables to ensure that they remain within reasonable bounds.",
                    "Description_Merged": "Perform validation on all incremented variables to ensure that they remain within reasonable bounds.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "环绕错误发生在一个值递增到其类型的最大值并且\"环绕\"回到一个非常小、负数或未定义值时。",
        "Name_ZH": "环绕错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "需求规范：可以选择使用不容易受到这些问题影响的编程语言。",
                    "Description_Merged": "需求规范：可以选择使用不容易受到这些问题影响的编程语言。"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "明确规定任何设计的协议的上限和下限。",
                    "Description_Merged": "明确规定任何设计的协议的上限和下限。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对所有递增的变量进行验证，以确保它们保持在合理范围内。",
                    "Description_Merged": "对所有递增的变量进行验证，以确保它们保持在合理范围内。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "129",
        "Name": "Improper Validation of Array Index",
        "Description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-7",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).",
                    "Description_Merged": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                            "Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."
                        ]
                    },
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-35",
                    "Phase": "Implementation",
                    "Description": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
                    "Description_Merged": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "该产品在计算或使用数组索引时使用了不可信的输入，但产品没有验证或错误地验证索引，以确保索引引用了数组内的有效位置。",
        "Name_ZH": "数组索引验证不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-7",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "使用输入验证框架，如Struts或OWASP ESAPI Validation API。注意，使用框架并不能自动解决所有输入验证问题；要谨慎使用框架本身可能出现的弱点（CWE-1173）。",
                    "Description_Merged": "使用输入验证框架，如Struts或OWASP ESAPI Validation API。注意，使用框架并不能自动解决所有输入验证问题；要谨慎使用框架本身可能出现的弱点（CWE-1173）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                            "即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。"
                        ]
                    },
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。\n即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，Ada允许程序员约束变量的值，而Java和Ruby等语言则允许程序员在访问越界索引时处理异常。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，Ada允许程序员约束变量的值，而Java和Ruby等语言则允许程序员在访问越界索引时处理异常。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在访问用户可控的数组索引时，请使用严格的值范围，这些值在目标数组内。确保不允许使用负值。也就是说，验证可接受值范围的最小值和最大值。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在访问用户可控的数组索引时，请使用严格的值范围，这些值在目标数组内。确保不允许使用负值。也就是说，验证可接受值范围的最小值和最大值。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-35",
                    "Phase": "实施",
                    "Description": "在调用跨语言边界的代码（例如从解释性语言到本机代码）时，特别小心验证所有输入。这可能会在语言边界之间创建意外的交互。确保您不违反与您进行接口的语言的任何预期。例如，尽管Java可能不容易受到缓冲区溢出的攻击，但在调用本机代码时提供一个大的参数可能会触发溢出。",
                    "Description_Merged": "在调用跨语言边界的代码（例如从解释性语言到本机代码）时，特别小心验证所有输入。这可能会在语言边界之间创建意外的交互。确保您不违反与您进行接口的语言的任何预期。例如，尽管Java可能不容易受到缓冲区溢出的攻击，但在调用本机代码时提供一个大的参数可能会触发溢出。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "130",
        "Name": "Improper Handling of Length Parameter Inconsistency",
        "Description": "The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
                    "Description_Merged": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not let the user control the size of the buffer.",
                    "Description_Merged": "Do not let the user control the size of the buffer.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Validate that the length of the user-supplied data is consistent with the buffer size.",
                    "Description_Merged": "Validate that the length of the user-supplied data is consistent with the buffer size.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品解析了一个格式化的消息或结构，但没有处理或错误地处理了与实际数据长度不一致的长度字段。",
        "Name_ZH": "长度参数不一致的处理不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在处理包含大小字段和原始数据的结构化输入数据时，请确保识别和解决大小字段与实际数据大小之间的任何不一致。",
                    "Description_Merged": "在处理包含大小字段和原始数据的结构化输入数据时，请确保识别和解决大小字段与实际数据大小之间的任何不一致。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "不要让用户控制缓冲区的大小。",
                    "Description_Merged": "不要让用户控制缓冲区的大小。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "验证用户提供的数据长度与缓冲区大小一致。",
                    "Description_Merged": "验证用户提供的数据长度与缓冲区大小一致。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "131",
        "Name": "Incorrect Calculation of Buffer Size",
        "Description": "The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts \"&amp;\" characters to \"&amp;amp;\" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.",
                    "Description_Merged": "When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts \"&amp;\" characters to \"&amp;amp;\" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-36",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]",
                            "Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation."
                        ]
                    },
                    "Description_Merged": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]\nAlso be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
                    "Description_Merged": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).",
                    "Description_Merged": "When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.",
                    "Description_Merged": "When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "Implementation",
                    "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.",
                    "Description_Merged": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use sizeof() on the appropriate data type to avoid CWE-467.",
                    "Description_Merged": "Use sizeof() on the appropriate data type to avoid CWE-467.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.",
                    "Description_Merged": "Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.",
                            "Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]"
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nUse libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "Implementation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Description_Merged": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "该产品在分配缓冲区时没有正确计算要使用的大小，这可能导致缓冲区溢出。",
        "Name_ZH": "缓冲区大小计算不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在为转换、转码或编码输入分配缓冲区时，请分配足够的内存来处理最大可能的编码。例如，在将\"&amp;\"字符转换为用于HTML实体编码的\"&amp;amp;\"的例程中，输出缓冲区的大小至少应是输入缓冲区的5倍。",
                    "Description_Merged": "在为转换、转码或编码输入分配缓冲区时，请分配足够的内存来处理最大可能的编码。例如，在将\"&amp;\"字符转换为用于HTML实体编码的\"&amp;amp;\"的例程中，输出缓冲区的大小至少应是输入缓冲区的5倍。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-36",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "了解编程语言的底层表示以及它如何与数字计算交互（CWE-681）。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和强制转换、\"非数字\"计算以及语言如何处理对于其底层表示来说太大或太小的数字。[REF-7]",
                            "还要注意考虑可能影响数字表示的32位、64位和其他差异。"
                        ]
                    },
                    "Description_Merged": "了解编程语言的底层表示以及它如何与数字计算交互（CWE-681）。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和强制转换、\"非数字\"计算以及语言如何处理对于其底层表示来说太大或太小的数字。[REF-7]\n还要注意考虑可能影响数字表示的32位、64位和其他差异。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。",
                    "Description_Merged": "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在处理包含大小字段后接原始数据的结构化输入数据时，识别并解决大小字段与实际数据大小之间的任何不一致（CWE-130）。",
                    "Description_Merged": "在处理包含大小字段后接原始数据的结构化输入数据时，识别并解决大小字段与实际数据大小之间的任何不一致（CWE-130）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在分配使用哨兵来标记数据结构末尾的内存时（例如字符串中的NUL字节），请确保在计算必须分配的总内存量时也包括哨兵。",
                    "Description_Merged": "在分配使用哨兵来标记数据结构末尾的内存时（例如字符串中的NUL字节），请确保在计算必须分配的总内存量时也包括哨兵。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "实施",
                    "Description": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.",
                    "Description_Merged": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用适当数据类型的sizeof()来避免CWE-467。",
                    "Description_Merged": "使用适当数据类型的sizeof()来避免CWE-467。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于所需的操作，请使用适当的类型。例如，在C/C++中，只对永远不可能为负的值使用无符号类型，比如高度、宽度或与数量相关的其他数字。这将简化验证并减少与意外强制转换相关的问题。",
                    "Description_Merged": "对于所需的操作，请使用适当的类型。例如，在C/C++中，只对永远不可能为负的值使用无符号类型，比如高度、宽度或与数量相关的其他数字。这将简化验证并减少与意外强制转换相关的问题。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "使用可以更容易处理数字而不出现意外后果的库或框架，或者使用可以自动跟踪缓冲区大小的缓冲区分配例程。",
                            "例如，安全整数处理包（如SafeInt（C ++）或IntegerLib（C或C ++））是其中之一。[REF-106]"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n使用可以更容易处理数字而不出现意外后果的库或框架，或者使用可以自动跟踪缓冲区大小的缓冲区分配例程。\n例如，安全整数处理包（如SafeInt（C ++）或IntegerLib（C或C ++））是其中之一。[REF-106]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "实施",
                    "Strategy": "编译或构建加固",
                    "Description": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Description_Merged": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "132",
        "Name": "DEPRECATED: Miscalculated Null Termination",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它是CWE-170的重复项。所有内容已转移到CWE-170。",
        "Name_ZH": "弃用：计算的空终止不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "134",
        "Name": "Use of Externally-Controlled Format String",
        "Description": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Choose a language that is not subject to this flaw.",
                    "Description_Merged": "Choose a language that is not subject to this flaw.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]",
                    "Description_Merged": "Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "Run compilers and linkers with high warning levels, since they may detect incorrect usage.",
                    "Description_Merged": "Run compilers and linkers with high warning levels, since they may detect incorrect usage.",
                    "Phase_Merged": "Build and Compilation"
                }
            ]
        },
        "Description_ZH": "该产品使用一个接受格式字符串作为参数的函数，但格式字符串来自外部来源。",
        "Name_ZH": "使用外部控制的格式字符串",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "选择一种不受此缺陷影响的语言。",
                    "Description_Merged": "选择一种不受此缺陷影响的语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "确保所有格式字符串函数都传递了一个不能被用户控制的静态字符串，并且始终向该函数发送正确数量的参数。如果可能的话，请使用不支持格式字符串中的%n运算符的函数。[REF-116] [REF-117]",
                    "Description_Merged": "确保所有格式字符串函数都传递了一个不能被用户控制的静态字符串，并且始终向该函数发送正确数量的参数。如果可能的话，请使用不支持格式字符串中的%n运算符的函数。[REF-116] [REF-117]",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "以较高的警告级别运行编译器和链接器，因为它们可能会检测到不正确的使用。",
                    "Description_Merged": "以较高的警告级别运行编译器和链接器，因为它们可能会检测到不正确的使用。",
                    "Phase_Merged": "构建和编译"
                }
            ]
        }
    },
    {
        "ID": "135",
        "Name": "Incorrect Calculation of Multi-Byte String Length",
        "Description": "The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Always verify the length of the string unit character.",
                    "Description_Merged": "Always verify the length of the string unit character.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)",
                    "Description_Merged": "Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "该产品没有正确计算可能包含宽字符或多字节字符的字符串的长度。",
        "Name_ZH": "多字节字符串长度计算不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "始终验证字符串单元字符的长度。",
                    "Description_Merged": "始终验证字符串单元字符的长度。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": "适当地使用长度计算函数（例如strlen，wcslen等）与其等效类型（例如：byte，wchar_t等）。",
                    "Description_Merged": "适当地使用长度计算函数（例如strlen，wcslen等）与其等效类型（例如：byte，wchar_t等）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "138",
        "Name": "Improper Neutralization of Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.",
                    "Description_Merged": "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.",
                    "Description_Merged": "Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但没有中和或错误地中和了可能被解释为控制元素或语法标记的特殊元素，当它们被发送到下游组件时。",
        "Name_ZH": "特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "开发人员应预见到特殊元素（例如分隔符，符号）将被注入到其产品的输入向量中。一种防御方法是创建一个允许列表（例如正则表达式），根据需求规范定义有效的输入。严格过滤与允许列表不匹配的任何输入。正确编码您的输出，并引用任何对您正在通信的组件具有特殊含义的元素。",
                    "Description_Merged": "开发人员应预见到特殊元素（例如分隔符，符号）将被注入到其产品的输入向量中。一种防御方法是创建一个允许列表（例如正则表达式），根据需求规范定义有效的输入。严格过滤与允许列表不匹配的任何输入。正确编码您的输出，并引用任何对您正在通信的组件具有特殊含义的元素。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "使用和指定适当的输出编码，以确保特殊元素被明确定义。一个编码中的普通字节序列可能是另一个编码中的特殊元素。",
                    "Description_Merged": "使用和指定适当的输出编码，以确保特殊元素被明确定义。一个编码中的普通字节序列可能是另一个编码中的特殊元素。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                }
            ]
        }
    },
    {
        "ID": "140",
        "Name": "Improper Neutralization of Delimiters",
        "Description": "The product does not neutralize or incorrectly neutralizes delimiters.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品没有中和或错误地中和了分隔符。",
        "Name_ZH": "定界符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "开发人员应预见到分隔符将被注入/删除/操纵其产品的输入向量中。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效的、预期的和适当的输入。",
                    "Description_Merged": "开发人员应预见到分隔符将被注入/删除/操纵其产品的输入向量中。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效的、预期的和适当的输入。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "141",
        "Name": "Improper Neutralization of Parameter/Argument Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为参数或参数分隔符。",
        "Name_ZH": "参数/参数分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到参数/参数分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到参数/参数分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "142",
        "Name": "Improper Neutralization of Value Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为值分隔符。",
        "Name_ZH": "值分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到值分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到值分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "143",
        "Name": "Improper Neutralization of Record Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为记录分隔符。",
        "Name_ZH": "记录分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到记录分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到记录分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "144",
        "Name": "Improper Neutralization of Line Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为行分隔符。",
        "Name_ZH": "行分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到行分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到行分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "145",
        "Name": "Improper Neutralization of Section Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为节分隔符。",
        "Name_ZH": "部分分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到段落分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到段落分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "146",
        "Name": "Improper Neutralization of Expression/Command Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为表达式或命令分隔符。",
        "Name_ZH": "表达式/命令分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到表达式间和命令间分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到表达式间和命令间分隔符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "147",
        "Name": "Improper Neutralization of Input Terminators",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为输入终止符。",
        "Name_ZH": "输入终止符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到终止符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到终止符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "148",
        "Name": "Improper Neutralization of Input Leaders",
        "Description": "The product does not properly handle when a leading character or sequence (\"leader\") is missing or malformed, or if multiple leaders are used when only one should be allowed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "当缺少或格式错误的前导字符或序列（“leader”），或者当只允许使用一个时使用多个前导字符时，该产品无法正确处理。",
        "Name_ZH": "输入前导符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到前导字符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到前导字符将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "149",
        "Name": "Improper Neutralization of Quoting Syntax",
        "Description": "Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "注入到产品中的引号可以用来破坏系统。在解析数据时，引号的注入/缺失/重复/格式错误可能会导致进程采取意外的操作。",
        "Name_ZH": "引号语法的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到引号将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到引号将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "150",
        "Name": "Improper Neutralization of Escape, Meta, or Control Sequences",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但它没有中和或错误地中和特殊元素，当它们被发送到下游组件时，这些特殊元素可能被解释为转义、元数据或控制字符序列。",
        "Name_ZH": "转义、元字符或控制序列的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应预料到转义字符、元字符和控制字符/序列将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应预料到转义字符、元字符和控制字符/序列将会在其产品的输入向量中被注入/删除/篡改。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "151",
        "Name": "Improper Neutralization of Comment Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为注释分隔符的特殊元素进行中和或错误中和。",
        "Name_ZH": "注释分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改注释。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改注释。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "152",
        "Name": "Improper Neutralization of Macro Symbols",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为宏符号的特殊元素进行中和或错误中和。",
        "Name_ZH": "宏符号的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改宏符号。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改宏符号。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "153",
        "Name": "Improper Neutralization of Substitution Characters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为替代字符的特殊元素进行中和或错误中和。",
        "Name_ZH": "替换字符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改替代字符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改替代字符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "154",
        "Name": "Improper Neutralization of Variable Name Delimiters",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为变量名分隔符的特殊元素进行中和或错误中和。",
        "Name_ZH": "变量名分隔符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改变量名分隔符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改变量名分隔符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "155",
        "Name": "Improper Neutralization of Wildcards or Matching Symbols",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为通配符或匹配符号的特殊元素进行中和或错误中和。",
        "Name_ZH": "通配符或匹配符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改通配符或匹配元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改通配符或匹配元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "156",
        "Name": "Improper Neutralization of Whitespace",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为空格的特殊元素进行中和或错误中和。",
        "Name_ZH": "空白字符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改空白字符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改空白字符。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "157",
        "Name": "Failure to Sanitize Paired Delimiters",
        "Description": "The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理用于标记实体组的字符，例如括号、方括号和花括号。",
        "Name_ZH": "未对成对分隔符进行清理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改分组元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改分组元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "158",
        "Name": "Improper Neutralization of Null Byte or NUL Character",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为NUL字符或空字节的特殊元素进行中和或错误中和。",
        "Name_ZH": "空字节或NUL字符的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改空字符或空字节。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改空字符或空字节。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "159",
        "Name": "Improper Handling of Invalid Use of Special Elements",
        "Description": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确过滤、移除、引用或以其他方式管理用户控制的输入中的无效特殊元素，可能对其行为和完整性产生不利影响。",
        "Name_ZH": "无效使用特殊元素的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其软件系统的输入向量中可能会注入/移除/篡改特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其软件系统的输入向量中可能会注入/移除/篡改特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "160",
        "Name": "Improper Neutralization of Leading Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，但在将其发送给下游组件时，没有对可能被解释为意想不到的方式的前导特殊元素进行中和或错误中和。",
        "Name_ZH": "前导特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改前导特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中可能会注入/移除/篡改前导特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统只处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "161",
        "Name": "Improper Neutralization of Multiple Leading Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但未对可能以意想不到的方式解释的多个前置特殊元素进行中和或错误中和。",
        "Name_ZH": "多个前导特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个主要特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个主要特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "162",
        "Name": "Improper Neutralization of Trailing Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但未对可能以意想不到的方式解释的尾随特殊元素进行中和或错误中和。",
        "Name_ZH": "尾随特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵尾部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵尾部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "163",
        "Name": "Improper Neutralization of Multiple Trailing Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但未对可能以意想不到的方式解释的多个尾随特殊元素进行中和或错误中和。",
        "Name_ZH": "多个尾随特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个尾部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个尾部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "164",
        "Name": "Improper Neutralization of Internal Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但未对可能以意想不到的方式解释的内部特殊元素进行中和或错误中和。",
        "Name_ZH": "内部特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵内部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵内部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "165",
        "Name": "Improper Neutralization of Multiple Internal Special Elements",
        "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，但未对可能以意想不到的方式解释的多个内部特殊元素进行中和或错误中和。",
        "Name_ZH": "多个内部特殊元素的不当中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个内部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/删除/操纵多个内部特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "166",
        "Name": "Improper Handling of Missing Special Element",
        "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在预期的特殊元素缺失时未处理或处理不正确。",
        "Name_ZH": "缺失特殊元素的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会删除特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会删除特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "167",
        "Name": "Improper Handling of Additional Special Element",
        "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在提供额外意外的特殊元素时未处理或处理不正确。",
        "Name_ZH": "额外特殊元素的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入额外的特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入额外的特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "168",
        "Name": "Improper Handling of Inconsistent Special Elements",
        "Description": "The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
                    "Description_Merged": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理两个或多个特殊字符或保留字之间存在的不一致的输入。",
        "Name_ZH": "不一致特殊元素的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "开发人员应该预料到在其产品的输入向量中会注入/操纵不一致的特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。",
                    "Description_Merged": "开发人员应该预料到在其产品的输入向量中会注入/操纵不一致的特殊元素。使用适当的拒绝列表和允许列表的组合，确保系统仅处理有效、预期和适当的输入。"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "170",
        "Name": "Improper Null Termination",
        "Description": "The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.",
                    "Description_Merged": "Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.",
                    "Description_Merged": "Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.",
                    "Description_Merged": "If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.",
                    "Description_Merged": "Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
                    "Description_Merged": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未正确终止或终止带有空字符或等效终止符的字符串或数组。",
        "Name_ZH": "空终止的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "使用一种不容易受到这些问题影响的编程语言。然而，要小心与可能使用容易受到影响的编程语言编写的低级构造的空字节交互错误（CWE-626）。",
                    "Description_Merged": "使用一种不容易受到这些问题影响的编程语言。然而，要小心与可能使用容易受到影响的编程语言编写的低级构造的空字节交互错误（CWE-626）。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "确保完全理解所使用的所有字符串函数如何追加空字符。此外，在将空字符追加到字符串末尾时要注意误差为一的错误。",
                    "Description_Merged": "确保完全理解所使用的所有字符串函数如何追加空字符。此外，在将空字符追加到字符串末尾时要注意误差为一的错误。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果性能限制允许，可以添加特殊代码来验证字符串缓冲区的空终止，这是一个相当朴素和容易出错的解决方案。",
                    "Description_Merged": "如果性能限制允许，可以添加特殊代码来验证字符串缓冲区的空终止，这是一个相当朴素和容易出错的解决方案。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "切换到有界字符串操作函数。检查与缺陷报告的缓冲区溢出跟踪中涉及的缓冲区长度。",
                    "Description_Merged": "切换到有界字符串操作函数。检查与缺陷报告的缓冲区溢出跟踪中涉及的缓冲区长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "添加填充缓冲区的代码以填充null值（然而，仍然需要检查缓冲区的长度，以确保非空终止的字符串不会写入缓冲区的物理末尾）。",
                    "Description_Merged": "添加填充缓冲区的代码以填充null值（然而，仍然需要检查缓冲区的长度，以确保非空终止的字符串不会写入缓冲区的物理末尾）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "172",
        "Name": "Encoding Error",
        "Description": "The product does not properly encode or decode the data, resulting in unexpected values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Description_Merged": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确编码或解码数据，导致出现意外的值。",
        "Name_ZH": "编码错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-28",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Description_Merged": "尽管使用动态生成的查询字符串、代码或混合控制和数据的命令存在风险，但有时可能无法避免。正确引用参数并转义参数中的任何特殊字符。最保守的方法是转义或过滤所有不符合非常严格允许列表的字符（例如除了字母数字和空格之外的所有字符）。如果仍然需要某些特殊字符，例如空格，请在转义/过滤步骤后将每个参数用引号括起来。注意参数注入（CWE-88）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "173",
        "Name": "Improper Handling of Alternate Encoding",
        "Description": "The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理使用替代编码的输入，该编码对输入被发送到的控制领域是有效的。",
        "Name_ZH": "交替编码的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "174",
        "Name": "Double Decoding of the Same Data",
        "Description": "The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品对相同的输入进行了两次解码，这可能会限制在解码操作之间发生的任何保护机制的有效性。",
        "Name_ZH": "对相同数据进行双重解码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "175",
        "Name": "Improper Handling of Mixed Encoding",
        "Description": "The product does not properly handle when the same input uses several different (mixed) encodings.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Description_Merged": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理相同输入使用多个不同（混合）编码的情况。",
        "Name_ZH": "混合编码的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-30",
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Description_Merged": "使用并指定一个下游组件能够处理的输出编码。常见的编码包括ISO-8859-1、UTF-7和UTF-8。当未指定编码时，下游组件可能会选择不同的编码，可能通过假设默认编码或自动推断正在使用的编码来选择，这可能是错误的。当编码不一致时，下游组件可能会将某些字符或字节序列视为特殊字符，即使在原始编码中它们并不是特殊的。攻击者可能利用这种差异进行注入攻击，甚至可能绕过假设下游组件也使用原始编码的保护机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "176",
        "Name": "Improper Handling of Unicode Encoding",
        "Description": "The product does not properly handle when an input contains Unicode encoding.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理包含Unicode编码的输入。",
        "Name_ZH": "Unicode编码的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "177",
        "Name": "Improper Handling of URL Encoding (Hex Encoding)",
        "Description": "The product does not properly handle when all or part of an input has been URL encoded.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理全部或部分输入已进行URL编码的情况。",
        "Name_ZH": "URL编码（十六进制编码）的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "178",
        "Name": "Improper Handling of Case Sensitivity",
        "Description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在访问或确定资源的属性时未正确考虑大小写敏感性，导致结果不一致。",
        "Name_ZH": "大小写敏感性的不当处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "179",
        "Name": "Incorrect Behavior Order: Early Validation",
        "Description": "The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在应用修改输入的保护机制之前验证输入，这可能允许攻击者通过仅在修改后才出现的危险输入绕过验证。",
        "Name_ZH": "不正确的行为顺序：早期验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "180",
        "Name": "Incorrect Behavior Order: Validate Before Canonicalize",
        "Description": "The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品在进行规范化之前验证输入，这会阻止产品检测到在规范化步骤后变为无效的数据。",
        "Name_ZH": "不正确的行为顺序：规范化前验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "181",
        "Name": "Incorrect Behavior Order: Validate Before Filter",
        "Description": "The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在过滤数据之前验证数据，这会阻止产品检测到在过滤步骤后变为无效的数据。",
        "Name_ZH": "不正确的行为顺序：过滤前验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "输入应在被过滤之前进行解码和规范化，以与应用程序当前的内部表示匹配。",
                    "Description_Merged": "输入应在被过滤之前进行解码和规范化，以与应用程序当前的内部表示匹配。",
                    "Phase_Merged": "实施 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "182",
        "Name": "Collapse of Data into Unsafe Value",
        "Description": "The product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Description": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).",
                    "Description_Merged": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function)."
                }
            ]
        },
        "Description_ZH": "该产品以一种导致数据被减少或“折叠”为不安全值的方式进行数据过滤，从而违反了预期的安全属性。",
        "Name_ZH": "数据崩溃为不安全值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Description": "规范化名称以与文件系统对名称的表示匹配。可以使用一些可用的API来实现这一点（例如，在Win32中使用GetFullPathName函数）。",
                    "Description_Merged": "规范化名称以与文件系统对名称的表示匹配。可以使用一些可用的API来实现这一点（例如，在Win32中使用GetFullPathName函数）。"
                }
            ]
        }
    },
    {
        "ID": "183",
        "Name": "Permissive List of Allowed Inputs",
        "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品实施了一种依赖于允许的输入列表（或输入的属性），因为假设这些输入是安全的，但是该列表过于宽松 - 也就是说，它允许了一种不安全的输入，导致了相关的弱点。",
        "Name_ZH": "允许输入的允许性列表",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "184",
        "Name": "Incomplete List of Disallowed Inputs",
        "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
                    "Description_Merged": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品实施了一种依赖于未被允许的输入列表（或输入的属性），或者需要在进行额外处理之前采取其他措施进行中和的保护机制，但是该列表不完整，导致了相关的弱点。",
        "Name_ZH": "不完整的禁止输入列表",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "不要仅仅依赖于检测不允许的输入。由于字符编码的变体太多，特别是在使用不同的环境时，可能会错过一些变体。只将检测不允许的输入作为检测可疑活动的机制。确保您使用了其他只识别“好”的输入的保护机制，例如允许输入列表，并确保正确编码输出。",
                    "Description_Merged": "不要仅仅依赖于检测不允许的输入。由于字符编码的变体太多，特别是在使用不同的环境时，可能会错过一些变体。只将检测不允许的输入作为检测可疑活动的机制。确保您使用了其他只识别“好”的输入的保护机制，例如允许输入列表，并确保正确编码输出。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "185",
        "Name": "Incorrect Regular Expression",
        "Description": "The product specifies a regular expression in a way that causes data to be improperly matched or compared.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-45",
                    "Phase": "Architecture and Design",
                    "Strategy": "Refactoring",
                    "Description": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.",
                    "Description_Merged": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "产品以一种导致数据被错误匹配或比较的方式指定了一个正则表达式。",
        "Name_ZH": "错误的正则表达式",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-45",
                    "Phase": "架构与设计",
                    "Strategy": "重构",
                    "Description": "即使对于那些熟练编写语法的人来说，正则表达式在定义复杂语言时也可能出错。确定是否几个较小的正则表达式可以简化一个较大的正则表达式。此外，对正则表达式进行全面的测试技术，如等价划分、边界值分析和鲁棒性。经过测试并达到合理的信心水平后，正则表达式可能仍然不是绝对可靠的。如果允许出现漏洞，那么记录该漏洞并重新设计正则表达式。",
                    "Description_Merged": "即使对于那些熟练编写语法的人来说，正则表达式在定义复杂语言时也可能出错。确定是否几个较小的正则表达式可以简化一个较大的正则表达式。此外，对正则表达式进行全面的测试技术，如等价划分、边界值分析和鲁棒性。经过测试并达到合理的信心水平后，正则表达式可能仍然不是绝对可靠的。如果允许出现漏洞，那么记录该漏洞并重新设计正则表达式。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "186",
        "Name": "Overly Restrictive Regular Expression",
        "Description": "A regular expression is overly restrictive, which prevents dangerous values from being detected.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.",
                    "Description_Merged": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "正则表达式过于严格，导致危险值无法被检测到。",
        "Name_ZH": "过于严格的正则表达式",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "对于那些擅长编写语法的人来说，即使是定义复杂语言时，正则表达式也可能容易出错。确定是否使用几个较小的正则表达式来简化一个大的正则表达式。此外，要对正则表达式进行全面的测试技术，如等价类划分、边界值分析和健壮性测试。经过测试并获得合理的信心水平后，正则表达式可能仍然不是绝对可靠的。如果允许漏洞通过，请记录漏洞并重新设计正则表达式。",
                    "Description_Merged": "对于那些擅长编写语法的人来说，即使是定义复杂语言时，正则表达式也可能容易出错。确定是否使用几个较小的正则表达式来简化一个大的正则表达式。此外，要对正则表达式进行全面的测试技术，如等价类划分、边界值分析和健壮性测试。经过测试并获得合理的信心水平后，正则表达式可能仍然不是绝对可靠的。如果允许漏洞通过，请记录漏洞并重新设计正则表达式。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "187",
        "Name": "Partial String Comparison",
        "Description": "The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Description_Merged": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品进行了一种仅在确定是否匹配之前仅检查因素的一部分（例如子字符串）的比较，导致了相关的弱点。",
        "Name_ZH": "部分字符串比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Description_Merged": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "188",
        "Name": "Reliance on Data/Memory Layout",
        "Description": "The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
                    "Description_Merged": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).",
                    "Description_Merged": "Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Testing: Test that the implementation properly handles each case in the protocol grammar.",
                    "Description_Merged": "Testing: Test that the implementation properly handles each case in the protocol grammar.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品对底层协议数据或内存的组织方式做出了无效的假设，导致了意外的程序行为。",
        "Name_ZH": "对数据/内存布局的依赖性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "在平坦的地址空间情况下，不要允许将内存地址计算为另一个内存地址的偏移量。",
                    "Description_Merged": "在平坦的地址空间情况下，不要允许将内存地址计算为另一个内存地址的偏移量。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "明确完整地指定协议布局，提供结构化的语法（例如，可编译的yacc语法）。",
                    "Description_Merged": "明确完整地指定协议布局，提供结构化的语法（例如，可编译的yacc语法）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "测试：测试实现是否正确处理协议语法中的每个情况。",
                    "Description_Merged": "测试：测试实现是否正确处理协议语法中的每个情况。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "190",
        "Name": "Integer Overflow or Wraparound",
        "Description": "The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
                    "Description_Merged": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "If possible, choose a language or compiler that performs automatic bounds checking."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nIf possible, choose a language or compiler that performs automatic bounds checking.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.",
                            "Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]"
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nUse libraries or frameworks that make it easier to handle numbers without unexpected consequences.\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
                            "Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values."
                        ]
                    },
                    "Description_Merged": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nUse unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-36",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]",
                            "Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation."
                        ]
                    },
                    "Description_Merged": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]\nAlso be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "Implementation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Description_Merged": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                }
            ]
        },
        "Description_ZH": "产品进行了一种计算，可能产生整数溢出或循环回绕，而逻辑则假设结果值总是大于原始值。当该计算用于资源管理或执行控制时，可能引入其他弱点。",
        "Name_ZH": "整数溢出或环绕",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "确保所有协议严格定义，以便可以简单地识别所有越界行为，并要求严格遵守协议。",
                    "Description_Merged": "确保所有协议严格定义，以便可以简单地识别所有越界行为，并要求严格遵守协议。",
                    "Phase_Merged": "需求"
                },
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "如果可能，选择一种能够自动进行边界检查的语言或编译器。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n如果可能，选择一种能够自动进行边界检查的语言或编译器。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "使用能够更轻松处理数字而不会产生意外后果的库或框架。",
                            "例如，安全整数处理包（如SafeInt（C ++）或IntegerLib（C或C ++））是其中之一。[REF-106]"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n使用能够更轻松处理数字而不会产生意外后果的库或框架。\n例如，安全整数处理包（如SafeInt（C ++）或IntegerLib（C或C ++））是其中之一。[REF-106]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。",
                            "尽可能使用无符号整数。这样可以更容易地对整数溢出进行验证。当需要有符号整数时，确保范围检查包括最小值和最大值。"
                        ]
                    },
                    "Description_Merged": "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。\n尽可能使用无符号整数。这样可以更容易地对整数溢出进行验证。当需要有符号整数时，确保范围检查包括最小值和最大值。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-36",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "了解编程语言的底层表示以及它如何与数字计算交互（CWE-681）。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和强制转换、\"非数字\"计算以及语言如何处理对于其底层表示来说太大或太小的数字。[REF-7]",
                            "还要注意考虑可能影响数字表示的32位、64位和其他差异。"
                        ]
                    },
                    "Description_Merged": "了解编程语言的底层表示以及它如何与数字计算交互（CWE-681）。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和强制转换、\"非数字\"计算以及语言如何处理对于其底层表示来说太大或太小的数字。[REF-7]\n还要注意考虑可能影响数字表示的32位、64位和其他差异。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "实施",
                    "Strategy": "编译或构建加固",
                    "Description": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Description_Merged": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "编译或构建加固"
                }
            ]
        }
    },
    {
        "ID": "191",
        "Name": "Integer Underflow (Wrap or Wraparound)",
        "Description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从另一个值中减去一个值，使得结果小于最小允许的整数值，从而产生与正确结果不相等的值。",
        "Name_ZH": "整数下溢（环绕或环绕）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "192",
        "Name": "Integer Coercion Error",
        "Description": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "A language which throws exceptions on ambiguous data casts might be chosen.",
                    "Description_Merged": "A language which throws exceptions on ambiguous data casts might be chosen.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design objects and program flow such that multiple or complex casts are unnecessary",
                    "Description_Merged": "Design objects and program flow such that multiple or complex casts are unnecessary",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.",
                    "Description_Merged": "Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "整数强制转换是一组与原始数据类型的类型转换、扩展或截断有关的缺陷。",
        "Name_ZH": "整数强制转换错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择一种在数据转换出现模棱两可时抛出异常的语言。",
                    "Description_Merged": "可以选择一种在数据转换出现模棱两可时抛出异常的语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计对象和程序流程，使多个或复杂的类型转换不必要。",
                    "Description_Merged": "设计对象和程序流程，使多个或复杂的类型转换不必要。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保您必须使用的任何数据类型转换完全理解，以减少使用中的错误可能性。",
                    "Description_Merged": "确保您必须使用的任何数据类型转换完全理解，以减少使用中的错误可能性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "193",
        "Name": "Off-by-one Error",
        "Description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().",
                    "Description_Merged": "When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品计算或使用了一个不正确的最大或最小值，其值比正确值多 1 或少 1。",
        "Name_ZH": "偏移一个错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在复制字符数组或使用字符操作方法时，必须使用正确的大小参数来考虑需要在数组末尾添加的空终止符。在C语言中，一些容易受到此漏洞影响的函数包括strcpy()、strncpy()、strcat()、strncat()、printf()、sprintf()、scanf()和sscanf()。",
                    "Description_Merged": "在复制字符数组或使用字符操作方法时，必须使用正确的大小参数来考虑需要在数组末尾添加的空终止符。在C语言中，一些容易受到此漏洞影响的函数包括strcpy()、strncpy()、strcat()、strncat()、printf()、sprintf()、scanf()和sscanf()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "194",
        "Name": "Unexpected Sign Extension",
        "Description": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
                    "Description_Merged": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品对一个数字进行操作，使其在转换为更大的数据类型时进行符号扩展。当原始数字为负数时，可能会产生意外值，从而导致相关弱点。",
        "Name_ZH": "意外的符号扩展",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果不需要表示负值，请避免使用有符号变量。当需要负值时，请在将这些值保存到较大的数据类型之后进行验证，或在将它们传递给期望无符号值的函数之前进行验证。",
                    "Description_Merged": "如果不需要表示负值，请避免使用有符号变量。当需要负值时，请在将这些值保存到较大的数据类型之后进行验证，或在将它们传递给期望无符号值的函数之前进行验证。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "195",
        "Name": "Signed to Unsigned Conversion Error",
        "Description": "The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了有符号基元并将其转换为无符号基元，如果有符号基元的值无法用无符号基元表示，可能会产生意外值。",
        "Name_ZH": "有符号到无符号转换错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "196",
        "Name": "Unsigned to Signed Conversion Error",
        "Description": "The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Choose a language which is not subject to these casting flaws.",
                    "Description_Merged": "Choose a language which is not subject to these casting flaws.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.",
                    "Description_Merged": "Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.",
                    "Description_Merged": "Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了无符号基元并将其转换为有符号基元，如果无符号基元的值无法用有符号基元表示，可能会产生意外值。",
        "Name_ZH": "无符号到有符号转换错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "选择一种不受这些转换缺陷影响的语言。",
                    "Description_Merged": "选择一种不受这些转换缺陷影响的语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计对象访问函数，隐式检查值的有效大小。确保在使用之前检查将用作大小的所有函数。如果语言允许，应该抛出异常而不是使用内部错误。",
                    "Description_Merged": "设计对象访问函数，隐式检查值的有效大小。确保在使用之前检查将用作大小的所有函数。如果语言允许，应该抛出异常而不是使用内部错误。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对所有函数的返回值进行错误检查。注意隐式转换，并在可能的情况下使用无符号变量来表示大小。",
                    "Description_Merged": "对所有函数的返回值进行错误检查。注意隐式转换，并在可能的情况下使用无符号变量来表示大小。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "197",
        "Name": "Numeric Truncation Error",
        "Description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
                    "Description_Merged": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "当将基元转换为较小大小的基元时，会发生截断错误，导致数据在转换过程中丢失。",
        "Name_ZH": "数字截断错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保不发生从较大的大小原始类型或较小的大小原始类型的任何显式或隐式转换。",
                    "Description_Merged": "确保不发生从较大的大小原始类型或较小的大小原始类型的任何显式或隐式转换。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "198",
        "Name": "Use of Incorrect Byte Ordering",
        "Description": "The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品从上游组件接收输入，但在处理输入时未考虑字节顺序（如大端和小端），导致使用了不正确的数字或值。",
        "Name_ZH": "使用错误的字节顺序",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "200",
        "Name": "Exposure of Sensitive Information to an Unauthorized Actor",
        "Description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品向未显式授权访问该信息的实体暴露了敏感信息。",
        "Name_ZH": "敏感信息暴露给未经授权的参与者",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "201",
        "Name": "Insertion of Sensitive Information Into Sent Data",
        "Description": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.",
                    "Description_Merged": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
                    "Description_Merged": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Setup default error messages so that unexpected errors do not disclose sensitive information.",
                    "Description_Merged": "Setup default error messages so that unexpected errors do not disclose sensitive information.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该代码向另一个实体传输数据，但部分数据包含不应该对该实体可访问的敏感信息。",
        "Name_ZH": "敏感信息插入到发送数据中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "指定软件中应被视为敏感的数据。考虑哪些类型的用户应该访问哪些类型的数据。",
                    "Description_Merged": "指定软件中应被视为敏感的数据。考虑哪些类型的用户应该访问哪些类型的数据。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "确保与设计人员验证需求中可能的敏感数据，以确保它是计算出的风险或在其他地方得到了缓解。应删除所有对功能性不必要的信息，以降低开销和安全敏感数据被发送的可能性。",
                    "Description_Merged": "确保与设计人员验证需求中可能的敏感数据，以确保它是计算出的风险或在其他地方得到了缓解。应删除所有对功能性不必要的信息，以降低开销和安全敏感数据被发送的可能性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "系统配置",
                    "Description": "设置默认错误消息，以防止意外错误泄露敏感信息。",
                    "Description_Merged": "设置默认错误消息，以防止意外错误泄露敏感信息。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "202",
        "Name": "Exposure of Sensitive Information Through Data Queries",
        "Description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
                    "Description_Merged": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在尝试保持信息机密性时，攻击者通常可以通过使用统计信息推断出一部分信息。",
        "Name_ZH": "通过数据查询暴露敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "这是一个复杂的话题。请参考《透明数据库》一书，了解最佳实践的讨论。",
                    "Description_Merged": "这是一个复杂的话题。请参考《透明数据库》一书，了解最佳实践的讨论。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "203",
        "Name": "Observable Discrepancy",
        "Description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在不同情况下表现不同或发送不同的响应，这种差异对于未经授权的实体是可观察的，从而暴露了有关产品状态的安全相关信息，例如特定操作是否成功等。",
        "Name_ZH": "可观察到的差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "204",
        "Name": "Observable Response Discrepancy",
        "Description": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品对传入请求提供不同的响应，从而向未经授权的实体揭示了内部状态信息，超出了预期的控制范围。",
        "Name_ZH": "可观察到的响应差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "205",
        "Name": "Observable Behavioral Discrepancy",
        "Description": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的行为显示出重要的差异，未经授权的参与者可以观察到这些差异，从而揭示出以下内容：（1）内部状态或决策过程，或者（2）与具有相同功能的其他产品的差异。",
        "Name_ZH": "可观察到的行为差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "206",
        "Name": "Observable Internal Behavioral Discrepancy",
        "Description": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.",
                    "Description_Merged": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack."
                }
            ]
        },
        "Description_ZH": "产品执行多个行为，这些行为组合在一起产生一个结果，但是这些个别行为可以被单独观察，使攻击者能够揭示出内部状态或内部决策点。",
        "Name_ZH": "可观察到的内部行为差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "为错误条件设置通用的响应页面。错误页面不应该透露关于敏感操作成功或失败的信息。例如，登录页面不应该确认登录名正确而密码错误。试图使用随机账户名的攻击者可能会猜测其中一些账户名。确认账户是否存在会使登录页面更容易受到暴力破解攻击。",
                    "Description_Merged": "为错误条件设置通用的响应页面。错误页面不应该透露关于敏感操作成功或失败的信息。例如，登录页面不应该确认登录名正确而密码错误。试图使用随机账户名的攻击者可能会猜测其中一些账户名。确认账户是否存在会使登录页面更容易受到暴力破解攻击。"
                }
            ]
        }
    },
    {
        "ID": "207",
        "Name": "Observable Behavioral Discrepancy With Equivalent Products",
        "Description": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品在一个环境中运行，其存在或具体身份不应该被知晓，但是它的行为与具有相同功能的其他产品不同，这种差异对攻击者是可观察的。",
        "Name_ZH": "可观察到的具有等效产品的行为差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "208",
        "Name": "Observable Timing Discrepancy",
        "Description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品中的两个单独操作需要不同的完成时间，这种差异对参与者是可观察的，并揭示了与产品状态相关的安全信息，例如特定操作是否成功。",
        "Name_ZH": "可观察到的时间差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "209",
        "Name": "Generation of Error Message Containing Sensitive Information",
        "Description": "The product generates an error message that includes sensitive information about its environment, users, or associated data.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user.",
                    "Description_Merged": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
                    "Description_Merged": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Create default error pages or messages that do not leak any information.",
                    "Description_Merged": "Create default error pages or messages that do not leak any information.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "产品生成了包含其环境、用户或相关数据敏感信息的错误消息。",
        "Name_ZH": "生成包含敏感信息的错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "内部处理异常，并不向用户显示包含可能敏感信息的错误。",
                    "Description_Merged": "内部处理异常，并不向用户显示包含可能敏感信息的错误。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "编译或构建加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "系统配置",
                    "Description": "在可用的情况下，配置环境以使用较少冗长的错误消息。例如，在PHP中，在配置期间禁用display_errors设置，或在运行时使用error_reporting()函数。",
                    "Description_Merged": "在可用的情况下，配置环境以使用较少冗长的错误消息。例如，在PHP中，在配置期间禁用display_errors设置，或在运行时使用error_reporting()函数。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "Phase": "系统配置",
                    "Description": "创建不泄露任何信息的默认错误页面或消息。",
                    "Description_Merged": "创建不泄露任何信息的默认错误页面或消息。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "210",
        "Name": "Self-generated Error Message Containing Sensitive Information",
        "Description": "The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "产品识别出错误条件，并创建包含敏感信息的诊断或错误消息。",
        "Name_ZH": "自动生成包含敏感信息的错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "编译或构建加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "211",
        "Name": "Externally-Generated Error Message Containing Sensitive Information",
        "Description": "The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.",
                    "Description_Merged": "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "Implementation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Debugging information should not make its way into a production release.",
                    "Description_Merged": "Debugging information should not make its way into a production release.",
                    "Phase_Merged": "Implementation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.",
                    "Description_Merged": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.",
                    "Description_Merged": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品执行一个操作，触发一个不是由产品直接生成或控制的外部诊断或错误消息，例如软件应用程序使用的编程语言解释器生成的错误。该错误可以包含敏感系统信息。",
        "Name_ZH": "外部生成包含敏感信息的错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "配置应用程序的环境以防止生成错误。例如，在PHP中，禁用display_errors。",
                    "Description_Merged": "配置应用程序的环境以防止生成错误。例如，在PHP中，禁用display_errors。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "编译或构建加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "@_Mitigation_ID": "MIT-40",
                    "Phase": [
                        "实施",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": "调试信息不应该出现在生产版本中。",
                    "Description_Merged": "调试信息不应该出现在生产版本中。",
                    "Phase_Merged": "实施 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "实施",
                    "Description": "内部处理异常，并不向用户显示包含可能敏感信息的错误。如有必要，创建默认错误页面。",
                    "Description_Merged": "内部处理异常，并不向用户显示包含可能敏感信息的错误。如有必要，创建默认错误页面。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在实施过程中，避免触发外部错误消息的最佳方法是避免任何可能引发此类错误的错误。这通常发生在程序遇到严重错误时，例如除零错误。您并不总是能够控制错误页面的使用，并且可能不使用处理异常的语言。",
                    "Description_Merged": "在实施过程中，避免触发外部错误消息的最佳方法是避免任何可能引发此类错误的错误。这通常发生在程序遇到严重错误时，例如除零错误。您并不总是能够控制错误页面的使用，并且可能不使用处理异常的语言。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "212",
        "Name": "Improper Removal of Sensitive Information Before Storage or Transfer",
        "Description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.",
                    "Description_Merged": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.",
                    "Description_Merged": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品存储、传输或共享一个包含敏感信息的资源，但在产品向未经授权的参与者提供该资源之前，没有正确地删除该信息。",
        "Name_ZH": "在存储或传输之前不正确地删除敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "明确指定应视为私有或敏感的信息，并要求产品提供功能，使用户能够在发布或导出给其他方之前清除资源中的敏感信息。",
                    "Description_Merged": "明确指定应视为私有或敏感的信息，并要求产品提供功能，使用户能够在发布或导出给其他方之前清除资源中的敏感信息。",
                    "Phase_Merged": "需求"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Description": "避免与不正确的资源关闭或释放相关的错误（CWE-404），因为这可能会在资源处于不完整状态时将敏感数据留在资源中。",
                    "Description_Merged": "避免与不正确的资源关闭或释放相关的错误（CWE-404），因为这可能会在资源处于不完整状态时将敏感数据留在资源中。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "213",
        "Name": "Exposure of Sensitive Information Due to Incompatible Policies",
        "Description": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的预期功能根据开发者的安全策略向某些参与者公开信息，但是根据其他利益相关者（如产品管理员、用户或正在处理其信息的其他人）的预期安全策略，这些信息被视为敏感信息。",
        "Name_ZH": "由于不兼容的策略导致敏感信息暴露",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "214",
        "Name": "Invocation of Process Using Visible Sensitive Information",
        "Description": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个进程被调用时带有敏感的命令行参数、环境变量或其他可以被操作系统上的其他进程看到的元素。",
        "Name_ZH": "使用可见敏感信息调用进程",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "215",
        "Name": "Insertion of Sensitive Information Into Debugging Code",
        "Description": "The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
                    "Description_Merged": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品将敏感信息插入调试代码中，如果在生产环境中未禁用调试代码，可能会暴露这些信息。",
        "Name_ZH": "将敏感信息插入调试代码中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不要在源代码中留下可以执行的调试语句。确保在发布软件之前清除所有调试信息。",
                    "Description_Merged": "不要在源代码中留下可以执行的调试语句。确保在发布软件之前清除所有调试信息。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "216",
        "Name": "DEPRECATED: Containment Errors (Container Errors)",
        "Description": "This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the \"container\" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为它不是一个有效的弱点，而且结构更像是一个类别。此外，该名称不恰当，因为“容器”这个术语被开发人员理解的方式与PLOVER最初的意图不同。",
        "Name_ZH": "已弃用：包含错误（容器错误）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "217",
        "Name": "DEPRECATED: Failure to Protect Stored Data from Modification",
        "Description": "This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为它涵盖并混淆了多个弱点。以前在此条目中涵盖的问题可以在CWE-766和CWE-767中找到。",
        "Name_ZH": "已弃用：未保护存储数据免受修改",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "218",
        "Name": "DEPRECATED: Failure to provide confidentiality for stored data",
        "Description": "This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此弱点已被弃用，因为它是CWE-493的重复。所有内容已转移到CWE-493。",
        "Name_ZH": "已弃用：未为存储数据提供机密性",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "219",
        "Name": "Storage of File with Sensitive Data Under Web Root",
        "Description": "The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration"
                    ],
                    "Description": "Avoid storing information under the web root directory.",
                    "Description_Merged": "Avoid storing information under the web root directory.",
                    "Phase_Merged": "Implementation / System Configuration"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.",
                    "Description_Merged": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品在Web文档根目录下存储敏感数据，访问控制不足，可能使其对不受信任的方可访问。",
        "Name_ZH": "在Web根目录下存储带有敏感数据的文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "系统配置"
                    ],
                    "Description": "避免将信息存储在Web根目录下。",
                    "Description_Merged": "避免将信息存储在Web根目录下。",
                    "Phase_Merged": "实施 / 系统配置"
                },
                {
                    "Phase": "系统配置",
                    "Description": "应设置访问控制权限，以防止在Web目录内/外读取/写入敏感文件。",
                    "Description_Merged": "应设置访问控制权限，以防止在Web目录内/外读取/写入敏感文件。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "220",
        "Name": "Storage of File With Sensitive Data Under FTP Root",
        "Description": "The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration"
                    ],
                    "Description": "Avoid storing information under the FTP root directory.",
                    "Description_Merged": "Avoid storing information under the FTP root directory.",
                    "Phase_Merged": "Implementation / System Configuration"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.",
                    "Description_Merged": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品在FTP服务器根目录下存储敏感数据，访问控制不足，可能使其对不受信任的方可访问。",
        "Name_ZH": "在FTP根目录下存储带有敏感数据的文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "系统配置"
                    ],
                    "Description": "避免将信息存储在FTP根目录下。",
                    "Description_Merged": "避免将信息存储在FTP根目录下。",
                    "Phase_Merged": "实施 / 系统配置"
                },
                {
                    "Phase": "系统配置",
                    "Description": "应设置访问控制权限，以防止在FTP目录内/外读取/写入敏感文件。",
                    "Description_Merged": "应设置访问控制权限，以防止在FTP目录内/外读取/写入敏感文件。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "221",
        "Name": "Information Loss or Omission",
        "Description": "The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未记录或不正确记录安全相关信息，导致错误决策或妨碍后续分析。",
        "Name_ZH": "信息丢失或遗漏",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "222",
        "Name": "Truncation of Security-relevant Information",
        "Description": "The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品截断了安全相关信息的显示、记录或处理方式，可能会隐藏攻击的来源或性质。",
        "Name_ZH": "安全相关信息的截断",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "223",
        "Name": "Omission of Security-relevant Information",
        "Description": "The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未记录或显示识别攻击来源或性质以及确定操作是否安全所必需的信息。",
        "Name_ZH": "安全相关信息的遗漏",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "224",
        "Name": "Obscured Security-relevant Information by Alternate Name",
        "Description": "The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品根据受影响实体的替代名称记录安全相关信息，而不是规范名称。",
        "Name_ZH": "通过替代名称隐藏安全相关信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "225",
        "Name": "DEPRECATED: General Information Management Problems",
        "Description": "This weakness can be found at CWE-199.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该漏洞可以在CWE-199中找到。",
        "Name_ZH": "不再推荐使用：通用信息管理问题",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "226",
        "Name": "Sensitive Information in Resource Not Removed Before Reuse",
        "Description": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.",
                    "Effectiveness": "High",
                    "Description_Merged": "During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.",
                    "Effectiveness": "High",
                    "Description_Merged": "When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "产品释放了资源，例如内存或文件，以便可以重新使用，但在产品执行关键状态转换或将资源提供给其他实体之前，它未清除或“清零”资源中包含的信息。",
        "Name_ZH": "在重新使用资源之前未删除敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在关键状态转换期间，在进入下一个状态之前，应删除或覆盖不需要的信息，并使用固定模式（如全0）或随机数据进行覆盖。",
                    "Effectiveness": "High",
                    "Description_Merged": "在关键状态转换期间，在进入下一个状态之前，应删除或覆盖不需要的信息，并使用固定模式（如全0）或随机数据进行覆盖。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在释放、取消分配或删除资源时，使用固定模式或随机数据覆盖其数据和相关元数据。对于底层表示可能是非连续的或在低层次上发生变化的复杂资源类型（例如文件在文件系统上可能被拆分为不同的块，尽管在应用程序层面上“逻辑”文件位置是连续的），可能需要调用特殊模式或API来告诉底层操作系统执行必要的清除操作，例如Windows上的SDelete（安全删除），尽管在应用程序层面上可能无法提供适当的功能。",
                    "Effectiveness": "High",
                    "Description_Merged": "在释放、取消分配或删除资源时，使用固定模式或随机数据覆盖其数据和相关元数据。对于底层表示可能是非连续的或在低层次上发生变化的复杂资源类型（例如文件在文件系统上可能被拆分为不同的块，尽管在应用程序层面上“逻辑”文件位置是连续的），可能需要调用特殊模式或API来告诉底层操作系统执行必要的清除操作，例如Windows上的SDelete（安全删除），尽管在应用程序层面上可能无法提供适当的功能。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "228",
        "Name": "Improper Handling of Syntactically Invalid Structure",
        "Description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品无法处理或错误处理与相关规范不符合语法结构的输入。",
        "Name_ZH": "不正确处理语法无效的结构",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "229",
        "Name": "Improper Handling of Values",
        "Description": "The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未正确处理输入中未提供预期数量的参数、字段或参数值，或者如果这些值未定义。",
        "Name_ZH": "不正确处理值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "230",
        "Name": "Improper Handling of Missing Values",
        "Description": "The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未处理或错误处理指定了参数、字段或参数名，但相关值缺失，即为空、空白或null。",
        "Name_ZH": "不正确处理缺失值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "231",
        "Name": "Improper Handling of Extra Values",
        "Description": "The product does not handle or incorrectly handles when more values are provided than expected.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未处理或错误处理提供的值超出预期的数量。",
        "Name_ZH": "不正确处理额外值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "232",
        "Name": "Improper Handling of Undefined Values",
        "Description": "The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未处理或错误处理与相关参数、字段或参数名不匹配的值。",
        "Name_ZH": "不正确处理未定义值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "233",
        "Name": "Improper Handling of Parameters",
        "Description": "The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未正确处理输入中未提供预期数量的参数、字段或参数，或者如果这些参数未定义。",
        "Name_ZH": "不正确处理参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "234",
        "Name": "Failure to Handle Missing Parameter",
        "Description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Build and Compilation",
                    "Description": "This issue can be simply combated with the use of proper build process.",
                    "Description_Merged": "This issue can be simply combated with the use of proper build process.",
                    "Phase_Merged": "Build and Compilation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.",
                    "Description_Merged": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "如果向函数发送的参数过少，函数仍将从堆栈中弹出预期数量的参数。潜在地，函数中的可变数量参数也可能被耗尽。",
        "Name_ZH": "未处理缺失参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "构建和编译",
                    "Description": "使用适当的构建过程可以简单地解决这个问题。",
                    "Description_Merged": "使用适当的构建过程可以简单地解决这个问题。",
                    "Phase_Merged": "构建和编译"
                },
                {
                    "Phase": "实施",
                    "Description": "提前声明所有函数。这是推荐的解决方案。正确地提前声明所有使用的函数将导致编译器错误，如果向函数发送了过少的参数。",
                    "Description_Merged": "提前声明所有函数。这是推荐的解决方案。正确地提前声明所有使用的函数将导致编译器错误，如果向函数发送了过少的参数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "235",
        "Name": "Improper Handling of Extra Parameters",
        "Description": "The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品未处理或错误处理具有相同名称的参数、字段或参数的数量超过预期量。",
        "Name_ZH": "不正确处理额外参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "236",
        "Name": "Improper Handling of Undefined Parameters",
        "Description": "The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当产品无法处理或错误处理特定参数、字段或参数名称未定义或不受产品支持时。",
        "Name_ZH": "不正确处理未定义参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "237",
        "Name": "Improper Handling of Structural Elements",
        "Description": "The product does not handle or incorrectly handles inputs that are related to complex structures.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当与复杂结构相关的输入无法被正确处理。",
        "Name_ZH": "不正确处理结构元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "238",
        "Name": "Improper Handling of Incomplete Structural Elements",
        "Description": "The product does not handle or incorrectly handles when a particular structural element is not completely specified.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当特定结构元素未完全指定时，产品无法处理或错误处理。",
        "Name_ZH": "不正确处理不完整的结构元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "239",
        "Name": "Failure to Handle Incomplete Element",
        "Description": "The product does not properly handle when a particular element is not completely specified.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当特定元素未完全指定时，产品无法正确处理。",
        "Name_ZH": "未处理不完整的元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "240",
        "Name": "Improper Handling of Inconsistent Structural Elements",
        "Description": "The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当两个或多个结构元素应保持一致但不一致时，产品无法处理或错误处理。",
        "Name_ZH": "不正确处理不一致的结构元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "241",
        "Name": "Improper Handling of Unexpected Data Type",
        "Description": "The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "当特定元素与预期类型不符时，例如期望是数字（0-9），但提供的是字母（A-Z），产品无法处理或错误处理。",
        "Name_ZH": "不正确处理意外的数据类型",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "242",
        "Name": "Use of Inherently Dangerous Function",
        "Description": "The product calls a function that can never be guaranteed to work safely.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Requirements"
                    ],
                    "Description": "Ban the use of dangerous functions. Use their safe equivalent.",
                    "Description_Merged": "Ban the use of dangerous functions. Use their safe equivalent.",
                    "Phase_Merged": "Implementation / Requirements"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use grep or static analysis tools to spot usage of dangerous functions.",
                    "Description_Merged": "Use grep or static analysis tools to spot usage of dangerous functions.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品调用的函数无法保证安全工作。",
        "Name_ZH": "使用本质上危险的函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "需求"
                    ],
                    "Description": "禁止使用危险函数。使用它们的安全等效函数。",
                    "Description_Merged": "禁止使用危险函数。使用它们的安全等效函数。",
                    "Phase_Merged": "实施 / 需求"
                },
                {
                    "Phase": "测试",
                    "Description": "使用grep或静态分析工具来查找危险函数的使用。",
                    "Description_Merged": "使用grep或静态分析工具来查找危险函数的使用。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "243",
        "Name": "Creation of chroot Jail Without Changing Working Directory",
        "Description": "The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用chroot()系统调用创建一个容器，但之后没有改变工作目录。这将导致无法阻止访问容器外的文件。",
        "Name_ZH": "创建chroot环境时未更改工作目录",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "244",
        "Name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
        "Description": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "使用realloc()调整存储敏感信息的缓冲区大小可能会导致敏感信息暴露给攻击者，因为它未从内存中删除。",
        "Name_ZH": "在释放之前不正确清除堆内存（'堆内存检查'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "245",
        "Name": "J2EE Bad Practices: Direct Management of Connections",
        "Description": "The J2EE application directly manages connections, instead of using the container's connection management facilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "J2EE应用程序直接管理连接，而不是使用容器的连接管理设施。",
        "Name_ZH": "J2EE不良实践：直接管理连接",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "246",
        "Name": "J2EE Bad Practices: Direct Use of Sockets",
        "Description": "The J2EE application directly uses sockets instead of using framework method calls.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use framework method calls instead of using sockets directly.",
                    "Description_Merged": "Use framework method calls instead of using sockets directly.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "J2EE应用程序直接使用套接字而不是使用框架方法调用。",
        "Name_ZH": "J2EE不良实践：直接使用套接字",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用框架方法调用而不是直接使用套接字。",
                    "Description_Merged": "使用框架方法调用而不是直接使用套接字。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "247",
        "Name": "DEPRECATED: Reliance on DNS Lookups in a Security Decision",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为它是CWE-350的重复内容。所有内容已转移到CWE-350。",
        "Name_ZH": "不再推荐使用：在安全决策中依赖DNS查询",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "248",
        "Name": "Uncaught Exception",
        "Description": "An exception is thrown from a function, but it is not caught.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "从一个函数中抛出了异常，但没有捕获。",
        "Name_ZH": "未捕获的异常",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "249",
        "Name": "DEPRECATED: Often Misused: Path Manipulation",
        "Description": "This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred to CWE-785.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为名称混淆和意外组合了多个弱点。它的大部分内容已转移到CWE-785。",
        "Name_ZH": "不再推荐使用：常被误用：路径操纵",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "250",
        "Name": "Execution with Unnecessary Privileges",
        "Description": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-18",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
                    "Description_Merged": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-18",
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
                    "Description_Merged": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
                    "Description_Merged": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-19",
                    "Phase": "Implementation",
                    "Description": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.",
                    "Description_Merged": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.",
                    "Description_Merged": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-37",
                    "Phase": [
                        "Operation",
                        "System Configuration"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
                    "Description_Merged": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
                    "Phase_Merged": "Operation / System Configuration",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "产品在高于所需最低权限级别上执行操作，这会产生新的弱点或放大其他弱点的后果。",
        "Name_ZH": "以不必要的权限执行",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-18",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "识别需要额外权限的功能，例如访问特权操作系统资源。如果可能的话，封装和集中这些功能，并尽量将特权代码与其他代码隔离[REF-76]。尽可能晚地提升权限，并尽快降低权限，以避免CWE-271。通过保护可能与特权代码交互的所有可能的通信渠道（例如，只能由管理员访问的辅助套接字）来避免CWE-288和CWE-420等弱点。",
                    "Description_Merged": "识别需要额外权限的功能，例如访问特权操作系统资源。如果可能的话，封装和集中这些功能，并尽量将特权代码与其他代码隔离[REF-76]。尽可能晚地提升权限，并尽快降低权限，以避免CWE-271。通过保护可能与特权代码交互的所有可能的通信渠道（例如，只能由管理员访问的辅助套接字）来避免CWE-288和CWE-420等弱点。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-18",
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": "识别需要额外权限的功能，例如访问特权操作系统资源。如果可能的话，封装和集中这些功能，并尽量将特权代码与其他代码隔离[REF-76]。尽可能晚地提升权限，并尽快降低权限，以避免CWE-271。通过保护可能与特权代码交互的所有可能的通信渠道（例如，只能由管理员访问的辅助套接字）来避免CWE-288和CWE-420等弱点。",
                    "Description_Merged": "识别需要额外权限的功能，例如访问特权操作系统资源。如果可能的话，封装和集中这些功能，并尽量将特权代码与其他代码隔离[REF-76]。尽可能晚地提升权限，并尽快降低权限，以避免CWE-271。通过保护可能与特权代码交互的所有可能的通信渠道（例如，只能由管理员访问的辅助套接字）来避免CWE-288和CWE-420等弱点。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Description": "对于必须向用户公开的特权代码进行广泛的输入验证，并拒绝任何不符合严格要求的内容。",
                    "Description_Merged": "对于必须向用户公开的特权代码进行广泛的输入验证，并拒绝任何不符合严格要求的内容。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-19",
                    "Phase": "实施",
                    "Description": "在降低权限时，确保其已成功降低，以避免CWE-273。随着环境中的保护机制变得更强大，即使看起来它们总是成功的，降低权限的调用可能会失败。",
                    "Description_Merged": "在降低权限时，确保其已成功降低，以避免CWE-273。随着环境中的保护机制变得更强大，即使看起来它们总是成功的，降低权限的调用可能会失败。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果情况迫使您以额外的权限运行，请确定所需的最低访问级别。首先，确定软件及其用户执行操作所需的不同权限，例如文件读取和写入权限、网络套接字权限等。然后，明确允许这些操作，同时拒绝其他所有操作[REF-76]。进行广泛的输入验证和规范化，以最小化引入其他漏洞的机会。与首次降低权限相比，这种减轻措施更容易出错。",
                    "Description_Merged": "如果情况迫使您以额外的权限运行，请确定所需的最低访问级别。首先，确定软件及其用户执行操作所需的不同权限，例如文件读取和写入权限、网络套接字权限等。然后，明确允许这些操作，同时拒绝其他所有操作[REF-76]。进行广泛的输入验证和规范化，以最小化引入其他漏洞的机会。与首次降低权限相比，这种减轻措施更容易出错。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-37",
                    "Phase": [
                        "操作",
                        "系统配置"
                    ],
                    "Strategy": "环境加固",
                    "Description": "确保软件在美国政府配置基线（USGCB）[REF-199]或类似的加固配置指南下正常运行，许多组织使用这些指南来限制部署软件的攻击面和潜在风险。",
                    "Description_Merged": "确保软件在美国政府配置基线（USGCB）[REF-199]或类似的加固配置指南下正常运行，许多组织使用这些指南来限制部署软件的攻击面和潜在风险。",
                    "Phase_Merged": "操作 / 系统配置",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "252",
        "Name": "Unchecked Return Value",
        "Description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-53",
                    "Phase": "Implementation",
                    "Description": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that you account for all possible return values from the function.",
                    "Description_Merged": "Ensure that you account for all possible return values from the function.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When designing a function, make sure you return a value or throw an exception in case of an error.",
                    "Description_Merged": "When designing a function, make sure you return a value or throw an exception in case of an error.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品没有检查方法或函数的返回值，这可能导致它无法检测到意外的状态和条件。",
        "Name_ZH": "未检查的返回值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-53",
                    "Phase": "实施",
                    "Description": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "确保考虑了函数可能返回的所有值。",
                    "Description_Merged": "确保考虑了函数可能返回的所有值。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在设计函数时，确保在出现错误时返回一个值或抛出一个异常。",
                    "Description_Merged": "在设计函数时，确保在出现错误时返回一个值或抛出一个异常。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "253",
        "Name": "Incorrect Check of Function Return Value",
        "Description": "The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Language Selection",
                    "Description": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
                    "Description_Merged": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Properly check all functions which return a value.",
                    "Description_Merged": "Properly check all functions which return a value.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When designing any function make sure you return a value or throw an exception in case of an error.",
                    "Description_Merged": "When designing any function make sure you return a value or throw an exception in case of an error.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品错误地检查了函数的返回值，这使得它无法检测到错误或异常条件。",
        "Name_ZH": "不正确检查函数返回值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "语言选择",
                    "Description": "使用一个使用异常并要求捕获这些异常的语言或编译器。",
                    "Description_Merged": "使用一个使用异常并要求捕获这些异常的语言或编译器。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "实施",
                    "Description": "适当检查所有返回值的函数。",
                    "Description_Merged": "适当检查所有返回值的函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在设计任何函数时，确保在出现错误时返回一个值或抛出一个异常。",
                    "Description_Merged": "在设计任何函数时，确保在出现错误时返回一个值或抛出一个异常。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "256",
        "Name": "Plaintext Storage of a Password",
        "Description": "Storing a password in plaintext may result in a system compromise.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid storing passwords in easily accessible locations.",
                    "Description_Merged": "Avoid storing passwords in easily accessible locations.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.",
                    "Description_Merged": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Description": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.",
                    "Effectiveness": "None",
                    "Description_Merged": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily."
                }
            ]
        },
        "Description_ZH": "以明文形式存储密码可能导致系统受到威胁。",
        "Name_ZH": "明文存储密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "避免将密码存储在易于访问的位置。",
                    "Description_Merged": "避免将密码存储在易于访问的位置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑将密码的加密哈希值存储为替代方案，而不是以明文形式存储。",
                    "Description_Merged": "考虑将密码的加密哈希值存储为替代方案，而不是以明文形式存储。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Description": "程序员可能会尝试通过使用编码函数（如base64编码）来掩盖密码来解决密码管理问题，但这种努力并不能充分保护密码，因为编码可以轻易被检测和解码。",
                    "Effectiveness": "None",
                    "Description_Merged": "程序员可能会尝试通过使用编码函数（如base64编码）来掩盖密码来解决密码管理问题，但这种努力并不能充分保护密码，因为编码可以轻易被检测和解码。"
                }
            ]
        }
    },
    {
        "ID": "257",
        "Name": "Storing Passwords in a Recoverable Format",
        "Description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use strong, non-reversible encryption to protect stored passwords.",
                    "Description_Merged": "Use strong, non-reversible encryption to protect stored passwords.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "以可恢复的格式存储密码会使其容易受到恶意用户的密码重用攻击。事实上，应该注意到可恢复的加密密码与明文密码相比并没有提供显著的好处，因为它们不仅容易被恶意攻击者重用，而且还容易被恶意内部人员重用。如果系统管理员可以直接恢复密码，或者在可用信息上进行暴力搜索，管理员可以将密码用于其他账户。",
        "Name_ZH": "以可恢复格式存储密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用强大的、不可逆的加密来保护存储的密码。",
                    "Description_Merged": "使用强大的、不可逆的加密来保护存储的密码。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "258",
        "Name": "Empty Password in Configuration File",
        "Description": "Using an empty string as a password is insecure.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
                    "Description_Merged": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "使用空字符串作为密码是不安全的。",
        "Name_ZH": "配置文件中的空密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "密码应至少为八个字符长，越长越好。避免使用与其他密码相似的密码。避免使用字典、姓名书、地图等中可能出现的单词。考虑将数字和/或标点符号纳入密码中。如果确实使用常见单词，请考虑用数字和标点符号替换该单词中的字母。但是，不要使用“看起来相似”的标点符号。例如，将cat改为c@t、ca+、(@+或类似的形式不是一个好主意。最后，使用空字符串作为密码是不合适的。",
                    "Description_Merged": "密码应至少为八个字符长，越长越好。避免使用与其他密码相似的密码。避免使用字典、姓名书、地图等中可能出现的单词。考虑将数字和/或标点符号纳入密码中。如果确实使用常见单词，请考虑用数字和标点符号替换该单词中的字母。但是，不要使用“看起来相似”的标点符号。例如，将cat改为c@t、ca+、(@+或类似的形式不是一个好主意。最后，使用空字符串作为密码是不合适的。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "259",
        "Name": "Use of Hard-coded Password",
        "Description": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.",
                    "Description_Merged": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.",
                    "Description_Merged": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.",
                    "Description_Merged": "Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.",
                            "Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method."
                        ]
                    },
                    "Description_Merged": "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.\nUse randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "For front-end to back-end connections: Three solutions are possible, although none are complete.",
                        "div": {
                            "@_style": "margin-left:1em;",
                            "div": [
                                "The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.",
                                "Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.",
                                "Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks."
                            ]
                        }
                    },
                    "Description_Merged": "For front-end to back-end connections: Three solutions are possible, although none are complete.\nmargin-left:1em;\nThe first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\nNext, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\nFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品中包含一个硬编码密码，用于自身的入站认证或与外部组件的出站通信。",
        "Name_ZH": "使用硬编码密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对于出站身份验证：将密码存储在代码之外的加密配置文件或数据库中，并确保受到所有外部人员的保护，包括同一系统上的其他本地用户。正确保护密钥（CWE-320）。如果无法使用加密来保护文件，则确保权限尽可能限制。",
                    "Description_Merged": "对于出站身份验证：将密码存储在代码之外的加密配置文件或数据库中，并确保受到所有外部人员的保护，包括同一系统上的其他本地用户。正确保护密钥（CWE-320）。如果无法使用加密来保护文件，则确保权限尽可能限制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "对于入站身份验证：不要为首次登录硬编码默认用户名和密码，而是使用“首次登录”模式，要求用户输入一个独特且强密码。",
                    "Description_Merged": "对于入站身份验证：不要为首次登录硬编码默认用户名和密码，而是使用“首次登录”模式，要求用户输入一个独特且强密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "执行访问控制检查，并限制可以访问需要硬编码密码的功能的实体。例如，某个功能可能只能通过系统控制台启用，而不能通过网络连接启用。",
                    "Description_Merged": "执行访问控制检查，并限制可以访问需要硬编码密码的功能的实体。例如，某个功能可能只能通过系统控制台启用，而不能通过网络连接启用。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于入站身份验证：对密码应用强一向散列，将这些散列存储在具有恰当访问控制的配置文件或数据库中。这样，即使文件/数据库被盗，攻击者仍需要尝试破解密码。在进行身份验证时，将收到的输入密码进行散列并将其与保存的散列进行比较。",
                            "为您生成的每个单独散列使用随机分配的盐。这增加了攻击者进行暴力破解攻击所需的计算量，可能限制了彩虹表方法的有效性。"
                        ]
                    },
                    "Description_Merged": "对于入站身份验证：对密码应用强一向散列，将这些散列存储在具有恰当访问控制的配置文件或数据库中。这样，即使文件/数据库被盗，攻击者仍需要尝试破解密码。在进行身份验证时，将收到的输入密码进行散列并将其与保存的散列进行比较。\n为您生成的每个单独散列使用随机分配的盐。这增加了攻击者进行暴力破解攻击所需的计算量，可能限制了彩虹表方法的有效性。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "对于前端到后端的连接：有三种可能的解决方案，尽管都不完整。",
                        "div": {
                            "@_style": "margin-left:1em;",
                            "div": [
                                "第一个建议涉及使用由系统管理员自动更改并在给定时间间隔内输入的生成密码。这些密码将保存在内存中，并且只在时间间隔内有效。",
                                "接下来，所使用的密码应被限制在后端仅执行前端有效的操作，而不是具有完全访问权限。",
                                "最后，所发送的消息应使用带有时间敏感值的标签和校验和进行标记，以防止重放式攻击。"
                            ]
                        }
                    },
                    "Description_Merged": "对于前端到后端的连接：有三种可能的解决方案，尽管都不完整。\nmargin-left:1em;\n第一个建议涉及使用由系统管理员自动更改并在给定时间间隔内输入的生成密码。这些密码将保存在内存中，并且只在时间间隔内有效。\n接下来，所使用的密码应被限制在后端仅执行前端有效的操作，而不是具有完全访问权限。\n最后，所发送的消息应使用带有时间敏感值的标签和校验和进行标记，以防止重放式攻击。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "260",
        "Name": "Password in Configuration File",
        "Description": "The product stores a password in a configuration file that might be accessible to actors who do not know the password.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid storing passwords in easily accessible locations.",
                    "Description_Merged": "Avoid storing passwords in easily accessible locations.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.",
                    "Description_Merged": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品将密码存储在一个可能被不知密码的人访问的配置文件中。",
        "Name_ZH": "配置文件中的密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "避免将密码存储在易于访问的位置。",
                    "Description_Merged": "避免将密码存储在易于访问的位置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑将密码的加密哈希值存储为替代方案，而不是以明文形式存储。",
                    "Description_Merged": "考虑将密码的加密哈希值存储为替代方案，而不是以明文形式存储。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "261",
        "Name": "Weak Encoding for Password",
        "Description": "Obscuring a password with a trivial encoding does not protect the password.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
                    "Description_Merged": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security."
                }
            ]
        },
        "Description_ZH": "使用简单编码来掩盖密码不能保护密码。",
        "Name_ZH": "密码的弱加密",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "密码应使用至少128位长度的密钥进行加密，以获得足够的安全性。",
                    "Description_Merged": "密码应使用至少128位长度的密钥进行加密，以获得足够的安全性。"
                }
            ]
        }
    },
    {
        "ID": "262",
        "Name": "Not Using Password Aging",
        "Description": "The product does not have a mechanism in place for managing password aging.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.",
                    "Description_Merged": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品没有建立密码过期管理机制。",
        "Name_ZH": "不使用密码过期",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "作为产品设计的一部分，要求用户定期更改密码，并避免重复使用以前的密码。",
                    "Description_Merged": "作为产品设计的一部分，要求用户定期更改密码，并避免重复使用以前的密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "开发人员可以禁用将剪贴板中的内容粘贴到密码字段中的操作，以阻止用户将密码粘贴到剪贴板中。然而，这可能会鼓励用户选择更不安全、更容易输入的密码，并且可能降低密码管理器的可用性[REF-1294]。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "开发人员可以禁用将剪贴板中的内容粘贴到密码字段中的操作，以阻止用户将密码粘贴到剪贴板中。然而，这可能会鼓励用户选择更不安全、更容易输入的密码，并且可能降低密码管理器的可用性[REF-1294]。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "263",
        "Name": "Password Aging with Long Expiration",
        "Description": "The product supports password aging, but the expiration period is too long.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.",
                    "Description_Merged": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the user is notified several times leading up to the password expiration.",
                    "Description_Merged": "Ensure that the user is notified several times leading up to the password expiration.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Create mechanisms to prevent users from reusing passwords or creating similar passwords.",
                    "Description_Merged": "Create mechanisms to prevent users from reusing passwords or creating similar passwords.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品支持密码过期，但过期时间过长。",
        "Name_ZH": "密码过期时间过长",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保密码过期时间有所限制，即密码有一个明确的最大使用期限。请注意，如果过期时间太短，可能会导致用户生成弱密码或可预测的密码。",
                    "Description_Merged": "确保密码过期时间有所限制，即密码有一个明确的最大使用期限。请注意，如果过期时间太短，可能会导致用户生成弱密码或可预测的密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保在密码过期之前提前多次通知用户。",
                    "Description_Merged": "确保在密码过期之前提前多次通知用户。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "创建机制以防止用户重复使用密码或创建相似的密码。",
                    "Description_Merged": "创建机制以防止用户重复使用密码或创建相似的密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "开发人员可以禁用将剪贴板中的内容粘贴到密码字段中的操作，以阻止用户将密码粘贴到剪贴板中。然而，这可能会鼓励用户选择更不安全、更容易输入的密码，并且可能降低密码管理器的可用性[REF-1294]。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "开发人员可以禁用将剪贴板中的内容粘贴到密码字段中的操作，以阻止用户将密码粘贴到剪贴板中。然而，这可能会鼓励用户选择更不安全、更容易输入的密码，并且可能降低密码管理器的可用性[REF-1294]。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "266",
        "Name": "Incorrect Privilege Assignment",
        "Description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "产品错误地将特定权限授予某个参与者，为该参与者创建了一个意外的控制范围。",
        "Name_ZH": "不正确的权限分配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "267",
        "Name": "Privilege Defined With Unsafe Actions",
        "Description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "即使该特权、角色、能力或权限被分配给了正确的实体，它仍可用于执行意外的不安全操作。",
        "Name_ZH": "使用不安全操作定义权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "268",
        "Name": "Privilege Chaining",
        "Description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Description_Merged": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "两个不同的特权、角色、能力或权限可以以某种方式组合，使实体能够执行否则不允许的不安全操作。",
        "Name_ZH": "权限链",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Description_Merged": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "269",
        "Name": "Improper Privilege Management",
        "Description": "The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-48",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Description_Merged": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "产品没有正确地为参与者分配、修改、跟踪或检查权限，为该参与者创建了一个意外的控制范围。",
        "Name_ZH": "不正确的权限管理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-48",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Description_Merged": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "270",
        "Name": "Privilege Context Switching Error",
        "Description": "The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Description_Merged": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "产品在不同权限或控制范围的上下文切换时没有正确地管理权限。",
        "Name_ZH": "权限上下文切换错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Description_Merged": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "271",
        "Name": "Privilege Dropping / Lowering Errors",
        "Description": "The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Description_Merged": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品在将资源的控制权交给没有这些特权的操作者之前，没有降低特权级别。",
        "Name_ZH": "权限降低错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Description_Merged": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "272",
        "Name": "Least Privilege Violation",
        "Description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-48",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                    "Description_Merged": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "执行诸如chroot()之类的操作所需的提升特权级别应在操作完成后立即降低。",
        "Name_ZH": "最小权限违规",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-48",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                    "Description_Merged": "在给软件系统中的实体分配访问权限时，遵循最小权限原则。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "273",
        "Name": "Improper Check for Dropped Privileges",
        "Description": "The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-53",
                    "Phase": "Implementation",
                    "Description": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.",
                    "Description_Merged": "In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品尝试降低特权级别，但没有检查或错误地检查降低是否成功。",
        "Name_ZH": "未正确检查降低的权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-53",
                    "Phase": "实施",
                    "Description": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在Windows中，确保进程令牌具有SeImpersonatePrivilege（Microsoft Server 2003）。依赖模拟进行安全性的代码必须确保模拟成功，即正确降低特权。",
                    "Description_Merged": "在Windows中，确保进程令牌具有SeImpersonatePrivilege（Microsoft Server 2003）。依赖模拟进行安全性的代码必须确保模拟成功，即正确降低特权。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "274",
        "Name": "Improper Handling of Insufficient Privileges",
        "Description": "The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当产品没有足够特权执行操作时，它不处理或错误处理，导致产生弱点。",
        "Name_ZH": "未正确处理权限不足的情况",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "276",
        "Name": "Incorrect Default Permissions",
        "Description": "During installation, installed file permissions are set to allow anyone to modify those files.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "The architecture needs to access and modification attributes for files to only those users who actually require those actions.",
                    "Description_Merged": "The architecture needs to access and modification attributes for files to only those users who actually require those actions.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "在安装过程中，安装文件的权限设置为允许任何人修改这些文件。",
        "Name_ZH": "不正确的默认权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "架构需要仅允许那些实际需要这些操作的用户访问和修改文件的属性。",
                    "Description_Merged": "架构需要仅允许那些实际需要这些操作的用户访问和修改文件的属性。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "277",
        "Name": "Insecure Inherited Permissions",
        "Description": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "产品定义了一组不安全的权限，这些权限会被程序创建的对象继承。",
        "Name_ZH": "不安全的继承权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "278",
        "Name": "Insecure Preserved Inherited Permissions",
        "Description": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "在没有用户意识或参与的情况下，产品会继承一个对象的一组不安全权限，例如从存档文件中复制时。",
        "Name_ZH": "不安全的继承权限保留",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "279",
        "Name": "Incorrect Execution-Assigned Permissions",
        "Description": "While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "在执行过程中，产品以违反用户指定的预期权限的方式设置对象的权限。",
        "Name_ZH": "不正确的执行分配权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "280",
        "Name": "Improper Handling of Insufficient Permissions or Privileges",
        "Description": "The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.",
                    "Description_Merged": "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "当产品没有足够特权访问资源或功能的权限时，它不处理或错误处理。这可能导致它遵循意外的代码路径，使产品处于无效状态。",
        "Name_ZH": "未正确处理权限或特权不足的情况",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "Phase": "实施",
                    "Description": "始终检查是否成功访问资源或系统功能，并在不成功时使用适当的错误处理。即使在高特权模式下操作，也要这样做，因为错误或环境条件可能仍会导致失败。例如，具有高度细粒度权限/特权模型的环境（如Windows或Linux capabilities）可能会导致意外故障。",
                    "Description_Merged": "始终检查是否成功访问资源或系统功能，并在不成功时使用适当的错误处理。即使在高特权模式下操作，也要这样做，因为错误或环境条件可能仍会导致失败。例如，具有高度细粒度权限/特权模型的环境（如Windows或Linux capabilities）可能会导致意外故障。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "281",
        "Name": "Improper Preservation of Permissions",
        "Description": "The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "在复制、恢复或共享对象时，该产品不保留权限或错误地保留权限，这可能导致它们具有比预期更宽松的权限。",
        "Name_ZH": "权限保留不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "282",
        "Name": "Improper Ownership Management",
        "Description": "The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                }
            ]
        },
        "Description_ZH": "该产品分配了错误的所有权，或者没有正确验证对象或资源的所有权。",
        "Name_ZH": "所有权管理不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                }
            ]
        }
    },
    {
        "ID": "283",
        "Name": "Unverified Ownership",
        "Description": "The product does not properly verify that a critical resource is owned by the proper entity.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Description_Merged": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品没有正确验证关键资源是否由正确的实体拥有。",
        "Name_ZH": "未验证的所有权",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-49",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Description_Merged": "考虑遵循分权原则。要求在允许访问系统资源之前满足多个条件。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "284",
        "Name": "Improper Access Control",
        "Description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Description_Merged": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品没有限制或错误地限制了未经授权的参与者对资源的访问。",
        "Name_ZH": "访问控制不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-1",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Description_Merged": "非常谨慎地管理特权的设置、管理和处理。在软件中明确管理信任区域。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "285",
        "Name": "Improper Authorization",
        "Description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.",
                            "Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."
                        ]
                    },
                    "Description_Merged": "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.",
                    "Description_Merged": "Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.",
                            "One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."
                        ]
                    },
                    "Description_Merged": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "System Configuration",
                        "Installation"
                    ],
                    "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Description_Merged": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Phase_Merged": "System Configuration / Installation"
                }
            ]
        },
        "Description_ZH": "当参与者尝试访问资源或执行操作时，该产品没有执行或错误地执行授权检查。",
        "Name_ZH": "授权不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "将产品划分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）在适当的边界处强制执行角色。",
                            "请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。"
                        ]
                    },
                    "Description_Merged": "将产品划分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）在适当的边界处强制执行角色。\n请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "请确保您执行与您的业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问只限于特定的数据库用户，但每条记录可能只打算供患者和患者的医生访问。",
                    "Description_Merged": "请确保您执行与您的业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问只限于特定的数据库用户，但每条记录可能只打算供患者和患者的医生访问。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。",
                            "一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。"
                        ]
                    },
                    "Description_Merged": "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。\n一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "系统配置",
                        "安装"
                    ],
                    "Description": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Description_Merged": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Phase_Merged": "系统配置 / 安装"
                }
            ]
        }
    },
    {
        "ID": "286",
        "Name": "Incorrect User Management",
        "Description": "The product does not properly manage a user within its environment.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有正确地管理其环境中的用户。",
        "Name_ZH": "用户管理不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "287",
        "Name": "Improper Authentication",
        "Description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use an authentication framework or library such as the OWASP ESAPI Authentication feature.",
                    "Description_Merged": "Use an authentication framework or library such as the OWASP ESAPI Authentication feature.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "当参与者声称具有特定身份时，该产品没有证明或证明不充分其声明的正确性。",
        "Name_ZH": "身份验证不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用诸如OWASP ESAPI身份验证功能之类的身份验证框架或库。",
                    "Description_Merged": "使用诸如OWASP ESAPI身份验证功能之类的身份验证框架或库。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "288",
        "Name": "Authentication Bypass Using an Alternate Path or Channel",
        "Description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.",
                    "Description_Merged": "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品需要身份验证，但该产品具有无需身份验证的备用路径或通道。",
        "Name_ZH": "通过替代路径或通道绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "将所有访问引导到单个瓶颈点，以简化用户访问资源的方式。对于每次访问，执行检查以确定用户是否具有访问该资源的权限。",
                    "Description_Merged": "将所有访问引导到单个瓶颈点，以简化用户访问资源的方式。对于每次访问，执行检查以确定用户是否具有访问该资源的权限。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "289",
        "Name": "Authentication Bypass by Alternate Name",
        "Description": "The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "Architecture and Design",
                    "Strategy": "Input Validation",
                    "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Description_Merged": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品根据正在访问的资源的名称或执行访问的参与者的名称进行身份验证，但没有正确检查该资源或参与者的所有可能名称。",
        "Name_ZH": "通过替代名称绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-44",
                    "Phase": "架构与设计",
                    "Strategy": "输入验证",
                    "Description": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Description_Merged": "如果资源（例如文件）可以有替代名称，请不要仅仅依赖于基于资源名称的决策。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "290",
        "Name": "Authentication Bypass by Spoofing",
        "Description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "这种以攻击为焦点的弱点是由于错误实现的身份验证方案容易受到欺骗攻击。",
        "Name_ZH": "通过欺骗绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "291",
        "Name": "Reliance on IP Address for Authentication",
        "Description": "The product uses an IP address for authentication.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Description_Merged": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用IP地址进行身份验证。",
        "Name_ZH": "依赖IP地址进行身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用其他无法简单伪造的身份验证手段。可能的方式包括用户名/密码或证书。",
                    "Description_Merged": "使用其他无法简单伪造的身份验证手段。可能的方式包括用户名/密码或证书。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "292",
        "Name": "DEPRECATED: Trusting Self-reported DNS Name",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为它是CWE-350的重复。所有内容已转移到CWE-350。",
        "Name_ZH": "已弃用：信任自报的DNS名称",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "293",
        "Name": "Using Referer Field for Authentication",
        "Description": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Description_Merged": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "HTTP请求中的referer字段可以轻易被修改，因此不是一种有效的消息完整性检查方式。",
        "Name_ZH": "使用Referer字段进行身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "为了有用地检查给定操作是否经过授权，必须使用某种强身份验证和方法保护手段。使用其他无法简单伪造的授权方式。可能的方式包括用户名/密码或证书。",
                    "Description_Merged": "为了有用地检查给定操作是否经过授权，必须使用某种强身份验证和方法保护手段。使用其他无法简单伪造的授权方式。可能的方式包括用户名/密码或证书。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "294",
        "Name": "Authentication Bypass by Capture-replay",
        "Description": "A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.",
                    "Description_Merged": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.",
                    "Description_Merged": "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "当产品设计允许恶意用户嗅探网络流量并通过重播到服务器来绕过认证时，存在捕获-重放漏洞，其效果与原始消息相同（或有微小变化）。",
        "Name_ZH": "通过捕获重放绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "利用一些序列或时间戳功能，以及考虑到这一点的校验和，以确保消息只能解析一次。",
                    "Description_Merged": "利用一些序列或时间戳功能，以及考虑到这一点的校验和，以确保消息只能解析一次。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "由于任何能够监听流量的攻击者都可以看到序列号，因此有必要用某种密码学方法对消息进行签名，以确保序列号不会随内容一起被篡改。",
                    "Description_Merged": "由于任何能够监听流量的攻击者都可以看到序列号，因此有必要用某种密码学方法对消息进行签名，以确保序列号不会随内容一起被篡改。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "295",
        "Name": "Improper Certificate Validation",
        "Description": "The product does not validate, or incorrectly validates, a certificate.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.",
                    "Description_Merged": "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
                    "Description_Merged": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未验证或错误验证证书。",
        "Name_ZH": "证书验证不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "证书应该被仔细管理和检查，以确保数据使用了预期所有者的公钥进行加密。",
                    "Description_Merged": "证书应该被仔细管理和检查，以确保数据使用了预期所有者的公钥进行加密。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果正在使用证书固定（certificate pinning），请确保在固定证书之前完全验证证书的所有相关属性，包括主机名。",
                    "Description_Merged": "如果正在使用证书固定（certificate pinning），请确保在固定证书之前完全验证证书的所有相关属性，包括主机名。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "296",
        "Name": "Improper Following of a Certificate's Chain of Trust",
        "Description": "The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that proper certificate checking is included in the system design.",
                    "Description_Merged": "Ensure that proper certificate checking is included in the system design.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.",
                    "Description_Merged": "Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
                    "Description_Merged": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未遵循或错误遵循证书的信任链，导致与该证书关联的任何资源的信任不正确。",
        "Name_ZH": "未正确跟踪证书的信任链",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保系统设计中包含了适当的证书检查。",
                    "Description_Merged": "确保系统设计中包含了适当的证书检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "了解并正确实施所有必要的检查，以确保证书信任完整性。",
                    "Description_Merged": "了解并正确实施所有必要的检查，以确保证书信任完整性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果正在使用证书固定，请确保在固定证书之前完全验证证书的所有相关属性，包括完整的信任链。",
                    "Description_Merged": "如果正在使用证书固定，请确保在固定证书之前完全验证证书的所有相关属性，包括完整的信任链。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "297",
        "Name": "Improper Validation of Certificate with Host Mismatch",
        "Description": "The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.",
                    "Description_Merged": "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
                    "Description_Merged": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品与提供证书的主机通信，但未正确确保证书实际与该主机相关联。",
        "Name_ZH": "未正确验证证书的主机不匹配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "完全检查证书的主机名，并向用户提供有关问题性质和如何进行的充足信息。",
                    "Description_Merged": "完全检查证书的主机名，并向用户提供有关问题性质和如何进行的充足信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果正在使用证书固定（certificate pinning），请确保在固定证书之前完全验证证书的所有相关属性，包括主机名。",
                    "Description_Merged": "如果正在使用证书固定（certificate pinning），请确保在固定证书之前完全验证证书的所有相关属性，包括主机名。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "298",
        "Name": "Improper Validation of Certificate Expiration",
        "Description": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
                    "Description_Merged": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
                    "Description_Merged": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "证书的过期未经验证或错误验证，因此可能会对已因年限而废弃的证书赋予信任。",
        "Name_ZH": "未正确验证证书的过期",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "检查过期的证书，并向用户提供有关问题性质和如何进行的充足信息。",
                    "Description_Merged": "检查过期的证书，并向用户提供有关问题性质和如何进行的充足信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果正在使用证书固定，请确保在固定证书之前完全验证证书的所有相关属性，包括过期时间。",
                    "Description_Merged": "如果正在使用证书固定，请确保在固定证书之前完全验证证书的所有相关属性，包括过期时间。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "299",
        "Name": "Improper Check for Certificate Revocation",
        "Description": "The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that certificates are checked for revoked status.",
                    "Description_Merged": "Ensure that certificates are checked for revoked status.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.",
                    "Description_Merged": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未检查或错误检查证书的吊销状态，这可能导致使用已被损坏的证书。",
        "Name_ZH": "未正确检查证书吊销",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保检查证书的吊销状态。",
                    "Description_Merged": "确保检查证书的吊销状态。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果使用了证书锁定，请确保在锁定证书之前完全验证证书的所有相关属性，包括吊销状态。",
                    "Description_Merged": "如果使用了证书锁定，请确保在锁定证书之前完全验证证书的所有相关属性，包括吊销状态。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "300",
        "Name": "Channel Accessible by Non-Endpoint",
        "Description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Always fully authenticate both ends of any communications channel.",
                    "Description_Merged": "Always fully authenticate both ends of any communications channel.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Adhere to the principle of complete mediation.",
                    "Description_Merged": "Adhere to the principle of complete mediation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.",
                    "Description_Merged": "A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未能充分验证通信通道两端的参与者身份，或未能充分确保通道的完整性，使得通道可以被非端点的参与者访问或影响。",
        "Name_ZH": "非终端可访问的通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "始终完全验证通信通道的两端身份。",
                    "Description_Merged": "始终完全验证通信通道的两端身份。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "遵循完全介入的原则。",
                    "Description_Merged": "遵循完全介入的原则。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "证书将身份与加密密钥绑定，用于验证通信方。通常，证书采用主题身份的哈希值、公钥以及发行者的私钥生成的发行时间或到期时间等信息的加密形式。可以使用发行者的公钥解密证书进行验证。另请参阅X.509证书签名链和PGP认证结构。",
                    "Description_Merged": "证书将身份与加密密钥绑定，用于验证通信方。通常，证书采用主题身份的哈希值、公钥以及发行者的私钥生成的发行时间或到期时间等信息的加密形式。可以使用发行者的公钥解密证书进行验证。另请参阅X.509证书签名链和PGP认证结构。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "301",
        "Name": "Reflection Attack in an Authentication Protocol",
        "Description": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.",
                    "Description_Merged": "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Let the initiator prove its identity before proceeding.",
                    "Description_Merged": "Let the initiator prove its identity before proceeding.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "简单的身份验证协议容易受到反射攻击，如果恶意用户可以使用目标机器冒充受信任的用户。",
        "Name_ZH": "身份验证协议中的反射攻击",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "为发起方和响应方使用不同的密钥，或者为发起方和响应方使用不同类型的挑战。",
                    "Description_Merged": "为发起方和响应方使用不同的密钥，或者为发起方和响应方使用不同类型的挑战。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在继续之前，让发起方证明其身份。",
                    "Description_Merged": "在继续之前，让发起方证明其身份。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "302",
        "Name": "Authentication Bypass by Assumed-Immutable Data",
        "Description": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation",
                        "Implementation"
                    ],
                    "Description": "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)",
                    "Description_Merged": "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)",
                    "Phase_Merged": "Architecture and Design / Operation / Implementation"
                }
            ]
        },
        "Description_ZH": "认证方案或实现使用被假定为不可变的关键数据元素，但攻击者可以控制或修改这些元素。",
        "Name_ZH": "通过假设不可变数据绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "操作",
                        "实施"
                    ],
                    "Description": "为不可变数据（例如环境变量、隐藏表单字段等）实施适当的保护。",
                    "Description_Merged": "为不可变数据（例如环境变量、隐藏表单字段等）实施适当的保护。",
                    "Phase_Merged": "架构与设计 / 操作 / 实施"
                }
            ]
        }
    },
    {
        "ID": "303",
        "Name": "Incorrect Implementation of Authentication Algorithm",
        "Description": "The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的要求规定使用一种已建立的认证算法，但实现算法的方式是错误的。",
        "Name_ZH": "身份验证算法实施不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "304",
        "Name": "Missing Critical Step in Authentication",
        "Description": "The product implements an authentication technique, but it skips a step that weakens the technique.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品实现了一种认证技术，但跳过了一个步骤，削弱了该技术的强度。",
        "Name_ZH": "身份验证中缺少关键步骤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "305",
        "Name": "Authentication Bypass by Primary Weakness",
        "Description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "认证算法是可靠的，但由于独立于认证错误的另一个主要弱点，实现的机制可以被绕过。",
        "Name_ZH": "通过主要弱点绕过身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "306",
        "Name": "Missing Authentication for Critical Function",
        "Description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.",
                            "Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.",
                            "In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout."
                        ]
                    },
                    "Description_Merged": "Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.\nIdentify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.\nIn general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.",
                            "In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly."
                        ]
                    },
                    "Description_Merged": "Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.\nIn environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4.5",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45]."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration",
                        "Operation"
                    ],
                    "Description": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
                    "Description_Merged": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
                    "Phase_Merged": "Implementation / System Configuration / Operation"
                }
            ]
        },
        "Description_ZH": "产品在需要可证明用户身份或消耗大量资源的功能上没有执行任何认证。",
        "Name_ZH": "关键功能缺少身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "将软件划分为匿名、普通、特权和管理区域。确定哪些区域需要经过验证的用户身份，并使用集中式身份验证功能。",
                            "识别所有潜在的通信通道或与软件交互的其他方式，以确保所有通道都得到适当的保护。开发人员有时会在主要通道上进行身份验证，但会打开一个被认为是私密的次要通道。例如，登录机制可能在一个网络端口上进行监听，但在成功身份验证后，可能会打开一个等待连接的第二个端口，但避免进行身份验证，因为它假设只有经过身份验证的一方才会连接到该端口。",
                            "总的来说，如果软件或协议允许单个会话或用户状态跨多个连接或通道持续存在，就需要始终使用身份验证和适当的凭证管理。"
                        ]
                    },
                    "Description_Merged": "将软件划分为匿名、普通、特权和管理区域。确定哪些区域需要经过验证的用户身份，并使用集中式身份验证功能。\n识别所有潜在的通信通道或与软件交互的其他方式，以确保所有通道都得到适当的保护。开发人员有时会在主要通道上进行身份验证，但会打开一个被认为是私密的次要通道。例如，登录机制可能在一个网络端口上进行监听，但在成功身份验证后，可能会打开一个等待连接的第二个端口，但避免进行身份验证，因为它假设只有经过身份验证的一方才会连接到该端口。\n总的来说，如果软件或协议允许单个会话或用户状态跨多个连接或通道持续存在，就需要始终使用身份验证和适当的凭证管理。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "在可能的情况下，尽量避免实现自定义的身份验证程序，并考虑使用周围框架、操作系统或环境提供的身份验证功能。这样可以更容易地在身份验证任务和授权任务之间进行明确的分离。",
                            "在诸如万维网之类的环境中，身份验证和授权之间的界线有时会变得模糊。如果需要使用服务器提供的自定义身份验证程序而不是默认程序，则必须将这些程序应用于每个页面，因为这些页面可能会直接被请求。"
                        ]
                    },
                    "Description_Merged": "在可能的情况下，尽量避免实现自定义的身份验证程序，并考虑使用周围框架、操作系统或环境提供的身份验证功能。这样可以更容易地在身份验证任务和授权任务之间进行明确的分离。\n在诸如万维网之类的环境中，身份验证和授权之间的界线有时会变得模糊。如果需要使用服务器提供的自定义身份验证程序而不是默认程序，则必须将这些程序应用于每个页面，因为这些页面可能会直接被请求。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4.5",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用具有身份验证能力的库，如OpenSSL或ESAPI Authenticator [REF-45]。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用具有身份验证能力的库，如OpenSSL或ESAPI Authenticator [REF-45]。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": [
                        "实施",
                        "系统配置",
                        "操作"
                    ],
                    "Description": "在存储云数据（例如S3存储桶、Azure blob、Google Cloud Storage等）时，请使用提供者的控制来要求那些被允许访问数据的用户进行强身份验证 [REF-1297] [REF-1298] [REF-1302]。",
                    "Description_Merged": "在存储云数据（例如S3存储桶、Azure blob、Google Cloud Storage等）时，请使用提供者的控制来要求那些被允许访问数据的用户进行强身份验证 [REF-1297] [REF-1298] [REF-1302]。",
                    "Phase_Merged": "实施 / 系统配置 / 操作"
                }
            ]
        }
    },
    {
        "ID": "307",
        "Name": "Improper Restriction of Excessive Authentication Attempts",
        "Description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Common protection mechanisms include:",
                        "ul": {
                            "li": [
                                "Disconnecting the user after a small number of failed attempts",
                                "Implementing a timeout",
                                "Locking out a targeted account",
                                "Requiring a computational task on the user's part."
                            ]
                        }
                    },
                    "Description_Merged": "Common protection mechanisms include:\nDisconnecting the user after a small number of failed attempts\nImplementing a timeout\nLocking out a targeted account\nRequiring a computational task on the user's part.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]"
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nConsider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "产品没有采取足够的措施来防止在短时间内多次失败的认证尝试，从而更容易受到暴力破解攻击。",
        "Name_ZH": "对过多身份验证尝试的限制不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "常见的保护机制包括：",
                        "ul": {
                            "li": [
                                "在少量失败尝试后断开用户连接",
                                "实施超时机制",
                                "锁定目标账户",
                                "要求用户进行计算任务。"
                            ]
                        }
                    },
                    "Description_Merged": "常见的保护机制包括：\n在少量失败尝试后断开用户连接\n实施超时机制\n锁定目标账户\n要求用户进行计算任务。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "考虑使用具有身份验证能力的库，如OpenSSL或ESAPI Authenticator。 [REF-45]"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n考虑使用具有身份验证能力的库，如OpenSSL或ESAPI Authenticator。 [REF-45]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "308",
        "Name": "Use of Single-factor Authentication",
        "Description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.",
                    "Description_Merged": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "使用单因素认证与双因素认证方案的好处相比，可能会导致不必要的风险。",
        "Name_ZH": "使用单因素身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用多个独立的身份验证方案，确保即使其中一个方法被攻破，系统本身仍有较高的安全性。",
                    "Description_Merged": "使用多个独立的身份验证方案，确保即使其中一个方法被攻破，系统本身仍有较高的安全性。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "309",
        "Name": "Use of Password System for Primary Authentication",
        "Description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "In order to protect password systems from compromise, the following should be noted:",
                        "ul": {
                            "li": [
                                "Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.",
                                "Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.",
                                "Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words."
                            ]
                        }
                    },
                    "Description_Merged": "In order to protect password systems from compromise, the following should be noted:\nPasswords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.\nPassword aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.\nPassword strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a zero-knowledge password protocol, such as SRP.",
                    "Description_Merged": "Use a zero-knowledge password protocol, such as SRP.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that passwords are stored safely and are not reversible.",
                    "Description_Merged": "Ensure that passwords are stored safely and are not reversible.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Implement password aging functionality that requires passwords be changed after a certain point.",
                    "Description_Merged": "Implement password aging functionality that requires passwords be changed after a certain point.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a mechanism for determining the strength of a password and notify the user of weak password use.",
                    "Description_Merged": "Use a mechanism for determining the strength of a password and notify the user of weak password use.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.",
                    "Description_Merged": "Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "将密码系统作为主要的认证手段可能存在几个缺陷或不足之处，每个都会降低机制的效力。",
        "Name_ZH": "使用密码系统进行主要身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "为了保护密码系统免受攻击，需要注意以下几点：",
                        "ul": {
                            "li": [
                                "密码应安全存储，以防止内部人员攻击，并确保在系统被攻破时密码无法被获取。由于密码重用的问题，这些信息可能会对用户使用的其他系统的安全造成威胁。为了保护这些密码，应以不可逆转的方式进行加密存储，使得原始密码无法从存储值中提取出来。",
                                "应严格执行密码过期策略，确保密码不会长时间保持不变。密码使用时间越长，被攻破的可能性就越高。因此，密码应定期要求更换，并向用户提醒长时间使用的密码存在的风险。",
                                "应智能地强制执行密码强度要求。不要限制密码的特定内容或长度，而应鼓励用户在密码中使用大小写字母、数字和符号。系统还应确保密码不是由字典中的单词组成。"
                            ]
                        }
                    },
                    "Description_Merged": "为了保护密码系统免受攻击，需要注意以下几点：\n密码应安全存储，以防止内部人员攻击，并确保在系统被攻破时密码无法被获取。由于密码重用的问题，这些信息可能会对用户使用的其他系统的安全造成威胁。为了保护这些密码，应以不可逆转的方式进行加密存储，使得原始密码无法从存储值中提取出来。\n应严格执行密码过期策略，确保密码不会长时间保持不变。密码使用时间越长，被攻破的可能性就越高。因此，密码应定期要求更换，并向用户提醒长时间使用的密码存在的风险。\n应智能地强制执行密码强度要求。不要限制密码的特定内容或长度，而应鼓励用户在密码中使用大小写字母、数字和符号。系统还应确保密码不是由字典中的单词组成。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用零知识密码协议，例如SRP。",
                    "Description_Merged": "使用零知识密码协议，例如SRP。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保密码安全存储且不可逆。",
                    "Description_Merged": "确保密码安全存储且不可逆。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "实施密码过期功能，要求在一定时间后更换密码。",
                    "Description_Merged": "实施密码过期功能，要求在一定时间后更换密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用一种机制来确定密码的强度，并通知用户使用弱密码的风险。",
                    "Description_Merged": "使用一种机制来确定密码的强度，并通知用户使用弱密码的风险。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "向用户解释密码保护的目的，说明其保护数据完整性的工作原理，以及遵守密码保护措施的重要性。",
                    "Description_Merged": "向用户解释密码保护的目的，说明其保护数据完整性的工作原理，以及遵守密码保护措施的重要性。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "311",
        "Name": "Missing Encryption of Sensitive Data",
        "Description": "The product does not encrypt sensitive or critical information before storage or transmission.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.",
                    "Description_Merged": "Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:",
                            "Identify the separate needs and contexts for encryption:",
                            "Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]"
                        ],
                        "ul": [
                            {
                                "li": [
                                    "Encryption that is needed to store or transmit private data of the users of the system",
                                    "Encryption that is needed to protect the system itself from unauthorized disclosure or tampering"
                                ]
                            },
                            {
                                "li": [
                                    "One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key.",
                                    "Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others."
                                ]
                            }
                        ]
                    },
                    "Description_Merged": "Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:\nIdentify the separate needs and contexts for encryption:\nUsing threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]\nEncryption that is needed to store or transmit private data of the users of the system\nEncryption that is needed to protect the system itself from unauthorized disclosure or tampering\nOne-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key.\nTwo-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-24",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.",
                            "For example, US government systems require FIPS 140-2 certification.",
                            "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.",
                            "Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]"
                        ]
                    },
                    "Description_Merged": "When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.\nFor example, US government systems require FIPS 140-2 certification.\nDo not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.\nPeriodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.",
                            "Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
                        ]
                    },
                    "Description_Merged": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Description_Merged": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "产品在存储或传输敏感或关键信息之前没有对其进行加密。",
        "Name_ZH": "敏感数据缺少加密",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "明确指明哪些数据或资源具有足够的价值，需要通过加密进行保护。要求在传输或存储这些数据/资源时使用经过审查的加密算法。",
                    "Description_Merged": "明确指明哪些数据或资源具有足够的价值，需要通过加密进行保护。要求在传输或存储这些数据/资源时使用经过审查的加密算法。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "确保加密被正确地整合到系统设计中，包括但不限于以下方面：",
                            "识别加密的不同需求和上下文：",
                            "使用威胁建模或其他技术，假设数据可能通过其他漏洞或弱点被泄露，并确定加密在哪些地方最为有效。确保不会因为安全权限（CWE-732）等弱点而意外地暴露应保密的数据。[REF-7]"
                        ],
                        "ul": [
                            {
                                "li": [
                                    "所需加密以存储或传输系统用户的私密数据",
                                    "所需加密以保护系统本身免受未经授权的披露或篡改"
                                ]
                            },
                            {
                                "li": [
                                    "单向加密（即只有用户或接收方需要拥有密钥）。这可以通过使用公钥密码学或其他技术来实现，其中加密方（即产品）不需要访问私钥。",
                                    "双向加密（即可以自动代表用户执行加密，但必须提供密钥以便用户可以自动恢复明文）。这要求以用户（或者可能是操作系统）独有的方式存储私钥，以一种他人无法恢复的方式。"
                                ]
                            }
                        ]
                    },
                    "Description_Merged": "确保加密被正确地整合到系统设计中，包括但不限于以下方面：\n识别加密的不同需求和上下文：\n使用威胁建模或其他技术，假设数据可能通过其他漏洞或弱点被泄露，并确定加密在哪些地方最为有效。确保不会因为安全权限（CWE-732）等弱点而意外地暴露应保密的数据。[REF-7]\n所需加密以存储或传输系统用户的私密数据\n所需加密以保护系统本身免受未经授权的披露或篡改\n单向加密（即只有用户或接收方需要拥有密钥）。这可以通过使用公钥密码学或其他技术来实现，其中加密方（即产品）不需要访问私钥。\n双向加密（即可以自动代表用户执行加密，但必须提供密钥以便用户可以自动恢复明文）。这要求以用户（或者可能是操作系统）独有的方式存储私钥，以一种他人无法恢复的方式。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-24",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "在需要存储或传输敏感数据时，使用强大且更新的加密算法对数据进行加密。选择一种经过专家认可的、目前被认为是强大的经过审查的算法，并使用经过充分测试的实现。与所有加密机制一样，源代码应该可供分析。",
                            "例如，美国政府系统需要FIPS 140-2认证。",
                            "不要开发自定义或私有的加密算法。它们很可能会受到密码学专家已经深入了解的攻击的影响。逆向工程技术已经非常成熟。如果攻击者发现了算法的工作原理，它可能会被威胁到，因此特别脆弱。",
                            "定期确保加密技术没有过时。一些过去被认为需要计算一亿年时间才能破解的旧算法，现在可能在几天或几小时内就能被攻破。包括MD4、MD5、SHA1、DES等曾经被认为强大的算法。[REF-267]"
                        ]
                    },
                    "Description_Merged": "在需要存储或传输敏感数据时，使用强大且更新的加密算法对数据进行加密。选择一种经过专家认可的、目前被认为是强大的经过审查的算法，并使用经过充分测试的实现。与所有加密机制一样，源代码应该可供分析。\n例如，美国政府系统需要FIPS 140-2认证。\n不要开发自定义或私有的加密算法。它们很可能会受到密码学专家已经深入了解的攻击的影响。逆向工程技术已经非常成熟。如果攻击者发现了算法的工作原理，它可能会被威胁到，因此特别脆弱。\n定期确保加密技术没有过时。一些过去被认为需要计算一亿年时间才能破解的旧算法，现在可能在几天或几小时内就能被攻破。包括MD4、MD5、SHA1、DES等曾经被认为强大的算法。[REF-267]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-46",
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。",
                            "确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。"
                        ]
                    },
                    "Description_Merged": "将系统分隔成“安全”区域，可以明确划定信任边界。不允许敏感数据超出信任边界，并且在与安全区域外的隔间进行交互时要谨慎。\n确保适当的分隔性内置于系统设计中，并且分隔性允许和增强特权分离功能。架构师和设计师应依靠最小特权原则来决定使用特权的适当时间和放弃特权的时间。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Description_Merged": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-33",
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This makes it easier to spot places in the code where data is being used that is unencrypted.",
                    "Description_Merged": "使用命名约定和强类型，以便更容易发现敏感数据的使用。在创建结构、对象或其他复杂实体时，尽量将敏感数据与非敏感数据分开。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "312",
        "Name": "Cleartext Storage of Sensitive Information",
        "Description": "The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration",
                        "Operation"
                    ],
                    "Description": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]",
                    "Description_Merged": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]",
                    "Phase_Merged": "Implementation / System Configuration / Operation"
                }
            ]
        },
        "Description_ZH": "产品在可能由另一个控制范围访问的资源中以明文形式存储敏感信息。",
        "Name_ZH": "敏感信息以明文形式存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "系统配置",
                        "操作"
                    ],
                    "Description": "在存储数据于云中（例如S3存储桶、Azure Blob、Google Cloud Storage等），请使用提供商的控制措施对数据进行加密保护。[REF-1297] [REF-1299] [REF-1301]",
                    "Description_Merged": "在存储数据于云中（例如S3存储桶、Azure Blob、Google Cloud Storage等），请使用提供商的控制措施对数据进行加密保护。[REF-1297] [REF-1299] [REF-1301]",
                    "Phase_Merged": "实施 / 系统配置 / 操作"
                }
            ]
        }
    },
    {
        "ID": "313",
        "Name": "Cleartext Storage in a File or on Disk",
        "Description": "The product stores sensitive information in cleartext in a file, or on disk.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在文件中或磁盘上。",
        "Name_ZH": "在文件或磁盘中的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "314",
        "Name": "Cleartext Storage in the Registry",
        "Description": "The product stores sensitive information in cleartext in the registry.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在注册表中。",
        "Name_ZH": "在注册表中的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "315",
        "Name": "Cleartext Storage of Sensitive Information in a Cookie",
        "Description": "The product stores sensitive information in cleartext in a cookie.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在Cookie中。",
        "Name_ZH": "在Cookie中的敏感信息的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "316",
        "Name": "Cleartext Storage of Sensitive Information in Memory",
        "Description": "The product stores sensitive information in cleartext in memory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在内存中。",
        "Name_ZH": "在内存中的敏感信息的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "317",
        "Name": "Cleartext Storage of Sensitive Information in GUI",
        "Description": "The product stores sensitive information in cleartext within the GUI.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在图形用户界面中。",
        "Name_ZH": "在GUI中的敏感信息的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "318",
        "Name": "Cleartext Storage of Sensitive Information in Executable",
        "Description": "The product stores sensitive information in cleartext in an executable.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息明文存储在可执行文件中。",
        "Name_ZH": "在可执行文件中的敏感信息的明文存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "319",
        "Name": "Cleartext Transmission of Sensitive Information",
        "Description": "The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.",
                    "Description_Merged": "Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.",
                    "Description_Merged": "When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.",
                    "Description_Merged": "When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Description_Merged": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Operation",
                    "Description": "Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.",
                    "Description_Merged": "Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "该产品以明文形式在通信渠道中传输敏感或安全关键数据，可能被未经授权的人员窃取。",
        "Name_ZH": "敏感信息的明文传输",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在传输之前，使用可靠的保密性保护加密协议对数据进行加密。",
                    "Description_Merged": "在传输之前，使用可靠的保密性保护加密协议对数据进行加密。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在使用带有SSL的Web应用程序时，从登录到注销的整个会话过程中都要使用SSL，而不仅仅是在初始登录页面上使用。",
                    "Description_Merged": "在使用带有SSL的Web应用程序时，从登录到注销的整个会话过程中都要使用SSL，而不仅仅是在初始登录页面上使用。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在设计硬件平台时，确保批准的加密算法（例如NIST推荐的算法）保护从安全关键数据到受信任的用户应用程序的路径。",
                    "Description_Merged": "在设计硬件平台时，确保批准的加密算法（例如NIST推荐的算法）保护从安全关键数据到受信任的用户应用程序的路径。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Description_Merged": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "操作",
                    "Description": "配置服务器使用加密通道进行通信，这可能包括SSL或其他安全协议。",
                    "Description_Merged": "配置服务器使用加密通道进行通信，这可能包括SSL或其他安全协议。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "321",
        "Name": "Use of Hard-coded Cryptographic Key",
        "Description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Prevention schemes mirror that of hard-coded password storage.",
                    "Description_Merged": "Prevention schemes mirror that of hard-coded password storage.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "硬编码加密密钥的使用极大增加了恢复加密数据的可能性。",
        "Name_ZH": "使用硬编码的加密密钥",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "预防方案与硬编码密码存储类似。",
                    "Description_Merged": "预防方案与硬编码密码存储类似。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "322",
        "Name": "Key Exchange without Entity Authentication",
        "Description": "The product performs a key exchange with an actor without verifying the identity of that actor.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that proper authentication is included in the system design.",
                    "Description_Merged": "Ensure that proper authentication is included in the system design.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
                    "Description_Merged": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品与参与者进行密钥交换时未验证其身份。",
        "Name_ZH": "没有实体认证的密钥交换",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保系统设计中包含适当的身份验证机制。",
                    "Description_Merged": "确保系统设计中包含适当的身份验证机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "理解并正确实施所有必要的检查来确保加密通信中涉及的实体的身份。",
                    "Description_Merged": "理解并正确实施所有必要的检查来确保加密通信中涉及的实体的身份。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "323",
        "Name": "Reusing a Nonce, Key Pair in Encryption",
        "Description": "Nonces should be used for the present occasion and only once.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Refuse to reuse nonce values.",
                    "Description_Merged": "Refuse to reuse nonce values.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
                    "Description_Merged": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "应该为当前场合和仅此一次使用随机数。",
        "Name_ZH": "在加密中重复使用Nonce和密钥对",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "拒绝重用nonce值。",
                    "Description_Merged": "拒绝重用nonce值。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用诸如要求递增、基于时间和/或挑战响应等技术来确保nonce的唯一性。",
                    "Description_Merged": "使用诸如要求递增、基于时间和/或挑战响应等技术来确保nonce的唯一性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "324",
        "Name": "Use of a Key Past its Expiration Date",
        "Description": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
                    "Description_Merged": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个过期的加密密钥或密码，这显著降低了其安全性，增加了破解攻击该密钥的时间窗口。",
        "Name_ZH": "使用已过期的密钥",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在用户界面中要充分考虑，以便在密钥过期之前通知用户，并解释新密钥生成的重要性，并尽可能无痛地引导用户完成该过程。",
                    "Description_Merged": "在用户界面中要充分考虑，以便在密钥过期之前通知用户，并解释新密钥生成的重要性，并尽可能无痛地引导用户完成该过程。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "325",
        "Name": "Missing Cryptographic Step",
        "Description": "The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未实现一个密码算法中所需的步骤，导致加密强度低于算法所宣称的。",
        "Name_ZH": "缺少加密步骤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "326",
        "Name": "Inadequate Encryption Strength",
        "Description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an encryption scheme that is currently considered to be strong by experts in the field.",
                    "Description_Merged": "Use an encryption scheme that is currently considered to be strong by experts in the field.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个在理论上是可靠的加密方案来存储或传输敏感数据，但对所需的保护级别来说不够强大。",
        "Name_ZH": "加密强度不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用当前被领域专家认为强大的加密方案。",
                    "Description_Merged": "使用当前被领域专家认为强大的加密方案。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "327",
        "Name": "Use of a Broken or Risky Cryptographic Algorithm",
        "Description": "The product uses a broken or risky cryptographic algorithm or protocol.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-24",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.",
                            "For example, US government systems require FIPS 140-2 certification [REF-1192].",
                            "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.",
                            "Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]"
                        ]
                    },
                    "Description_Merged": "When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.\nFor example, US government systems require FIPS 140-2 certification [REF-1192].\nDo not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.\nPeriodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-52",
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.",
                    "Description_Merged": "Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nIndustry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Description_Merged": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个已被破解或存在风险的加密算法或协议。",
        "Name_ZH": "使用已破解或有风险的加密算法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-24",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "在需要存储或传输敏感数据时，使用强大且更新的加密算法对数据进行加密。选择一种经过专家认可的、目前被认为是强大的经过审查的算法，并使用经过充分测试的实现。与所有加密机制一样，源代码应该可供分析。",
                            "例如，美国政府系统要求FIPS 140-2认证[REF-1192]。",
                            "不要开发自定义或私有的加密算法。它们很可能会受到密码学专家已经深入了解的攻击的影响。逆向工程技术已经非常成熟。如果攻击者发现了算法的工作原理，它可能会被威胁到，因此特别脆弱。",
                            "定期确保加密技术没有过时。一些过去被认为需要计算一亿年时间才能破解的旧算法，现在可能在几天或几小时内就能被攻破。包括MD4、MD5、SHA1、DES等曾经被认为强大的算法。[REF-267]"
                        ]
                    },
                    "Description_Merged": "在需要存储或传输敏感数据时，使用强大且更新的加密算法对数据进行加密。选择一种经过专家认可的、目前被认为是强大的经过审查的算法，并使用经过充分测试的实现。与所有加密机制一样，源代码应该可供分析。\n例如，美国政府系统要求FIPS 140-2认证[REF-1192]。\n不要开发自定义或私有的加密算法。它们很可能会受到密码学专家已经深入了解的攻击的影响。逆向工程技术已经非常成熟。如果攻击者发现了算法的工作原理，它可能会被威胁到，因此特别脆弱。\n定期确保加密技术没有过时。一些过去被认为需要计算一亿年时间才能破解的旧算法，现在可能在几天或几小时内就能被攻破。包括MD4、MD5、SHA1、DES等曾经被认为强大的算法。[REF-267]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-52",
                    "Phase": "架构与设计",
                    "Description": "确保设计允许将一个加密算法替换为下一代或版本中的另一个算法。在可能的情况下，使用包装器使接口统一。这将使升级到更强大的算法更容易。对于硬件产品，应在知识产权（IP）级别设计产品，以便在硬件产品的下一代中将一个加密算法替换为另一个。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "确保设计允许将一个加密算法替换为下一代或版本中的另一个算法。在可能的情况下，使用包装器使接口统一。这将使升级到更强大的算法更容易。对于硬件产品，应在知识产权（IP）级别设计产品，以便在硬件产品的下一代中将一个加密算法替换为另一个。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "小心管理和保护加密密钥（参见CWE-320）。如果密钥可以被猜测或盗取，那么加密本身的强度是无关紧要的。",
                    "Description_Merged": "小心管理和保护加密密钥（参见CWE-320）。如果密钥可以被猜测或盗取，那么加密本身的强度是无关紧要的。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "行业标准的实现将节省开发时间，并且可能更有可能避免在实施加密算法过程中可能发生的错误。考虑使用ESAPI加密功能。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n行业标准的实现将节省开发时间，并且可能更有可能避免在实施加密算法过程中可能发生的错误。考虑使用ESAPI加密功能。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Description_Merged": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Phase_Merged": "实施 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "328",
        "Name": "Use of Weak Hash",
        "Description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.",
                            "Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.",
                            "Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个产生摘要（输出值）的算法，而该摘要不满足对哈希函数的安全期望，从而使对手可以合理确定原始输入（预像攻击），找到另一个可以产生相同摘要的输入（第二预像攻击），或找到多个输入其结果等于相同的摘要（生日攻击）。",
        "Name_ZH": "使用弱哈希算法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。",
                            "一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。",
                            "需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。\n一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。\n需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "329",
        "Name": "Generation of Predictable IV with CBC Mode",
        "Description": "The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
                    "Description_Merged": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在使用Cipher Block Chaining（CBC）模式的时候生成并使用可预测的初始向量（IV），导致在相同密钥下对算法进行字典攻击。",
        "Name_ZH": "在CBC模式下生成可预测的初始化向量",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "NIST推荐了两种用于CBC模式生成不可预测IV的方法[REF-1172]。第一种是随机生成IV。第二种方法是使用相同的密钥和密码器加密一个nonce，然后用于加密明文。在这种情况下，nonce必须是唯一的，但可以是可预测的，因为块密码将充当伪随机置换。",
                    "Description_Merged": "NIST推荐了两种用于CBC模式生成不可预测IV的方法[REF-1172]。第一种是随机生成IV。第二种方法是使用相同的密钥和密码器加密一个nonce，然后用于加密明文。在这种情况下，nonce必须是唯一的，但可以是可预测的，因为块密码将充当伪随机置换。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "330",
        "Name": "Use of Insufficiently Random Values",
        "Description": "The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.",
                            "In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.",
                            "Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number."
                        ]
                    },
                    "Description_Merged": "Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.\nIn general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.\nPseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.",
                    "Description_Merged": "Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Description_Merged": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品在安全环境中使用不足够随机的数字或值，这些环境依赖于不可预测的数字。",
        "Name_ZH": "使用不足够随机的值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用目前在该领域被专家认为安全的经过充分验证的算法，并选择具有足够长度种子的经过充分测试的实现。",
                            "通常情况下，如果一个伪随机数生成器没有被宣传为具有密码学安全性，则可能是一个统计性伪随机数生成器，不应在安全敏感的环境中使用。",
                            "如果生成器已知且种子可以被猜测，伪随机数生成器可以产生可预测的数字。使用256位种子作为生成“足够随机”的数字的良好起点。"
                        ]
                    },
                    "Description_Merged": "使用目前在该领域被专家认为安全的经过充分验证的算法，并选择具有足够长度种子的经过充分测试的实现。\n通常情况下，如果一个伪随机数生成器没有被宣传为具有密码学安全性，则可能是一个统计性伪随机数生成器，不应在安全敏感的环境中使用。\n如果生成器已知且种子可以被猜测，伪随机数生成器可以产生可预测的数字。使用256位种子作为生成“足够随机”的数字的良好起点。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "考虑使用能够根据高质量伪随机输出源（如硬件设备）根据需要重新种子的伪随机数生成器。",
                    "Description_Merged": "考虑使用能够根据高质量伪随机输出源（如硬件设备）根据需要重新种子的伪随机数生成器。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "测试",
                    "Description": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Description_Merged": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "331",
        "Name": "Insufficient Entropy",
        "Description": "The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.",
                    "Description_Merged": "Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个产生不足够熵的算法或方案，导致出现比其他值更容易发生的模式或集群。",
        "Name_ZH": "熵不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确定提供足够随机性和可预测性所需的熵的大小。这可以通过增加密钥和种子等对象的位数来实现。",
                    "Description_Merged": "确定提供足够随机性和可预测性所需的熵的大小。这可以通过增加密钥和种子等对象的位数来实现。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "332",
        "Name": "Insufficient Entropy in PRNG",
        "Description": "The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.",
                    "Description_Merged": "Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.",
                    "Description_Merged": "When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在伪随机数生成器（PRNG）可获得或使用的熵不足时，会对稳定性和安全性构成威胁。",
        "Name_ZH": "PRNG中的熵不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "实施",
                    "Description": "考虑使用能够根据高质量伪随机输出（如硬件设备）根据需要重新种子的伪随机数生成器。",
                    "Description_Merged": "考虑使用能够根据高质量伪随机输出（如硬件设备）根据需要重新种子的伪随机数生成器。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在选择使用哪种伪随机数生成器（PRNG）时，要考虑其熵源。根据您的安全需求，您可能需要使用总是使用强随机数据的随机数生成器，即尝试提供强随机性但可能在某些弱方面失败或始终通过重新种子等技术提供一定程度的保护的随机数生成器。通常，总是提供可预测强度的解决方案更可取。",
                    "Description_Merged": "在选择使用哪种伪随机数生成器（PRNG）时，要考虑其熵源。根据您的安全需求，您可能需要使用总是使用强随机数据的随机数生成器，即尝试提供强随机性但可能在某些弱方面失败或始终通过重新种子等技术提供一定程度的保护的随机数生成器。通常，总是提供可预测强度的解决方案更可取。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "333",
        "Name": "Improper Handling of Insufficient Entropy in TRNG",
        "Description": "True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.",
                    "Description_Merged": "Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "真随机数生成器（TRNG）通常具有有限的熵源，因此可能会失败或阻塞。",
        "Name_ZH": "不正确处理TRNG中的熵不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "与其在缺乏随机数时发生错误，通常最好等待生成更多随机数。",
                    "Description_Merged": "与其在缺乏随机数时发生错误，通常最好等待生成更多随机数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "334",
        "Name": "Small Space of Random Values",
        "Description": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "可能的随机值数量小于产品所需，使其更容易受到暴力破解攻击的影响。",
        "Name_ZH": "随机值的空间较小",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "335",
        "Name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
        "Description": "The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了伪随机数生成器（PRNG），但没有正确管理种子。",
        "Name_ZH": "在伪随机数生成器（PRNG）中的种子使用不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "336",
        "Name": "Same Seed in Pseudo-Random Number Generator (PRNG)",
        "Description": "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.",
                    "Description_Merged": "Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "伪随机数生成器（PRNG）在每次初始化产品时使用相同的种子。",
        "Name_ZH": "在伪随机数生成器（PRNG）中使用相同的种子",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要重复使用PRNG种子。考虑使用定期从高质量伪随机输出（如硬件设备）中按需重新种子的PRNG。",
                    "Description_Merged": "不要重复使用PRNG种子。考虑使用定期从高质量伪随机输出（如硬件设备）中按需重新种子的PRNG。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "337",
        "Name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
        "Description": "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Use non-predictable inputs for seed generation.",
                    "Description_Merged": "Use non-predictable inputs for seed generation."
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "Implementation",
                    "Description": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Description_Merged": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "伪随机数生成器（PRNG）从可预测的种子（如进程ID或系统时间）初始化。",
        "Name_ZH": "在伪随机数生成器（PRNG）中使用可预测的种子",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "使用不可预测的输入来生成种子。",
                    "Description_Merged": "使用不可预测的输入来生成种子。"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "实施",
                    "Description": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Description_Merged": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "338",
        "Name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "Description": "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
                    "Description_Merged": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在安全环境中使用了伪随机数生成器（PRNG），但该PRNG的算法不具备密码学强度。",
        "Name_ZH": "使用加密弱的伪随机数生成器（PRNG）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用使用基于硬件的随机数生成的函数或硬件来进行所有加密。这是推荐的解决方案。在Windows上使用CryptGenRandom，在Linux上使用hw_rand()。",
                    "Description_Merged": "使用使用基于硬件的随机数生成的函数或硬件来进行所有加密。这是推荐的解决方案。在Windows上使用CryptGenRandom，在Linux上使用hw_rand()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "339",
        "Name": "Small Seed Space in PRNG",
        "Description": "A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.",
                    "Description_Merged": "Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "伪随机数生成器（PRNG）使用了相对较小的种子空间，使其更容易受到暴力破解攻击的影响。",
        "Name_ZH": "PRNG中种子空间较小",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用经过良好验证的伪随机数生成算法，并使用足够长度的种子。如果生成器已知且种子可以猜测，伪随机数生成器可能产生可预测的数值。使用256位种子作为生成“足够随机”的起点是一个好的选择。",
                    "Description_Merged": "使用经过良好验证的伪随机数生成算法，并使用足够长度的种子。如果生成器已知且种子可以猜测，伪随机数生成器可能产生可预测的数值。使用256位种子作为生成“足够随机”的起点是一个好的选择。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题，或者如果可能的话，使用更新的FIPS 140-3 [REF-1192]。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "340",
        "Name": "Generation of Predictable Numbers or Identifiers",
        "Description": "The product uses a scheme that generates numbers or identifiers that are more predictable than required.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了生成比所需更可预测的数字或标识符的方案。",
        "Name_ZH": "生成可预测的数字或标识符",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "341",
        "Name": "Predictable from Observable State",
        "Description": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Increase the entropy used to seed a PRNG.",
                    "Description_Merged": "Increase the entropy used to seed a PRNG.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "Implementation",
                    "Description": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Description_Merged": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "基于攻击者对系统或网络状态的观察（例如时间、进程ID等），某个数字或对象是可预测的。",
        "Name_ZH": "根据可观察状态可预测",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "增加用于种子生成的熵。",
                    "Description_Merged": "增加用于种子生成的熵。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "实施",
                    "Description": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Description_Merged": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "342",
        "Name": "Predictable Exact Value from Previous Values",
        "Description": "An exact value or random number can be precisely predicted by observing previous values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Increase the entropy used to seed a PRNG.",
                    "Description_Merged": "Increase the entropy used to seed a PRNG."
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "Implementation",
                    "Description": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Description_Merged": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "通过观察先前的值，可以精确预测一个确切的值或随机数。",
        "Name_ZH": "根据先前值可预测的确切值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "增加用于种子生成的熵。",
                    "Description_Merged": "增加用于种子生成的熵。"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "实施",
                    "Description": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Description_Merged": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "343",
        "Name": "Predictable Value Range from Previous Values",
        "Description": "The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Description": "Increase the entropy used to seed a PRNG.",
                    "Description_Merged": "Increase the entropy used to seed a PRNG."
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Description_Merged": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
                    "Phase_Merged": "Architecture and Design / Requirements",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "Implementation",
                    "Description": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Description_Merged": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品的随机数生成器产生一系列值，当被观察时，可以推断出下一个可能生成的值的相对较小的范围。",
        "Name_ZH": "根据先前值可预测的值范围",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Description": "增加用于种子生成的熵。",
                    "Description_Merged": "增加用于种子生成的熵。"
                },
                {
                    "@_Mitigation_ID": "MIT-2",
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Strategy": "库或框架",
                    "Description": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Description_Merged": "使用符合FIPS 140-2 [REF-267]的产品或模块，以避免明显的熵问题。请参考FIPS 140-2附录C（“已批准的随机数生成器”）。",
                    "Phase_Merged": "架构与设计 / 需求",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-50",
                    "Phase": "实施",
                    "Description": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Description_Merged": "使用定期使用来自高熵硬件设备等高质量源的输入进行重新种子的PRNG。但是，不要过于频繁地重新种子，否则熵源可能会被阻塞。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "344",
        "Name": "Use of Invariant Value in Dynamically Changing Context",
        "Description": "The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了一个常量值、名称或引用，但这个值在不同环境下可以（或者应该）变化。",
        "Name_ZH": "在动态变化的上下文中使用不变值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "345",
        "Name": "Insufficient Verification of Data Authenticity",
        "Description": "The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有充分验证数据的来源或真实性，导致接受了无效数据。",
        "Name_ZH": "不充分验证数据的真实性",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "346",
        "Name": "Origin Validation Error",
        "Description": "The product does not properly verify that the source of data or communication is valid.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有正确验证数据或通信的来源是否有效。",
        "Name_ZH": "源验证错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "347",
        "Name": "Improper Verification of Cryptographic Signature",
        "Description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有验证或错误地验证了数据的加密签名。",
        "Name_ZH": "不正确验证加密签名",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "348",
        "Name": "Use of Less Trusted Source",
        "Description": "The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品存在两个相同数据或信息的来源，但它使用的来源对验证的支持较少、不太可信或较不抵抗攻击。",
        "Name_ZH": "使用较不可信的来源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "349",
        "Name": "Acceptance of Extraneous Untrusted Data With Trusted Data",
        "Description": "The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在处理可信数据时，接受了任何与可信数据一起包含的不可信数据，并将不可信数据视为可信数据。",
        "Name_ZH": "接受可信数据外的多余不可信数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "350",
        "Name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
        "Description": "The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Description_Merged": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-42",
                    "Phase": "Implementation",
                    "Description": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
                    "Description_Merged": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品对IP地址执行反向DNS解析以获取主机名并做出安全决策，但没有正确确保IP地址真正与主机名关联。",
        "Name_ZH": "依赖反向DNS解析进行安全关键操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用其他无法简单伪造的身份验证手段。可能的方式包括用户名/密码或证书。",
                    "Description_Merged": "使用其他无法简单伪造的身份验证手段。可能的方式包括用户名/密码或证书。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-42",
                    "Phase": "实施",
                    "Description": "执行正确的正向和反向DNS查找以检测DNS欺骗。",
                    "Description_Merged": "执行正确的正向和反向DNS查找以检测DNS欺骗。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "351",
        "Name": "Insufficient Type Distinction",
        "Description": "The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有正确区分不同类型的元素，导致不安全的行为。",
        "Name_ZH": "类型区分不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "352",
        "Name": "Cross-Site Request Forgery (CSRF)",
        "Description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]",
                            "Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]"
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]\nAnother example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
                    "Description_Merged": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use the \"double-submitted cookie\" method as described by Felten and Zeller:",
                            "When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.",
                            "Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.",
                            "This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]"
                        ]
                    },
                    "Effectiveness_Notes": "Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.",
                    "Description_Merged": "Use the \"double-submitted cookie\" method as described by Felten and Zeller:\nWhen a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.\nBecause of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.\nThis technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use the GET method for any request that triggers a state change.",
                    "Description_Merged": "Do not use the GET method for any request that triggers a state change.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.",
                    "Description_Merged": "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "Web应用程序无法充分验证是否意图提供了一个格式良好、有效且一致的请求。",
        "Name_ZH": "跨站请求伪造（CSRF）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，使用OWASP CSRFGuard等反CSRF包。[REF-330]",
                            "另一个例子是ESAPI Session Management控件，其中包括一个用于CSRF的组件。[REF-45]"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，使用OWASP CSRFGuard等反CSRF包。[REF-330]\n另一个例子是ESAPI Session Management控件，其中包括一个用于CSRF的组件。[REF-45]",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "实施",
                    "Description": "确保应用程序没有跨站脚本攻击问题（CWE-79），因为大多数CSRF防御措施可以通过攻击者控制的脚本绕过。",
                    "Description_Merged": "确保应用程序没有跨站脚本攻击问题（CWE-79），因为大多数CSRF防御措施可以通过攻击者控制的脚本绕过。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "为每个表单生成一个唯一的随机数，将随机数放入表单，并在接收到表单时验证该随机数。确保随机数是不可预测的（CWE-330）。[REF-332]",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "为每个表单生成一个唯一的随机数，将随机数放入表单，并在接收到表单时验证该随机数。确保随机数是不可预测的（CWE-330）。[REF-332]",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "识别特别危险的操作。当用户执行危险操作时，发送一个单独的确认请求，以确保用户有意执行该操作。",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "识别特别危险的操作。当用户执行危险操作时，发送一个单独的确认请求，以确保用户有意执行该操作。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用Felten和Zeller描述的“双重提交Cookie”方法：",
                            "当用户访问站点时，站点应生成一个伪随机值，并将其设置为用户机器上的Cookie。站点应要求每个表单提交都包含这个值作为表单值和Cookie值。当发送POST请求到站点时，只有当表单值和Cookie值相同时，请求才被视为有效。",
                            "由于同源策略，攻击者无法读取或修改存储在Cookie中的值。要成功代表用户提交表单，攻击者必须正确猜测伪随机值。如果伪随机值是密码学强度的，这将是极其困难的。",
                            "这种技术需要使用Javascript，因此在禁用了Javascript的浏览器上可能无法正常工作。[REF-331]"
                        ]
                    },
                    "Effectiveness_Notes": "Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.",
                    "Description_Merged": "使用Felten和Zeller描述的“双重提交Cookie”方法：\n当用户访问站点时，站点应生成一个伪随机值，并将其设置为用户机器上的Cookie。站点应要求每个表单提交都包含这个值作为表单值和Cookie值。当发送POST请求到站点时，只有当表单值和Cookie值相同时，请求才被视为有效。\n由于同源策略，攻击者无法读取或修改存储在Cookie中的值。要成功代表用户提交表单，攻击者必须正确猜测伪随机值。如果伪随机值是密码学强度的，这将是极其困难的。\n这种技术需要使用Javascript，因此在禁用了Javascript的浏览器上可能无法正常工作。[REF-331]",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要对任何触发状态改变的请求使用GET方法。",
                    "Description_Merged": "不要对任何触发状态改变的请求使用GET方法。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "检查HTTP Referer头部，以确认请求是否来自预期的页面。这可能会破坏合法的功能，因为用户或代理可能为了隐私原因禁用了发送Referer。",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.",
                    "Description_Merged": "检查HTTP Referer头部，以确认请求是否来自预期的页面。这可能会破坏合法的功能，因为用户或代理可能为了隐私原因禁用了发送Referer。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "353",
        "Name": "Missing Support for Integrity Check",
        "Description": "The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
                    "Description_Merged": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
                    "Description_Merged": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一种传输协议，该协议在传输过程中没有包含验证数据完整性的机制，例如校验和。",
        "Name_ZH": "不支持完整性检查",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在协议中添加适当大小的校验和，确保在解析和使用数据之前可以简单验证接收到的数据。",
                    "Description_Merged": "在协议中添加适当大小的校验和，确保在解析和使用数据之前可以简单验证接收到的数据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保协议设计中的校验和被正确实现，并在每个消息发送之前添加。",
                    "Description_Merged": "确保协议设计中的校验和被正确实现，并在每个消息发送之前添加。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "354",
        "Name": "Improper Validation of Integrity Check Value",
        "Description": "The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
                    "Description_Merged": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品不验证或不正确验证消息的完整性检查值或“校验和”。这可能导致它无法检测到数据在传输过程中是否被修改或损坏。",
        "Name_ZH": "未正确验证完整性检查值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保根据协议规范在解析和使用消息之前正确检查消息中的校验和。",
                    "Description_Merged": "确保根据协议规范在解析和使用消息之前正确检查消息中的校验和。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "356",
        "Name": "Product UI does not Warn User of Unsafe Actions",
        "Description": "The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品的用户界面在代表用户进行不安全操作之前没有警告用户。这使得攻击者更容易欺骗用户对其系统造成损害。",
        "Name_ZH": "产品界面不警告用户进行不安全操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "357",
        "Name": "Insufficient UI Warning of Dangerous Operations",
        "Description": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "用户界面提供了有关危险或敏感操作的警告，但警告不够显眼以引起注意。",
        "Name_ZH": "界面警告不足以对危险操作进行警示",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "358",
        "Name": "Improperly Implemented Security Check for Standard",
        "Description": "The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未实现或不正确实现一个或多个安全相关检查，如标准算法、协议或技术的设计所规定。",
        "Name_ZH": "标准的安全检查实现不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "359",
        "Name": "Exposure of Private Personal Information to an Unauthorized Actor",
        "Description": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": {
                        "p": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others."
                    },
                    "Description_Merged": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted."
                    },
                    "Description_Merged": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品未能有效防止未经明确授权或未经被收集信息人的隐含同意的参与者访问个人私密信息。",
        "Name_ZH": "未经授权将个人私密信息暴露给第三方",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": {
                        "p": "识别并咨询与个人隐私相关的所有相关法规。根据组织所在地、业务类型和处理的私人数据性质，该组织可能需要遵守某些联邦和州法规。法规可能包括Safe Harbor隐私框架[REF-340]、Gramm-Leach Bliley法案(GLBA)[REF-341]、健康保险可携带性和责任法案(HIPAA)[REF-342]、通用数据保护条例(GDPR)[REF-1047]、加利福尼亚消费者隐私法(CCPA)[REF-1048]等等。"
                    },
                    "Description_Merged": "识别并咨询与个人隐私相关的所有相关法规。根据组织所在地、业务类型和处理的私人数据性质，该组织可能需要遵守某些联邦和州法规。法规可能包括Safe Harbor隐私框架[REF-340]、Gramm-Leach Bliley法案(GLBA)[REF-341]、健康保险可携带性和责任法案(HIPAA)[REF-342]、通用数据保护条例(GDPR)[REF-1047]、加利福尼亚消费者隐私法(CCPA)[REF-1048]等等。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "仔细评估安全设计如何干扰隐私，反之亦然。安全和隐私问题常常相互竞争。从安全角度来看，应记录所有重要操作，以便稍后可以识别任何异常活动。然而，当涉及私人数据时，实际上这种做法可能会带来风险。虽然私人数据可能以许多不安全的方式处理，但常见的风险源于信任的误置。程序员通常相信程序运行的操作环境，因此认为将私人信息存储在文件系统、注册表或其他本地可控资源中是可以接受的。然而，即使对某些资源的访问受到限制，也不能保证那些有访问权限的人是可信任的。"
                    },
                    "Description_Merged": "仔细评估安全设计如何干扰隐私，反之亦然。安全和隐私问题常常相互竞争。从安全角度来看，应记录所有重要操作，以便稍后可以识别任何异常活动。然而，当涉及私人数据时，实际上这种做法可能会带来风险。虽然私人数据可能以许多不安全的方式处理，但常见的风险源于信任的误置。程序员通常相信程序运行的操作环境，因此认为将私人信息存储在文件系统、注册表或其他本地可控资源中是可以接受的。然而，即使对某些资源的访问受到限制，也不能保证那些有访问权限的人是可信任的。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "360",
        "Name": "Trust of System Event Data",
        "Description": "Security based on event locations are insecure and can be spoofed.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Never trust or rely any of the information in an Event for security.",
                    "Description_Merged": "Never trust or rely any of the information in an Event for security.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "基于事件位置的安全性是不安全的，并且可以被欺骗。",
        "Name_ZH": "对系统事件数据的信任",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要相信或依赖事件中的任何信息来进行安全处理。",
                    "Description_Merged": "不要相信或依赖事件中的任何信息来进行安全处理。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "362",
        "Name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
        "Description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.",
                    "Description_Merged": "In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use thread-safe capabilities such as the data access abstraction in Spring.",
                    "Description_Merged": "Use thread-safe capabilities such as the data access abstraction in Spring.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.",
                            "Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400)."
                        ]
                    },
                    "Description_Merged": "Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.\nAdditionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When using multithreading and operating on shared variables, only use thread-safe functions.",
                    "Description_Merged": "When using multithreading and operating on shared variables, only use thread-safe functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.",
                    "Description_Merged": "Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.",
                    "Description_Merged": "Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.",
                    "Description_Merged": "Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
                    "Description_Merged": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.",
                    "Description_Merged": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                }
            ]
        },
        "Description_ZH": "该产品包含一个代码序列，可以与其他代码并发运行，并且代码序列需要对共享资源进行临时独占访问，但存在一个时间窗口，另一个并发运行的代码序列可以修改共享资源。",
        "Name_ZH": "使用不正确的同步方式进行共享资源的并发执行（竞争条件）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在支持的编程语言中使用同步原语。只在关键代码周围使用这些原语，以最小化对性能的影响。",
                    "Description_Merged": "在支持的编程语言中使用同步原语。只在关键代码周围使用这些原语，以最小化对性能的影响。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用Spring中的数据访问抽象等线程安全的能力。",
                    "Description_Merged": "使用Spring中的数据访问抽象等线程安全的能力。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "尽量减少共享资源的使用，以从控制流中尽可能减少复杂性，减少意外情况发生的可能性。",
                            "此外，这将减少所需的同步量，甚至有助于减少拒绝服务的可能性，其中攻击者可能能够重复触发关键部分（CWE-400）。"
                        ]
                    },
                    "Description_Merged": "尽量减少共享资源的使用，以从控制流中尽可能减少复杂性，减少意外情况发生的可能性。\n此外，这将减少所需的同步量，甚至有助于减少拒绝服务的可能性，其中攻击者可能能够重复触发关键部分（CWE-400）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在使用多线程并操作共享变量时，只使用线程安全的函数。",
                    "Description_Merged": "在使用多线程并操作共享变量时，只使用线程安全的函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对共享变量使用原子操作。要警惕看似无害的结构，如\"x++\"。在代码层面上它可能是原子的，但在指令层面上实际上是非原子的，因为它涉及读取、计算和写入。",
                    "Description_Merged": "对共享变量使用原子操作。要警惕看似无害的结构，如\"x++\"。在代码层面上它可能是原子的，但在指令层面上实际上是非原子的，因为它涉及读取、计算和写入。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果可用，使用互斥锁，但要注意避免相关的弱点，比如CWE-412。",
                    "Description_Merged": "如果可用，使用互斥锁，但要注意避免相关的弱点，比如CWE-412。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免双重检查锁定（CWE-609）和其他在尝试避免同步开销时出现的实现错误。",
                    "Description_Merged": "避免双重检查锁定（CWE-609）和其他在尝试避免同步开销时出现的实现错误。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在代码的关键部分禁用中断或信号，但也要确保代码不会进入大型或无限循环。",
                    "Description_Merged": "在代码的关键部分禁用中断或信号，但也要确保代码不会进入大型或无限循环。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于关键变量，使用volatile类型修饰符以避免意外的编译器优化或重新排序。这并不一定解决同步问题，但可以帮助。",
                    "Description_Merged": "对于关键变量，使用volatile类型修饰符以避免意外的编译器优化或重新排序。这并不一定解决同步问题，但可以帮助。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                }
            ]
        }
    },
    {
        "ID": "363",
        "Name": "Race Condition Enabling Link Following",
        "Description": "The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在访问文件或目录之前检查其状态，导致产生竞争条件，在访问执行之前，文件可以被链接替换，从而导致产品访问错误的文件。",
        "Name_ZH": "竞争条件导致链接跟随",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "364",
        "Name": "Signal Handler Race Condition",
        "Description": "The product uses a signal handler that introduces a race condition.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.",
                    "Description_Merged": "Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.",
                    "Description_Merged": "Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用的信号处理程序引入了竞争条件。",
        "Name_ZH": "信号处理程序竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计信号处理程序只设置标志，而不执行复杂功能。然后可以在主程序循环中检查和处理这些标志。",
                    "Description_Merged": "设计信号处理程序只设置标志，而不执行复杂功能。然后可以在主程序循环中检查和处理这些标志。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在信号处理程序中只使用可重入函数。同时，使用验证确保在执行影响执行状态的异步操作时状态保持一致。",
                    "Description_Merged": "在信号处理程序中只使用可重入函数。同时，使用验证确保在执行影响执行状态的异步操作时状态保持一致。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "365",
        "Name": "DEPRECATED: Race Condition in Switch",
        "Description": "This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用。没有记录的情况表明开关的控制表达式被评估超过一次。",
        "Name_ZH": "已废弃：开关中的竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "366",
        "Name": "Race Condition within a Thread",
        "Description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
                    "Description_Merged": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
                    "Description_Merged": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "如果两个执行线程同时使用一个资源，就存在资源在无效状态下被使用的可能性，从而导致执行状态不确定。",
        "Name_ZH": "线程中的竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用锁定功能。这是推荐的解决方案。在多线程环境中，围绕修改或读取持久数据的代码实现某种形式的锁定机制。",
                    "Description_Merged": "使用锁定功能。这是推荐的解决方案。在多线程环境中，围绕修改或读取持久数据的代码实现某种形式的锁定机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "创建资源锁定验证检查。如果没有固有的锁定机制，当资源被其他执行线程使用时，使用标志和信号来强制执行自己的阻塞方案。",
                    "Description_Merged": "创建资源锁定验证检查。如果没有固有的锁定机制，当资源被其他执行线程使用时，使用标志和信号来强制执行自己的阻塞方案。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "367",
        "Name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
        "Description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.",
                    "Description_Merged": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.",
                    "Description_Merged": "When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Limit the interleaving of operations on files from multiple processes.",
                    "Description_Merged": "Limit the interleaving of operations on files from multiple processes.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.",
                    "Description_Merged": "If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Recheck the resource after the use call to verify that the action was taken appropriately.",
                    "Description_Merged": "Recheck the resource after the use call to verify that the action was taken appropriately.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that some environmental locking mechanism can be used to protect resources effectively.",
                    "Description_Merged": "Ensure that some environmental locking mechanism can be used to protect resources effectively.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.",
                    "Description_Merged": "Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在使用资源之前会检查其状态，但是资源的状态可能在检查和使用之间发生变化，从而使检查结果无效。这可能导致产品在资源处于意外状态时执行无效操作。",
        "Name_ZH": "时序检查-时序使用（TOCTOU）竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "对于TOCTOU漏洞的最基本建议是，在使用之前不要进行检查。这并不能解决在无法确保资源状态和身份的情况下执行功能的根本问题，但可以帮助限制检查给出的虚假安全感。",
                    "Description_Merged": "对于TOCTOU漏洞的最基本建议是，在使用之前不要进行检查。这并不能解决在无法确保资源状态和身份的情况下执行功能的根本问题，但可以帮助限制检查给出的虚假安全感。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "当被更改的文件由当前用户和组拥有时，在执行此语句时将有效的gid和uid设置为当前用户和组的gid和uid。",
                    "Description_Merged": "当被更改的文件由当前用户和组拥有时，在执行此语句时将有效的gid和uid设置为当前用户和组的gid和uid。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "限制多个进程对文件的操作交错进行。",
                    "Description_Merged": "限制多个进程对文件的操作交错进行。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "如果无法原子地执行操作，并且必须在多个进程或线程之间共享对资源的访问权限，则尽量限制检查和使用资源之间的时间（CPU周期）。这并不能解决问题，但可能使攻击更加困难。",
                    "Description_Merged": "如果无法原子地执行操作，并且必须在多个进程或线程之间共享对资源的访问权限，则尽量限制检查和使用资源之间的时间（CPU周期）。这并不能解决问题，但可能使攻击更加困难。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在使用调用之后重新检查资源，以验证是否已正确执行操作。",
                    "Description_Merged": "在使用调用之后重新检查资源，以验证是否已正确执行操作。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保可以使用某种环境锁定机制有效地保护资源。",
                    "Description_Merged": "确保可以使用某种环境锁定机制有效地保护资源。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保锁定在检查之前发生，而不是之后，以使检查时的资源与使用时的资源相同。",
                    "Description_Merged": "确保锁定在检查之前发生，而不是之后，以使检查时的资源与使用时的资源相同。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "368",
        "Name": "Context Switching Race Condition",
        "Description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品执行一系列非原子操作以在特权或其他安全边界之间切换上下文，但是竞态条件允许攻击者在切换期间修改或歪曲产品的行为。",
        "Name_ZH": "上下文切换竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "369",
        "Name": "Divide By Zero",
        "Description": "The product divides a value by zero.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品将一个值除以零。",
        "Name_ZH": "除零错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "370",
        "Name": "Missing Check for Certificate Revocation after Initial Check",
        "Description": "The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.",
                    "Description_Merged": "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品在初始撤销检查后不会检查证书的吊销状态，这可能导致产品在以后的某个时间撤销证书后仍执行特权操作。",
        "Name_ZH": "初始检查后缺少证书吊销检查",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保在每次使用受保护资源之前检查证书的吊销状态。如果在访问受保护资源之前每次都检查证书，可能存在的竞态条件的延迟几乎可以忽略不计，并显著降低与此问题相关的风险。",
                    "Description_Merged": "确保在每次使用受保护资源之前检查证书的吊销状态。如果在访问受保护资源之前每次都检查证书，可能存在的竞态条件的延迟几乎可以忽略不计，并显著降低与此问题相关的风险。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "372",
        "Name": "Incomplete Internal State Distinction",
        "Description": "The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品无法正确确定自身处于哪个状态，导致它假设自己处于状态X，而实际上处于状态Y，从而以一种与安全相关的方式执行错误操作。",
        "Name_ZH": "不完整的内部状态区分",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "373",
        "Name": "DEPRECATED: State Synchronization Error",
        "Description": "This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被弃用，因为它与竞态条件（CWE-362）和不正确的同步（CWE-662）存在重叠概念。",
        "Name_ZH": "已废弃：状态同步错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "374",
        "Name": "Passing Mutable Objects to an Untrusted Method",
        "Description": "The product sends non-cloned mutable data as an argument to a method or function.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Pass in data which should not be altered as constant or immutable.",
                    "Description_Merged": "Pass in data which should not be altered as constant or immutable.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
                    "Description_Merged": "Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品将非克隆的可变数据作为参数传递给方法或函数。",
        "Name_ZH": "将可变对象传递给不可信任的方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将不应更改的数据作为常量或不可变量传入。",
                    "Description_Merged": "将不应更改的数据作为常量或不可变量传入。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "将所有可变数据在传递给外部函数之前进行克隆。这是首选的缓解措施。这样，无论对数据做了什么更改，都会保留一个可用的副本供类使用。",
                    "Description_Merged": "将所有可变数据在传递给外部函数之前进行克隆。这是首选的缓解措施。这样，无论对数据做了什么更改，都会保留一个可用的副本供类使用。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "375",
        "Name": "Returning a Mutable Object to an Untrusted Caller",
        "Description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Declare returned data which should not be altered as constant or immutable.",
                    "Description_Merged": "Declare returned data which should not be altered as constant or immutable.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
                    "Description_Merged": "Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "将非克隆的可变数据作为返回值发送可能导致调用函数对该数据进行修改或删除。",
        "Name_ZH": "将可变对象返回给不可信任的调用方",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将不应更改的返回数据声明为常量或不可变。",
                    "Description_Merged": "将不应更改的返回数据声明为常量或不可变。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在返回对可变数据的引用之前进行克隆。这是首选的缓解措施。这样，无论对数据做了什么更改，都会保留一个可用的副本供类使用。",
                    "Description_Merged": "在返回对可变数据的引用之前进行克隆。这是首选的缓解措施。这样，无论对数据做了什么更改，都会保留一个可用的副本供类使用。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "377",
        "Name": "Insecure Temporary File",
        "Description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "创建和使用不安全的临时文件可能会使应用程序和系统数据容易受到攻击。",
        "Name_ZH": "不安全的临时文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "378",
        "Name": "Creation of Temporary File With Insecure Permissions",
        "Description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
                    "Description_Merged": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.",
                    "Description_Merged": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.",
                    "Description_Merged": "Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "未采取适当措施或控制的情况下打开临时文件可能会导致文件、其内容以及受其影响的任何功能容易受到攻击。",
        "Name_ZH": "以不安全权限创建临时文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "许多现代语言都有适当处理这种情况的函数。旧的C临时文件函数尤其容易受到攻击。",
                    "Description_Merged": "许多现代语言都有适当处理这种情况的函数。旧的C临时文件函数尤其容易受到攻击。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "确保使用适当的文件权限。可以通过使用安全的临时文件函数来实现。临时文件应只允许拥有文件的进程进行写入和读取。",
                    "Description_Merged": "确保使用适当的文件权限。可以通过使用安全的临时文件函数来实现。临时文件应只允许拥有文件的进程进行写入和读取。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "随机化临时文件名。这也可以通过使用安全的临时文件函数实现。这将确保临时文件不会在可预测的位置创建。",
                    "Description_Merged": "随机化临时文件名。这也可以通过使用安全的临时文件函数实现。这将确保临时文件不会在可预测的位置创建。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "379",
        "Name": "Creation of Temporary File in Directory with Insecure Permissions",
        "Description": "The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
                    "Description_Merged": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
                    "Description_Merged": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid using vulnerable temp file functions.",
                    "Description_Merged": "Avoid using vulnerable temp file functions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在权限允许意外操作者确定文件存在或以其他方式访问该文件的目录中创建临时文件。",
        "Name_ZH": "在权限不安全的目录中创建临时文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "许多现代语言都有适当处理这种情况的函数。旧的C临时文件函数尤其容易受到攻击。",
                    "Description_Merged": "许多现代语言都有适当处理这种情况的函数。旧的C临时文件函数尤其容易受到攻击。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "尝试将敏感的临时文件存储在不可被世界读取的目录中，例如每个用户的目录。",
                    "Description_Merged": "尝试将敏感的临时文件存储在不可被世界读取的目录中，例如每个用户的目录。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免使用存在漏洞的临时文件函数。",
                    "Description_Merged": "避免使用存在漏洞的临时文件函数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "382",
        "Name": "J2EE Bad Practices: Use of System.exit()",
        "Description": "A J2EE application uses System.exit(), which also shuts down its container.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "The shutdown function should be a privileged function available only to a properly authorized administrative user",
                    "Description_Merged": "The shutdown function should be a privileged function available only to a properly authorized administrative user",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Web applications should not call methods that cause the virtual machine to exit, such as System.exit()",
                    "Description_Merged": "Web applications should not call methods that cause the virtual machine to exit, such as System.exit()",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Web applications should also not throw any Throwables to the application server as this may adversely affect the container.",
                    "Description_Merged": "Web applications should also not throw any Throwables to the application server as this may adversely affect the container.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code",
                    "Description_Merged": "Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "一个J2EE应用程序使用System.exit()，这也会关闭其容器。",
        "Name_ZH": "J2EE的不良实践：直接使用System.exit()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "关闭函数应该是仅供适当授权的管理员用户使用的特权函数。",
                    "Description_Merged": "关闭函数应该是仅供适当授权的管理员用户使用的特权函数。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "Phase": "实施",
                    "Description": "Web应用程序不应调用会导致虚拟机退出的方法，如System.exit()。",
                    "Description_Merged": "Web应用程序不应调用会导致虚拟机退出的方法，如System.exit()。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "Web应用程序也不应该向应用服务器抛出任何可抛出对象，因为这可能会对容器造成不利影响。",
                    "Description_Merged": "Web应用程序也不应该向应用服务器抛出任何可抛出对象，因为这可能会对容器造成不利影响。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "非Web应用程序可能会有一个包含System.exit()的main()方法，但通常不应从代码的其他位置调用System.exit()。",
                    "Description_Merged": "非Web应用程序可能会有一个包含System.exit()的main()方法，但通常不应从代码的其他位置调用System.exit()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "383",
        "Name": "J2EE Bad Practices: Direct Use of Threads",
        "Description": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "For EJB, use framework approaches for parallel execution, instead of using threads.",
                    "Description_Merged": "For EJB, use framework approaches for parallel execution, instead of using threads.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在某些情况下，禁止在Web应用程序中使用线程管理，而且这种做法总是容易出错。",
        "Name_ZH": "J2EE的不良实践：直接使用线程",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对于EJB，应使用框架方法来实现并行执行，而不是使用线程。",
                    "Description_Merged": "对于EJB，应使用框架方法来实现并行执行，而不是使用线程。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "384",
        "Name": "Session Fixation",
        "Description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Invalidate any existing session identifiers prior to authorizing a new user session.",
                    "Description_Merged": "Invalidate any existing session identifiers prior to authorizing a new user session.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
                    "Description_Merged": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在验证用户或建立新用户会话时，如果不使任何现有会话标识无效，攻击者有机会窃取已认证的会话。",
        "Name_ZH": "会话固定",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在授权新用户会话之前，应使任何现有的会话标识符失效。",
                    "Description_Merged": "在授权新用户会话之前，应使任何现有的会话标识符失效。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "对于不生成新的sessionid cookie的平台（如ASP），可以使用辅助cookie。在这种方法中，将一个辅助cookie设置为用户浏览器的随机值，并将一个会话变量设置为相同的值。如果会话变量和cookie值不匹配，就使会话失效，并强制用户重新登录。",
                    "Description_Merged": "对于不生成新的sessionid cookie的平台（如ASP），可以使用辅助cookie。在这种方法中，将一个辅助cookie设置为用户浏览器的随机值，并将一个会话变量设置为相同的值。如果会话变量和cookie值不匹配，就使会话失效，并强制用户重新登录。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "385",
        "Name": "Covert Timing Channel",
        "Description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Whenever possible, specify implementation strategies that do not introduce time variances in operations.",
                    "Description_Merged": "Whenever possible, specify implementation strategies that do not introduce time variances in operations.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.",
                    "Description_Merged": "Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.",
                    "Description_Merged": "It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "隐蔽时序信道通过随时间调节系统行为的某个方面来传递信息，以便接收信息的程序可以观察系统行为并推断出受保护的信息。",
        "Name_ZH": "隐蔽时间通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "尽可能指定不会引入操作时间差异的实现策略。",
                    "Description_Merged": "尽可能指定不会引入操作时间差异的实现策略。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "通常可以人为地操纵操作所需的时间，或者在操作发生时删除攻击者的信息。",
                    "Description_Merged": "通常可以人为地操纵操作所需的时间，或者在操作发生时删除攻击者的信息。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "合理地添加人为或随机的延迟，使消耗的CPU时间与应用程序的操作无关。",
                    "Description_Merged": "合理地添加人为或随机的延迟，使消耗的CPU时间与应用程序的操作无关。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "386",
        "Name": "Symbolic Name not Mapping to Correct Object",
        "Description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "尽管引用可以随时间解析为不同的对象，但使用对对象的常量符号引用。",
        "Name_ZH": "符号名称与正确对象不匹配",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "390",
        "Name": "Detection of Error Condition Without Action",
        "Description": "The product detects a specific error, but takes no actions to handle the error.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
                    "Description_Merged": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.",
                    "Description_Merged": "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.",
                    "Description_Merged": "Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品检测到特定错误，但没有采取任何措施来处理该错误。",
        "Name_ZH": "检测错误条件但不采取行动",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "正确处理每个异常。这是推荐的解决方案。确保以一种能够随时确定系统状态的方式处理所有异常。",
                    "Description_Merged": "正确处理每个异常。这是推荐的解决方案。确保以一种能够随时确定系统状态的方式处理所有异常。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果函数返回错误，重要的是要么修复问题并重试，要么向用户报告错误并让程序继续运行，要么向用户报告错误并关闭和清理程序。",
                    "Description_Merged": "如果函数返回错误，重要的是要么修复问题并重试，要么向用户报告错误并让程序继续运行，要么向用户报告错误并关闭和清理程序。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "对产品进行广泛测试，以发现错误或未处理返回值的可能情况。考虑使用诸如临时性、等价划分、鲁棒性和容错性、变异和模糊测试等测试技术。",
                    "Description_Merged": "对产品进行广泛测试，以发现错误或未处理返回值的可能情况。考虑使用诸如临时性、等价划分、鲁棒性和容错性、变异和模糊测试等测试技术。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "391",
        "Name": "Unchecked Error Condition",
        "Description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.",
                    "Description_Merged": "The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Requirements",
                    "Description": "A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.",
                    "Description_Merged": "A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
                    "Description_Merged": "Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "[计划停用，请参阅维护注释并考虑使用CWE-252、CWE-248或CWE-1069。] 忽略异常和其他错误条件可能会让攻击者在不被察觉的情况下引发意外行为。",
        "Name_ZH": "未经检查的错误条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "需要选择一种具有命名或未命名异常的语言。虽然未命名异常增加了未正确处理异常的可能性，但命名异常受到弱基类问题的影响。",
                    "Description_Merged": "需要选择一种具有命名或未命名异常的语言。虽然未命名异常增加了未正确处理异常的可能性，但命名异常受到弱基类问题的影响。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "需求",
                    "Description": "可以使用一种在编译时要求捕获所有严重异常的语言。然而，必须确保使用最新版本的API，因为可能会添加新的异常。",
                    "Description_Merged": "可以使用一种在编译时要求捕获所有严重异常的语言。然而，必须确保使用最新版本的API，因为可能会添加新的异常。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "捕获所有相关异常。这是推荐的解决方案。确保以一种可以确定系统状态的方式处理所有异常。",
                    "Description_Merged": "捕获所有相关异常。这是推荐的解决方案。确保以一种可以确定系统状态的方式处理所有异常。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "392",
        "Name": "Missing Report of Error Condition",
        "Description": "The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品遇到错误，但没有提供状态码或返回值来指示发生了错误。",
        "Name_ZH": "未报告错误条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "393",
        "Name": "Return of Wrong Status Code",
        "Description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个函数或操作返回了一个不正确的返回值或状态码，这个返回值并未指示错误，但导致产品根据错误的结果修改了其行为。",
        "Name_ZH": "返回错误的状态代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "394",
        "Name": "Unexpected Status Code or Return Value",
        "Description": "The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品在函数或操作返回一个对该函数来说是合法的但对产品来说并不符合预期的值时，没有进行适当的检查。",
        "Name_ZH": "意外的状态代码或返回值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "395",
        "Name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
        "Description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.",
                    "Description_Merged": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "捕获NullPointerException不应作为预防解引用空指针的编程检查的替代方法。",
        "Name_ZH": "使用NullPointerException捕获来检测NULL指针解引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "不要过度依赖捕获异常（特别是用于验证用户输入）来处理错误。处理异常可能会降低应用程序的性能。",
                    "Description_Merged": "不要过度依赖捕获异常（特别是用于验证用户输入）来处理错误。处理异常可能会降低应用程序的性能。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "396",
        "Name": "Declaration of Catch for Generic Exception",
        "Description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "捕获过于宽泛的异常会促使复杂的错误处理代码，这样更容易包含安全漏洞。",
        "Name_ZH": "声明通用异常的catch块",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "397",
        "Name": "Declaration of Throws for Generic Exception",
        "Description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "抛出过于宽泛的异常会促使复杂的错误处理代码，这样更容易包含安全漏洞。",
        "Name_ZH": "声明通用异常的throws块",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "400",
        "Name": "Uncontrolled Resource Consumption",
        "Description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
                    "Description_Merged": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Mitigation of resource exhaustion attacks requires that the target system either:",
                            "The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.",
                            "The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker."
                        ],
                        "ul": {
                            "li": [
                                "recognizes the attack and denies that user further access for a given amount of time, or",
                                "uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed."
                            ]
                        }
                    },
                    "Description_Merged": "Mitigation of resource exhaustion attacks requires that the target system either:\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.\nrecognizes the attack and denies that user further access for a given amount of time, or\nuniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that protocols have specific limits of scale placed on them.",
                    "Description_Merged": "Ensure that protocols have specific limits of scale placed on them.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all failures in resource allocation place the system into a safe posture.",
                    "Description_Merged": "Ensure that all failures in resource allocation place the system into a safe posture.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未能正确控制有限资源的分配和维护，从而使得攻击者能够影响所消耗的资源量，最终导致资源耗尽。",
        "Name_ZH": "资源消耗无法控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在系统架构中设计限流机制。最好的保护是限制未经授权的用户消耗的资源量。强大的身份验证和访问控制模型将有助于防止此类攻击的发生。登录应用程序应尽可能受到DoS攻击的保护。通过缓存结果集来限制数据库访问可以帮助减少资源消耗。为了进一步限制DoS攻击的可能性，考虑跟踪用户收到的请求速率，并阻止超过定义的速率阈值的请求。",
                    "Description_Merged": "在系统架构中设计限流机制。最好的保护是限制未经授权的用户消耗的资源量。强大的身份验证和访问控制模型将有助于防止此类攻击的发生。登录应用程序应尽可能受到DoS攻击的保护。通过缓存结果集来限制数据库访问可以帮助减少资源消耗。为了进一步限制DoS攻击的可能性，考虑跟踪用户收到的请求速率，并阻止超过定义的速率阈值的请求。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "缓解资源耗尽攻击需要目标系统实施以下解决方案之一：",
                            "第一种解决方案本身就是一个问题，因为它可能允许攻击者阻止特定有效用户使用系统。如果攻击者冒充有效用户，他们可能能够阻止用户访问所讨论的服务器。",
                            "第二种解决方案只是难以有效实施，即使正确执行，也不能提供完整的解决方案。它只是使攻击需要攻击者投入更多的资源。"
                        ],
                        "ul": {
                            "li": [
                                "识别攻击并在一定时间内拒绝该用户的进一步访问。",
                                "统一限制所有请求的速度，以使资源无法被快速消耗超过它们可以被释放的速度。"
                            ]
                        }
                    },
                    "Description_Merged": "缓解资源耗尽攻击需要目标系统实施以下解决方案之一：\n第一种解决方案本身就是一个问题，因为它可能允许攻击者阻止特定有效用户使用系统。如果攻击者冒充有效用户，他们可能能够阻止用户访问所讨论的服务器。\n第二种解决方案只是难以有效实施，即使正确执行，也不能提供完整的解决方案。它只是使攻击需要攻击者投入更多的资源。\n识别攻击并在一定时间内拒绝该用户的进一步访问。\n统一限制所有请求的速度，以使资源无法被快速消耗超过它们可以被释放的速度。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保协议在规模上有具体的限制。",
                    "Description_Merged": "确保协议在规模上有具体的限制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保所有资源分配的失败能将系统置于安全状态。",
                    "Description_Merged": "确保所有资源分配的失败能将系统置于安全状态。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "401",
        "Name": "Missing Release of Memory after Effective Lifetime",
        "Description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-41",
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.",
                            "For example, glibc in Linux provides protection against free of invalid pointers.",
                            "When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].",
                            "To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost."
                        ]
                    },
                    "Description_Merged": "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.\nFor example, glibc in Linux provides protection against free of invalid pointers.\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Build and Compilation"
                    ],
                    "Description": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
                    "Effectiveness_Notes": "This is not a complete solution as it is not 100% effective.",
                    "Description_Merged": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
                    "Phase_Merged": "Architecture and Design / Build and Compilation"
                }
            ]
        },
        "Description_ZH": "产品在使用完内存后未能充分跟踪和释放已分配的内存，从而逐渐消耗剩余内存。",
        "Name_ZH": "在有效生命周期结束后未释放内存",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-41",
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "选择一种提供自动内存管理或减少手动内存管理错误的语言或工具。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。",
                            "在使用Xcode针对OS X或iOS进行开发时，启用自动引用计数（ARC）[REF-391]。",
                            "在C++编程中，为了正确和一致地管理内存，考虑使用智能指针类，如std::auto_ptr（由ISO/IEC ISO/IEC 14882:2003定义），std::shared_ptr和std::unique_ptr（由即将发布的C++标准修订版规定，非正式称为C++ 1x），或者使用类似于Boost的等效解决方案。"
                        ]
                    },
                    "Description_Merged": "选择一种提供自动内存管理或减少手动内存管理错误的语言或工具。\n例如，Linux中的glibc提供了针对无效指针释放的保护。\n在使用Xcode针对OS X或iOS进行开发时，启用自动引用计数（ARC）[REF-391]。\n在C++编程中，为了正确和一致地管理内存，考虑使用智能指针类，如std::auto_ptr（由ISO/IEC ISO/IEC 14882:2003定义），std::shared_ptr和std::unique_ptr（由即将发布的C++标准修订版规定，非正式称为C++ 1x），或者使用类似于Boost的等效解决方案。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Description_Merged": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "构建和编译"
                    ],
                    "Description": "可以使用Boehm-Demers-Weiser垃圾收集器或valgrind来检测代码中的内存泄漏。",
                    "Effectiveness_Notes": "This is not a complete solution as it is not 100% effective.",
                    "Description_Merged": "可以使用Boehm-Demers-Weiser垃圾收集器或valgrind来检测代码中的内存泄漏。",
                    "Phase_Merged": "架构与设计 / 构建和编译"
                }
            ]
        }
    },
    {
        "ID": "402",
        "Name": "Transmission of Private Resources into a New Sphere ('Resource Leak')",
        "Description": "The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当资源只应由产品访问时，产品却将资源提供给不受信任的方。",
        "Name_ZH": "将私有资源传输到新领域（资源泄露）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "403",
        "Name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
        "Description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个进程在调用子进程之前没有关闭敏感文件描述符，这使得子进程可以使用这些描述符进行未授权的I/O操作。",
        "Name_ZH": "将文件描述符暴露给意外的控制领域（文件描述符泄露）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "404",
        "Name": "Improper Resource Shutdown or Release",
        "Description": "The product does not release or incorrectly releases a resource before it is made available for re-use.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Implementation",
                    "Description": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.",
                    "Description_Merged": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].",
                    "Description_Merged": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.",
                    "Description_Merged": "When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在重新使用之前未释放或不正确释放一个资源。",
        "Name_ZH": "不正确的资源关闭或释放",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，Java、Ruby和Lisp等语言执行自动垃圾回收，释放已被取消分配的对象的内存。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，Java、Ruby和Lisp等语言执行自动垃圾回收，释放已被取消分配的对象的内存。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "实施",
                    "Description": "负责释放所有分配的资源，并在函数中如何以及何处释放内存上保持一致，是良好的实践。如果你分配了在函数完成后要释放的内存，你必须确保在包括错误条件在内的所有函数出口点上释放内存。",
                    "Description_Merged": "负责释放所有分配的资源，并在函数中如何以及何处释放内存上保持一致，是良好的实践。如果你分配了在函数完成后要释放的内存，你必须确保在包括错误条件在内的所有函数出口点上释放内存。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "应使用匹配的函数（如malloc/free、new/delete和new[]/delete[]）来分配/释放内存。",
                    "Description_Merged": "应使用匹配的函数（如malloc/free、new/delete和new[]/delete[]）来分配/释放内存。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "释放复杂对象或结构时，确保正确处理其所有成员组件，而不仅仅是对象本身。",
                    "Description_Merged": "释放复杂对象或结构时，确保正确处理其所有成员组件，而不仅仅是对象本身。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "405",
        "Name": "Asymmetric Resource Consumption (Amplification)",
        "Description": "The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is \"asymmetric.\"",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "An application must make resources available to a client commensurate with the client's access level.",
                    "Description_Merged": "An application must make resources available to a client commensurate with the client's access level.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
                    "Description_Merged": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Consider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Business requirements may prevent disabling resource-intensive algorithms.",
                    "Description_Merged": "Consider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品在不要求对手投入等同工作或以其他方式证明授权的情况下，无法正确控制对产品消耗或产生过多资源的情况，即对手的影响是\"非对称\"的。",
        "Name_ZH": "不对称资源消耗（放大）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "应根据客户端的访问级别向客户端提供相应的资源。",
                    "Description_Merged": "应根据客户端的访问级别向客户端提供相应的资源。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "应始终跟踪已分配的资源并适当计量其使用情况。",
                    "Description_Merged": "应始终跟踪已分配的资源并适当计量其使用情况。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "系统配置",
                    "Description": "考虑在服务器端禁用资源密集型算法，例如Diffie-Hellman密钥交换。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Business requirements may prevent disabling resource-intensive algorithms.",
                    "Description_Merged": "考虑在服务器端禁用资源密集型算法，例如Diffie-Hellman密钥交换。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "406",
        "Name": "Insufficient Control of Network Message Volume (Network Amplification)",
        "Description": "The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "An application must make network resources available to a client commensurate with the client's access level.",
                    "Description_Merged": "An application must make network resources available to a client commensurate with the client's access level.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "Phase": "Policy",
                    "Description": "Define a clear policy for network resource allocation and consumption.",
                    "Description_Merged": "Define a clear policy for network resource allocation and consumption.",
                    "Phase_Merged": "Policy"
                },
                {
                    "Phase": "Implementation",
                    "Description": "An application must, at all times, keep track of network resources and meter their usage appropriately.",
                    "Description_Merged": "An application must, at all times, keep track of network resources and meter their usage appropriately.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品没有足够地监控或控制传输的网络流量，以至于一个行为者可以导致产品传输比该行为者应被允许的更多的流量。",
        "Name_ZH": "网络消息量控制不足（网络放大）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "应根据客户端的访问级别向客户端提供网络资源。",
                    "Description_Merged": "应根据客户端的访问级别向客户端提供网络资源。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "Phase": "策略",
                    "Description": "应明确定义网络资源分配和消耗的策略。",
                    "Description_Merged": "应明确定义网络资源分配和消耗的策略。",
                    "Phase_Merged": "策略"
                },
                {
                    "Phase": "实施",
                    "Description": "应始终跟踪网络资源并适当计量其使用情况。",
                    "Description_Merged": "应始终跟踪网络资源并适当计量其使用情况。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "407",
        "Name": "Inefficient Algorithmic Complexity",
        "Description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品中的算法在最坏情况下的计算复杂度效率不高，可能对系统性能有害，并且可以被攻击者触发，通常使用经过精心设计的操作来保证达到最坏情况。",
        "Name_ZH": "算法复杂度低效",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "408",
        "Name": "Incorrect Behavior Order: Early Amplification",
        "Description": "The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "在身份验证或授权之前，该产品允许实体执行一个合法但昂贵的操作。",
        "Name_ZH": "行为顺序错误：早期放大",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "409",
        "Name": "Improper Handling of Highly Compressed Data (Data Amplification)",
        "Description": "The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品无法处理或错误处理具有非常高压缩比且产生大量输出的压缩输入。",
        "Name_ZH": "对高度压缩数据的处理不当（数据放大）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "410",
        "Name": "Insufficient Resource Pool",
        "Description": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.",
                    "Description_Merged": "Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider implementing a velocity check mechanism which would detect abusive behavior.",
                    "Description_Merged": "Consider implementing a velocity check mechanism which would detect abusive behavior.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Operation",
                    "Description": "Consider load balancing as an option to handle heavy loads.",
                    "Description_Merged": "Consider load balancing as an option to handle heavy loads.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Make sure that resource handles are properly closed when no longer needed.",
                    "Description_Merged": "Make sure that resource handles are properly closed when no longer needed.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).",
                    "Description_Merged": "Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品的资源池不足以处理峰值需求，这使得攻击者可以通过使用大量的资源请求来阻止其他人访问资源。",
        "Name_ZH": "资源池不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要为未经身份验证的用户和/或无效请求执行资源密集型事务。",
                    "Description_Merged": "不要为未经身份验证的用户和/或无效请求执行资源密集型事务。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑实施速度检查机制以检测滥用行为。",
                    "Description_Merged": "考虑实施速度检查机制以检测滥用行为。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "操作",
                    "Description": "考虑使用负载均衡来处理重负荷。",
                    "Description_Merged": "考虑使用负载均衡来处理重负荷。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "实施",
                    "Description": "确保资源句柄在不再需要时被正确关闭。",
                    "Description_Merged": "确保资源句柄在不再需要时被正确关闭。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "识别系统的资源密集操作，并考虑保护它们免受滥用（例如，恶意自动脚本耗尽资源）。",
                    "Description_Merged": "识别系统的资源密集操作，并考虑保护它们免受滥用（例如，恶意自动脚本耗尽资源）。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "412",
        "Name": "Unrestricted Externally Accessible Lock",
        "Description": "The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Use any access control that is offered by the functionality that is offering the lock.",
                    "Description_Merged": "Use any access control that is offered by the functionality that is offering the lock.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
                    "Description_Merged": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider modifying your code to use non-blocking synchronization methods.",
                    "Description_Merged": "Consider modifying your code to use non-blocking synchronization methods.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品正确地检查锁的存在，但该锁可以被外部控制或受到意图之外的角色的影响。",
        "Name_ZH": "未受限的外部可访问锁",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "使用提供锁定功能的访问控制。",
                    "Description_Merged": "使用提供锁定功能的访问控制。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "使用不可预测的名称或标识符进行锁定。这可能并非总是可能或可行。",
                    "Description_Merged": "使用不可预测的名称或标识符进行锁定。这可能并非总是可能或可行。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑修改代码以使用非阻塞同步方法。",
                    "Description_Merged": "考虑修改代码以使用非阻塞同步方法。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "413",
        "Name": "Improper Resource Locking",
        "Description": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a non-conflicting privilege scheme.",
                    "Description_Merged": "Use a non-conflicting privilege scheme.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Use synchronization when locking a resource.",
                    "Description_Merged": "Use synchronization when locking a resource.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "当该产品必须对资源进行独占访问时，它没有对资源进行锁定或没有正确地锁定。",
        "Name_ZH": "资源锁定不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用不冲突的特权方案。",
                    "Description_Merged": "使用不冲突的特权方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在锁定资源时使用同步。",
                    "Description_Merged": "在锁定资源时使用同步。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "414",
        "Name": "Missing Lock Check",
        "Description": "A product does not check to see if a lock is present before performing sensitive operations on a resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Implement a reliable lock mechanism.",
                    "Description_Merged": "Implement a reliable lock mechanism.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "产品在对资源进行敏感操作之前没有检查锁是否存在。",
        "Name_ZH": "缺失锁检查",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "实现可靠的锁定机制。",
                    "Description_Merged": "实现可靠的锁定机制。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "415",
        "Name": "Double Free",
        "Description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Choose a language that provides automatic memory management.",
                    "Description_Merged": "Choose a language that provides automatic memory management.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.",
                    "Description_Merged": "Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a static analysis tool to find double free instances.",
                    "Description_Merged": "Use a static analysis tool to find double free instances.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在同一内存地址上两次调用free()，可能导致修改意外的内存位置。",
        "Name_ZH": "双重释放",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "选择一种具有自动内存管理功能的编程语言。",
                    "Description_Merged": "选择一种具有自动内存管理功能的编程语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保每个分配只被释放一次。释放一个块后，将指针设置为NULL，以确保该指针不能再次被释放。在复杂的错误情况下，确保清理程序正确处理分配的状态。如果使用面向对象的语言，确保对象析构函数只删除每个内存块一次。",
                    "Description_Merged": "确保每个分配只被释放一次。释放一个块后，将指针设置为NULL，以确保该指针不能再次被释放。在复杂的错误情况下，确保清理程序正确处理分配的状态。如果使用面向对象的语言，确保对象析构函数只删除每个内存块一次。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用静态分析工具查找双重释放的实例。",
                    "Description_Merged": "使用静态分析工具查找双重释放的实例。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "416",
        "Name": "Use After Free",
        "Description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Choose a language that provides automatic memory management.",
                    "Description_Merged": "Choose a language that provides automatic memory management.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
                    "Description_Merged": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在释放内存后引用它可能导致程序崩溃、使用意外值或执行代码。",
        "Name_ZH": "使用后释放",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "选择一种具有自动内存管理功能的编程语言。",
                    "Description_Merged": "选择一种具有自动内存管理功能的编程语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在释放指针时，请确保它们被释放后设置为NULL。然而，多个或复杂的数据结构的使用可能降低此策略的实用性。",
                    "Description_Merged": "在释放指针时，请确保它们被释放后设置为NULL。然而，多个或复杂的数据结构的使用可能降低此策略的实用性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "419",
        "Name": "Unprotected Primary Channel",
        "Description": "The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not expose administrative functionnality on the user UI.",
                    "Description_Merged": "Do not expose administrative functionnality on the user UI.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
                    "Description_Merged": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用主要通道进行管理或受限功能，但未能正确保护该通道。",
        "Name_ZH": "未受保护的主要通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要在用户界面上公开管理功能。",
                    "Description_Merged": "不要在用户界面上公开管理功能。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用强身份验证机制保护管理/受限功能。",
                    "Description_Merged": "使用强身份验证机制保护管理/受限功能。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "420",
        "Name": "Unprotected Alternate Channel",
        "Description": "The product protects a primary channel, but it does not use the same level of protection for an alternate channel.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.",
                    "Description_Merged": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品保护了一个主要通道，但对于备用通道没有采用相同级别的保护。",
        "Name_ZH": "未受保护的备用通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "识别所有备用通道，并使用与主要通道相同的保护机制。",
                    "Description_Merged": "识别所有备用通道，并使用与主要通道相同的保护机制。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "421",
        "Name": "Race Condition During Access to Alternate Channel",
        "Description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品打开了一个备用通道，用于与授权用户通信，但该通道可被其他角色访问。",
        "Name_ZH": "访问备用通道时的竞态条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "422",
        "Name": "Unprotected Windows Messaging Channel ('Shatter')",
        "Description": "The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Always verify and authenticate the source of the message.",
                    "Description_Merged": "Always verify and authenticate the source of the message.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在以提升的特权运行时，未正确验证Windows消息系统中消息的来源，从而创建了一个备用通道，攻击者可以直接向产品发送消息。",
        "Name_ZH": "未受保护的Windows消息通道（'Shatter'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "始终验证和认证消息的来源。",
                    "Description_Merged": "始终验证和认证消息的来源。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "423",
        "Name": "DEPRECATED: Proxied Trusted Channel",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它是CWE-441的重复。所有内容已转移到CWE-441。",
        "Name_ZH": "已弃用：代理信任通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "424",
        "Name": "Improper Protection of Alternate Path",
        "Description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Deploy different layers of protection to implement security in depth.",
                    "Description_Merged": "Deploy different layers of protection to implement security in depth.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品未能充分保护用户访问受限功能或资源的所有可能路径。",
        "Name_ZH": "备用路径保护不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "部署不同层次的保护来实现深度安全。",
                    "Description_Merged": "部署不同层次的保护来实现深度安全。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "425",
        "Name": "Direct Request ('Forced Browsing')",
        "Description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.",
                    "Description_Merged": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider using MVC based frameworks such as Struts.",
                    "Description_Merged": "Consider using MVC based frameworks such as Struts.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "Web应用程序未能对所有受限URL、脚本或文件强制执行适当的授权。",
        "Name_ZH": "直接请求（'强制浏览'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": "对于对所有受限URL、脚本或文件的访问，请应用适当的访问控制授权。",
                    "Description_Merged": "对于对所有受限URL、脚本或文件的访问，请应用适当的访问控制授权。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑使用基于MVC的框架，如Struts。",
                    "Description_Merged": "考虑使用基于MVC的框架，如Struts。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "426",
        "Name": "Untrusted Search Path",
        "Description": "The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
                    "Description_Merged": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.",
                    "Description_Merged": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
                    "Description_Merged": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.",
                    "Description_Merged": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.",
                    "Description_Merged": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部提供的搜索路径来查找关键资源，该路径可能指向不受产品直接控制的资源。",
        "Name_ZH": "不受信任的搜索路径",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "将搜索路径硬编码为一组已知安全值（如系统目录），或仅允许管理员在配置文件中指定。不要允许外部方修改这些设置。注意避免相关弱点，如CWE-426和CWE-428。",
                    "Description_Merged": "将搜索路径硬编码为一组已知安全值（如系统目录），或仅允许管理员在配置文件中指定。不要允许外部方修改这些设置。注意避免相关弱点，如CWE-426和CWE-428。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Description": "在调用其他程序时，使用完整限定路径指定这些程序。虽然这是一种有效的方法，但使用完整限定路径的代码可能在不使用相同路径名的其他系统上不可移植。通过将完整限定路径定位在源代码中的一个集中、易于修改的位置，并使代码引用这些路径，可以提高可移植性。",
                    "Description_Merged": "在调用其他程序时，使用完整限定路径指定这些程序。虽然这是一种有效的方法，但使用完整限定路径的代码可能在不使用相同路径名的其他系统上不可移植。通过将完整限定路径定位在源代码中的一个集中、易于修改的位置，并使代码引用这些路径，可以提高可移植性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在调用其他程序之前，删除或限制所有环境设置。这包括PATH环境变量、LD_LIBRARY_PATH和其他标识代码库位置以及任何应用程序特定搜索路径的设置。",
                    "Description_Merged": "在调用其他程序之前，删除或限制所有环境设置。这包括PATH环境变量、LD_LIBRARY_PATH和其他标识代码库位置以及任何应用程序特定搜索路径的设置。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在使用之前检查搜索路径，并删除任何可能不安全的元素，如当前工作目录或临时文件目录。",
                    "Description_Merged": "在使用之前检查搜索路径，并删除任何可能不安全的元素，如当前工作目录或临时文件目录。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用其他需要明确路径的函数。利用任何其他可用的需要明确路径的函数是避免这个问题的安全方式。例如，C中的system()不需要完整路径，因为shell可以处理，而execl()和execv()则需要完整路径。",
                    "Description_Merged": "使用其他需要明确路径的函数。利用任何其他可用的需要明确路径的函数是避免这个问题的安全方式。例如，C中的system()不需要完整路径，因为shell可以处理，而execl()和execv()则需要完整路径。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "427",
        "Name": "Uncontrolled Search Path Element",
        "Description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
                    "Description_Merged": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.",
                    "Description_Merged": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
                    "Description_Merged": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.",
                    "Description_Merged": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
                    "Description_Merged": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用固定或可控的搜索路径来查找资源，但该路径中的一个或多个位置可能受到意外角色的控制。",
        "Name_ZH": "不受控制的搜索路径元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "将搜索路径硬编码为一组已知安全值（如系统目录），或仅允许管理员在配置文件中指定。不要允许外部方修改这些设置。注意避免相关弱点，如CWE-426和CWE-428。",
                    "Description_Merged": "将搜索路径硬编码为一组已知安全值（如系统目录），或仅允许管理员在配置文件中指定。不要允许外部方修改这些设置。注意避免相关弱点，如CWE-426和CWE-428。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "在调用其他程序时，使用完整限定路径指定这些程序。虽然这是一种有效的方法，但使用完整限定路径的代码可能在不使用相同路径名的其他系统上不可移植。通过将完整限定路径定位在源代码中的一个集中、易于修改的位置，并使代码引用这些路径，可以提高可移植性。",
                    "Description_Merged": "在调用其他程序时，使用完整限定路径指定这些程序。虽然这是一种有效的方法，但使用完整限定路径的代码可能在不使用相同路径名的其他系统上不可移植。通过将完整限定路径定位在源代码中的一个集中、易于修改的位置，并使代码引用这些路径，可以提高可移植性。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "在调用其他程序之前，删除或限制所有环境设置。这包括PATH环境变量、LD_LIBRARY_PATH和其他标识代码库位置以及任何应用程序特定搜索路径的设置。",
                    "Description_Merged": "在调用其他程序之前，删除或限制所有环境设置。这包括PATH环境变量、LD_LIBRARY_PATH和其他标识代码库位置以及任何应用程序特定搜索路径的设置。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "实施",
                    "Description": "在使用之前检查搜索路径，并删除可能不安全的元素，例如当前工作目录或临时文件目录。由于这是一个拒绝名单的方法，可能不是一个完整的解决方案。",
                    "Description_Merged": "在使用之前检查搜索路径，并删除可能不安全的元素，例如当前工作目录或临时文件目录。由于这是一个拒绝名单的方法，可能不是一个完整的解决方案。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用其他需要明确路径的函数。使用任何其他可用的需要明确路径的函数是避免这个问题的安全方式。例如，在C中，system()函数不需要完整路径，因为shell可以通过使用PATH环境变量来找到程序，而execl()和execv()函数需要完整路径。",
                    "Description_Merged": "使用其他需要明确路径的函数。使用任何其他可用的需要明确路径的函数是避免这个问题的安全方式。例如，在C中，system()函数不需要完整路径，因为shell可以通过使用PATH环境变量来找到程序，而execl()和execv()函数需要完整路径。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "428",
        "Name": "Unquoted Search Path or Element",
        "Description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Properly quote the full search path before executing a program on the system.",
                    "Description_Merged": "Properly quote the full search path before executing a program on the system.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品使用一个包含未引号的元素的搜索路径，其中该元素包含空格或其他分隔符。这可能导致产品访问父路径中的资源。",
        "Name_ZH": "未引用的搜索路径或元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在执行系统上的程序之前，正确引用完整的搜索路径。",
                    "Description_Merged": "在执行系统上的程序之前，正确引用完整的搜索路径。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "430",
        "Name": "Deployment of Wrong Handler",
        "Description": "The wrong \"handler\" is assigned to process an object.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Perform a type check before interpreting an object.",
                    "Description_Merged": "Perform a type check before interpreting an object.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.",
                    "Description_Merged": "Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "错误地将“处理程序”分配给处理对象。",
        "Name_ZH": "部署错误的处理程序",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在解释对象之前进行类型检查。",
                    "Description_Merged": "在解释对象之前进行类型检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "拒绝任何不一致的类型，例如具有.GIF扩展名且看起来由PHP代码组成的文件。",
                    "Description_Merged": "拒绝任何不一致的类型，例如具有.GIF扩展名且看起来由PHP代码组成的文件。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "431",
        "Name": "Missing Handler",
        "Description": "A handler is not available or implemented.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Handle all possible situations (e.g. error condition).",
                    "Description_Merged": "Handle all possible situations (e.g. error condition).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If an operation can throw an Exception, implement a handler for that specific exception.",
                    "Description_Merged": "If an operation can throw an Exception, implement a handler for that specific exception.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "处理程序不可用或未实现。",
        "Name_ZH": "缺失处理程序",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "处理所有可能的情况（例如错误条件）。",
                    "Description_Merged": "处理所有可能的情况（例如错误条件）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果某个操作可能抛出异常，请为该特定异常实现一个处理程序。",
                    "Description_Merged": "如果某个操作可能抛出异常，请为该特定异常实现一个处理程序。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "432",
        "Name": "Dangerous Signal Handler not Disabled During Sensitive Operations",
        "Description": "The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Turn off dangerous handlers when performing sensitive operations.",
                    "Description_Merged": "Turn off dangerous handlers when performing sensitive operations.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用一个与其他信号处理程序共享状态的信号处理程序，但在原始信号处理程序仍在运行时，它没有正确屏蔽或阻止这些信号处理程序被调用。",
        "Name_ZH": "敏感操作期间未禁用危险信号处理程序",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在执行敏感操作时关闭危险的处理程序。",
                    "Description_Merged": "在执行敏感操作时关闭危险的处理程序。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "433",
        "Name": "Unparsed Raw Web Content Delivery",
        "Description": "The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Perform a type check before interpreting files.",
                    "Description_Merged": "Perform a type check before interpreting files.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not store sensitive information in files which may be misinterpreted.",
                    "Description_Merged": "Do not store sensitive information in files which may be misinterpreted.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品将原始内容或支持代码存储在Web文档根目录下，并且其扩展名没有被服务器专门处理。",
        "Name_ZH": "未解析的原始Web内容传递",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在解释文件之前进行类型检查。",
                    "Description_Merged": "在解释文件之前进行类型检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要将敏感信息存储在可能被错误解释的文件中。",
                    "Description_Merged": "不要将敏感信息存储在可能被错误解释的文件中。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "434",
        "Name": "Unrestricted Upload of File with Dangerous Type",
        "Description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]",
                    "Description_Merged": "Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]",
                    "Description_Merged": "Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nFor example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.",
                    "Description_Merged": "Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter.[REF-422] [REF-423]",
                    "Description_Merged": "Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter.[REF-422] [REF-423]",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.",
                    "Description_Merged": "When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.",
                    "Description_Merged": "Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.",
                    "Description_Merged": "Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "该产品允许攻击者上传或传输危险类型的文件，这些文件可以在产品的环境中自动处理。",
        "Name_ZH": "具有危险类型的文件的不受限上传",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "为上传的文件生成一个新的、独特的文件名，而不使用用户提供的文件名，以确保不使用任何外部输入。[REF-422] [REF-423]",
                    "Description_Merged": "为上传的文件生成一个新的、独特的文件名，而不使用用户提供的文件名，以确保不使用任何外部输入。[REF-422] [REF-423]",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-21",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑将上传的文件存储在网页文档根目录之外。然后，使用其他机制动态地传递文件。[REF-423]",
                    "Description_Merged": "考虑将上传的文件存储在网页文档根目录之外。然后，使用其他机制动态地传递文件。[REF-423]",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "例如，将文件名限制为字母数字字符可以帮助限制意外引入的文件扩展名。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n例如，将文件名限制为字母数字字符可以帮助限制意外引入的文件扩展名。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "定义一组非常有限的允许扩展名，并仅生成以这些扩展名结尾的文件名。在允许使用 .html 或 .htm 文件类型之前，请考虑 XSS（CWE-79）的可能性。",
                    "Description_Merged": "定义一组非常有限的允许扩展名，并仅生成以这些扩展名结尾的文件名。在允许使用 .html 或 .htm 文件类型之前，请考虑 XSS（CWE-79）的可能性。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "确保文件名中仅使用一个扩展名。某些 Web 服务器（包括某些 Apache 的版本）可能会根据内部扩展名处理文件，因此会将 \"filename.php.gif\" 传递给 PHP 解释器。[REF-422] [REF-423]",
                    "Description_Merged": "确保文件名中仅使用一个扩展名。某些 Web 服务器（包括某些 Apache 的版本）可能会根据内部扩展名处理文件，因此会将 \"filename.php.gif\" 传递给 PHP 解释器。[REF-422] [REF-423]",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "在运行支持大小写不敏感文件名的 Web 服务器上，对提供的扩展名进行不区分大小写的评估。",
                    "Description_Merged": "在运行支持大小写不敏感文件名的 Web 服务器上，对提供的扩展名进行不区分大小写的评估。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "不仅依赖文件内容的合理性检查来确保文件的类型和大小符合预期。攻击者可能会在某些文件片段中隐藏代码，服务器仍会执行该代码。例如，GIF 图像可能包含一个自由格式的注释字段。",
                    "Description_Merged": "不仅依赖文件内容的合理性检查来确保文件的类型和大小符合预期。攻击者可能会在某些文件片段中隐藏代码，服务器仍会执行该代码。例如，GIF 图像可能包含一个自由格式的注释字段。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在确定如何呈现文件时，不仅依赖 MIME 内容类型或文件名属性。验证 MIME 内容类型并确保与扩展名匹配只是部分解决方案。",
                    "Description_Merged": "在确定如何呈现文件时，不仅依赖 MIME 内容类型或文件名属性。验证 MIME 内容类型并确保与扩展名匹配只是部分解决方案。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "435",
        "Name": "Improper Interaction Between Multiple Correctly-Behaving Entities",
        "Description": "An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "当两个实体在独立运行时具有正确行为，但当它们作为大型系统或流程的组件集成时，它们会引入导致相关弱点的错误行为时，会发生交互错误。",
        "Name_ZH": "多个行为正确的实体之间的不正确交互",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "436",
        "Name": "Interpretation Conflict",
        "Description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品A处理输入或步骤与产品B不同，这导致A根据其对B的状态的感知执行不正确的操作。",
        "Name_ZH": "解释冲突",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "437",
        "Name": "Incomplete Model of Endpoint Features",
        "Description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品作为两个或多个终端之间的中介或监视器，但它没有完整的终端特性、行为或状态模型，可能导致产品基于这种不完整的模型执行不正确的操作。",
        "Name_ZH": "端点特性模型不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "439",
        "Name": "Behavioral Change in New Version or Environment",
        "Description": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "A的行为或功能在新版本或新环境下发生变化，而B对此并不了解（或可管理）。\n",
        "Name_ZH": "新版本或环境中的行为变化",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "440",
        "Name": "Expected Behavior Violation",
        "Description": "A feature, API, or function does not perform according to its specification.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个特性、API或函数不按照其规范执行。",
        "Name_ZH": "期望行为违规",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "441",
        "Name": "Unintended Proxy or Intermediary ('Confused Deputy')",
        "Description": "The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Enforce the use of strong mutual authentication mechanism between the two parties.",
                    "Description_Merged": "Enforce the use of strong mutual authentication mechanism between the two parties.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
                    "Description_Merged": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品接收来自上游组件的请求、消息或指令，但在将请求转发给产品控制范围之外的外部参与者之前，产品没有充分保留请求的原始源。这导致产品看起来是请求的源，使其充当上游组件和外部参与者之间的代理或其他中间人。",
        "Name_ZH": "意外的代理或中间人（'混淆代理'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "强制使用强大的双向身份验证机制。",
                    "Description_Merged": "强制使用强大的双向身份验证机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "每当产品是两个其他组件之间的中间人或代理时，代理核心不应丢弃事务启动者的身份。事务启动者身份的不可变性必须得到维护，并且应该一直传递到目标。",
                    "Description_Merged": "每当产品是两个其他组件之间的中间人或代理时，代理核心不应丢弃事务启动者的身份。事务启动者身份的不可变性必须得到维护，并且应该一直传递到目标。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "443",
        "Name": "DEPRECATED: HTTP response splitting",
        "Description": "This weakness can be found at CWE-113.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该弱点可以在CWE-113中找到。",
        "Name_ZH": "已弃用：HTTP响应拆分",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "444",
        "Name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
        "Description": "The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].",
                    "Description_Merged": "Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use only SSL communication.",
                    "Description_Merged": "Use only SSL communication.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Terminate the client session after each request.",
                    "Description_Merged": "Terminate the client session after each request.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Turn all pages to non-cacheable.",
                    "Description_Merged": "Turn all pages to non-cacheable.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "产品在两个实体（如客户端和服务器）之间的数据流中充当中间的HTTP代理（如代理或防火墙），但它没有以与这些最终目的地实体将如何处理消息一致的方式解释格式错误的HTTP请求或响应。",
        "Name_ZH": "不一致的HTTP请求解释（'HTTP请求/响应走私'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用严格的HTTP解析程序的Web服务器，例如Apache [REF-433]。",
                    "Description_Merged": "使用严格的HTTP解析程序的Web服务器，例如Apache [REF-433]。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "仅使用SSL通信。",
                    "Description_Merged": "仅使用SSL通信。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在每个请求后终止客户端会话。",
                    "Description_Merged": "在每个请求后终止客户端会话。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "系统配置",
                    "Description": "将所有页面设置为不可缓存。",
                    "Description_Merged": "将所有页面设置为不可缓存。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "446",
        "Name": "UI Discrepancy for Security Feature",
        "Description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "用户界面没有正确启用或配置安全特性，但界面提供的反馈使用户相信该特性处于安全状态。",
        "Name_ZH": "安全功能的用户界面（UI）差异",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "447",
        "Name": "Unimplemented or Unsupported Feature in UI",
        "Description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Perform functionality testing before deploying the application.",
                    "Description_Merged": "Perform functionality testing before deploying the application.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "安全特性的用户界面功能似乎得到支持，并向用户提供暗示其得到支持的反馈，但底层功能并未实现。",
        "Name_ZH": "用户界面（UI）中未实现或不支持的功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在部署应用程序之前进行功能测试。",
                    "Description_Merged": "在部署应用程序之前进行功能测试。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "448",
        "Name": "Obsolete Feature in UI",
        "Description": "A UI function is obsolete and the product does not warn the user.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.",
                    "Description_Merged": "Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "用户界面功能已过时，但产品没有向用户发出警告。",
        "Name_ZH": "用户界面（UI）中的过时功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "从用户界面中删除过时的功能。警告用户该功能已不再支持。",
                    "Description_Merged": "从用户界面中删除过时的功能。警告用户该功能已不再支持。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "449",
        "Name": "The UI Performs the Wrong Action",
        "Description": "The UI performs the wrong action with respect to the user's request.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Perform extensive functionality testing of the UI. The UI should behave as specified.",
                    "Description_Merged": "Perform extensive functionality testing of the UI. The UI should behave as specified.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "用户界面对用户的请求执行了错误的操作。",
        "Name_ZH": "用户界面（UI）执行错误操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "对用户界面进行广泛的功能测试。用户界面应按规定行为。",
                    "Description_Merged": "对用户界面进行广泛的功能测试。用户界面应按规定行为。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "450",
        "Name": "Multiple Interpretations of UI Input",
        "Description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "用户界面对用户输入具有多种解释，但在选择较不安全的解释时没有提示用户。",
        "Name_ZH": "用户界面（UI）输入的多个解释",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "451",
        "Name": "User Interface (UI) Misrepresentation of Critical Information",
        "Description": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Perform data validation (e.g. syntax, length, etc.) before interpreting the data.",
                    "Description_Merged": "Perform data validation (e.g. syntax, length, etc.) before interpreting the data.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Output Encoding",
                    "Description": "Create a strategy for presenting information, and plan for how to display unusual characters.",
                    "Description_Merged": "Create a strategy for presenting information, and plan for how to display unusual characters.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Output Encoding"
                }
            ]
        },
        "Description_ZH": "用户界面（UI）未正确向用户展示关键信息，使得信息或其来源可以被隐藏或欺骗。这通常是网络钓鱼攻击中的一个组成部分。",
        "Name_ZH": "用户界面（UI）错误呈现关键信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在解释数据之前进行数据验证（例如语法、长度等）。",
                    "Description_Merged": "在解释数据之前进行数据验证（例如语法、长度等）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "输出编码",
                    "Description": "创建信息呈现策略，并计划如何显示异常字符。",
                    "Description_Merged": "创建信息呈现策略，并计划如何显示异常字符。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输出编码"
                }
            ]
        }
    },
    {
        "ID": "453",
        "Name": "Insecure Default Variable Initialization",
        "Description": "The product, by default, initializes an internal variable with an insecure or less secure value than is possible.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.",
                    "Description_Merged": "Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品默认使用的内部变量的值不安全或不够安全。",
        "Name_ZH": "不安全的默认变量初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "在可以被用于滥用系统的情况下禁用或更改默认设置。由于这些默认设置随产品一起提供，潜在的攻击者很可能熟悉这些设置。例如，应更改默认凭据或禁用相关帐户。",
                    "Description_Merged": "在可以被用于滥用系统的情况下禁用或更改默认设置。由于这些默认设置随产品一起提供，潜在的攻击者很可能熟悉这些设置。例如，应更改默认凭据或禁用相关帐户。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "454",
        "Name": "External Initialization of Trusted Variables or Data Stores",
        "Description": "The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.",
                    "Description_Merged": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.",
                    "Description_Merged": "Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用可以被不可信的参与者修改的输入来初始化关键的内部变量或数据存储。",
        "Name_ZH": "对可信变量或数据存储的外部初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "产品系统应该不愿相信在其信任边界之外初始化的变量。在依赖外部输入时，确保进行足够的检查（例如输入验证）。",
                    "Description_Merged": "产品系统应该不愿相信在其信任边界之外初始化的变量。在依赖外部输入时，确保进行足够的检查（例如输入验证）。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "避免对变量进行外部控制。如果必要，使用允许列表限制可修改的变量，并在可能的情况下使用不同的命名空间或命名约定。",
                    "Description_Merged": "避免对变量进行外部控制。如果必要，使用允许列表限制可修改的变量，并在可能的情况下使用不同的命名空间或命名约定。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "455",
        "Name": "Non-exit on Failed Initialization",
        "Description": "The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
                    "Description_Merged": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在初始化过程中发生安全相关错误（例如配置文件格式错误或无法激活硬件安全模块）时，不会退出或修改其操作方式，这可能导致产品以比管理员预期的更不安全的方式执行。",
        "Name_ZH": "初始化失败时未退出",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "遵循发生错误时安全地失败的原则。系统应进入一种状态，不易受攻击，并且不会向潜在的攻击者显示敏感的错误信息。",
                    "Description_Merged": "遵循发生错误时安全地失败的原则。系统应进入一种状态，不易受攻击，并且不会向潜在的攻击者显示敏感的错误信息。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "456",
        "Name": "Missing Initialization of a Variable",
        "Description": "The product does not initialize critical variables, which causes the execution environment to use unexpected values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Check that critical variables are initialized.",
                    "Description_Merged": "Check that critical variables are initialized.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a static analysis tool to spot non-initialized variables.",
                    "Description_Merged": "Use a static analysis tool to spot non-initialized variables.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品未初始化关键变量，导致执行环境使用了意外的值。",
        "Name_ZH": "变量缺少初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "检查关键变量是否已初始化。",
                    "Description_Merged": "检查关键变量是否已初始化。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来发现未初始化的变量。",
                    "Description_Merged": "使用静态分析工具来发现未初始化的变量。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "457",
        "Name": "Use of Uninitialized Variable",
        "Description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Assign all variables to an initial value.",
                    "Description_Merged": "Assign all variables to an initial value.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Build and Compilation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Most compilers will complain about the use of uninitialized variables if warnings are turned on.",
                    "Description_Merged": "Most compilers will complain about the use of uninitialized variables if warnings are turned on.",
                    "Phase_Merged": "Build and Compilation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Operation"
                    ],
                    "Description": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
                    "Description_Merged": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
                    "Phase_Merged": "Implementation / Operation"
                },
                {
                    "Phase": "Requirements",
                    "Description": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Description_Merged": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Mitigating technologies such as safe string libraries and container abstractions could be introduced.",
                    "Description_Merged": "Mitigating technologies such as safe string libraries and container abstractions could be introduced.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "代码使用了未初始化的变量，导致结果无法预测或不符合意图。",
        "Name_ZH": "使用未初始化的变量",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "攻击面缩减",
                    "Description": "为所有变量分配一个初始值。",
                    "Description_Merged": "为所有变量分配一个初始值。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "构建和编译",
                    "Strategy": "编译或构建加固",
                    "Description": "大多数编译器在打开警告时会对未初始化的变量发出警告。",
                    "Description_Merged": "大多数编译器在打开警告时会对未初始化的变量发出警告。",
                    "Phase_Merged": "构建和编译",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "Phase": [
                        "实施",
                        "操作"
                    ],
                    "Description": "在使用不需要显式声明变量的语言时，以报告未声明或未知变量的模式运行或编译软件。这可能表明变量名存在拼写错误。",
                    "Description_Merged": "在使用不需要显式声明变量的语言时，以报告未声明或未知变量的模式运行或编译软件。这可能表明变量名存在拼写错误。",
                    "Phase_Merged": "实施 / 操作"
                },
                {
                    "Phase": "需求",
                    "Description": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Description_Merged": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "可以引入诸如安全字符串库和容器抽象等缓解技术。",
                    "Description_Merged": "可以引入诸如安全字符串库和容器抽象等缓解技术。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "458",
        "Name": "DEPRECATED: Incorrect Initialization",
        "Description": "This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该弱点已被弃用，因为其名称和描述不匹配。描述与CWE-454重复，而名称则暗示了一个更抽象的初始化问题。请参考CWE-665获取更抽象的问题。",
        "Name_ZH": "已弃用：错误的初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "459",
        "Name": "Incomplete Cleanup",
        "Description": "The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
                    "Description_Merged": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在使用完临时资源或支持资源后未正确\"清理\"和移除它们。",
        "Name_ZH": "不完整的清理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "临时文件和其他支持资源应在不再需要时立即删除/释放。",
                    "Description_Merged": "临时文件和其他支持资源应在不再需要时立即删除/释放。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "460",
        "Name": "Improper Cleanup on Thrown Exception",
        "Description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
                    "Description_Merged": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在抛出异常时未正确清理其状态或错误地清理其状态，导致意外的状态或控制流程。",
        "Name_ZH": "在抛出异常时不正确的清理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果通过抛出异常中断循环或函数，请确保进行清理或退出程序。应谨慎使用抛出异常。",
                    "Description_Merged": "如果通过抛出异常中断循环或函数，请确保进行清理或退出程序。应谨慎使用抛出异常。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "462",
        "Name": "Duplicate Key in Associative List (Alist)",
        "Description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a hash table instead of an alist.",
                    "Description_Merged": "Use a hash table instead of an alist.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
                    "Description_Merged": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "关联列表中的重复键可能会导致将非唯一键误认为是错误。",
        "Name_ZH": "关联列表（Alist）中的重复键",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用哈希表而不是关联列表。",
                    "Description_Merged": "使用哈希表而不是关联列表。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用一个关联列表，在插入条目之前检查每个条目的哈希键的唯一性。",
                    "Description_Merged": "使用一个关联列表，在插入条目之前检查每个条目的哈希键的唯一性。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "463",
        "Name": "Deletion of Data Structure Sentinel",
        "Description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": "Build and Compilation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.",
                            "For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.\nFor example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.",
                    "Phase_Merged": "Build and Compilation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "Phase": "Operation",
                    "Description": "Use OS-level preventative functionality. Not a complete solution.",
                    "Description_Merged": "Use OS-level preventative functionality. Not a complete solution.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "意外删除数据结构中的哨兵会导致严重的编程逻辑问题。",
        "Name_ZH": "删除数据结构的标记",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Description_Merged": "使用抽象库来抽象化风险API。这并不是一个完整的解决方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": "构建和编译",
                    "Strategy": "编译或构建加固",
                    "Description": {
                        "p": [
                            "使用具有自动提供缓冲区溢出保护机制的功能或扩展来运行或编译软件，以减轻或消除缓冲区溢出。",
                            "例如，某些编译器和扩展提供了内置的自动缓冲区溢出检测机制。示例包括Microsoft Visual Studio /GS标志、Fedora/Red Hat FORTIFY_SOURCE GCC标志、StackGuard和ProPolice。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用具有自动提供缓冲区溢出保护机制的功能或扩展来运行或编译软件，以减轻或消除缓冲区溢出。\n例如，某些编译器和扩展提供了内置的自动缓冲区溢出检测机制。示例包括Microsoft Visual Studio /GS标志、Fedora/Red Hat FORTIFY_SOURCE GCC标志、StackGuard和ProPolice。",
                    "Phase_Merged": "构建和编译",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "Phase": "操作",
                    "Description": "使用操作系统级的预防功能。这并非完全解决方案。",
                    "Description_Merged": "使用操作系统级的预防功能。这并非完全解决方案。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "464",
        "Name": "Addition of Data Structure Sentinel",
        "Description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.",
                    "Description_Merged": "Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.",
                    "Description_Merged": "Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. This is not a complete solution.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. This is not a complete solution.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Operation",
                    "Description": "Use OS-level preventative functionality. This is not a complete solution.",
                    "Description_Merged": "Use OS-level preventative functionality. This is not a complete solution.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "在意外添加数据结构哨兵时，可能会导致严重的编程逻辑问题。",
        "Name_ZH": "添加数据结构的标记",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "将用户与数据哨兵的交互封装起来。验证用户输入以确保不存在哨兵。",
                    "Description_Merged": "将用户与数据哨兵的交互封装起来。验证用户输入以确保不存在哨兵。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "正确的错误检查可以减少无意中引入哨兵值到数据中的风险。例如，如果解析函数失败或遇到错误，可能会返回与哨兵相同的值。",
                    "Description_Merged": "正确的错误检查可以减少无意中引入哨兵值到数据中的风险。例如，如果解析函数失败或遇到错误，可能会返回与哨兵相同的值。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象风险API。这并非完全解决方案。",
                    "Description_Merged": "使用抽象库来抽象风险API。这并非完全解决方案。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "操作",
                    "Description": "使用操作系统级别的预防功能。这并不是一个完整的解决方案。",
                    "Description_Merged": "使用操作系统级别的预防功能。这并不是一个完整的解决方案。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "466",
        "Name": "Return of Pointer Value Outside of Expected Range",
        "Description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个函数可能会返回指向超出指针所期望引用的缓冲区之外的内存的指针。",
        "Name_ZH": "返回超出预期范围的指针值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "467",
        "Name": "Use of sizeof() on a Pointer Type",
        "Description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
                    "Description_Merged": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码对malloced指针类型调用sizeof()，这总是返回字长的1/8。如果程序员想要确定已分配了多少内存，这可能会产生意外结果。",
        "Name_ZH": "在指针类型上使用sizeof()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用表达式，例如\"sizeof(*pointer)\"，而不是\"sizeof(pointer)\"，除非你打算在指针类型上运行sizeof()以获得一些平台独立性，或者你正在在堆栈上分配一个变量。",
                    "Description_Merged": "使用表达式，例如\"sizeof(*pointer)\"，而不是\"sizeof(pointer)\"，除非你打算在指针类型上运行sizeof()以获得一些平台独立性，或者你正在在堆栈上分配一个变量。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "468",
        "Name": "Incorrect Pointer Scaling",
        "Description": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a platform with high-level memory abstractions.",
                    "Description_Merged": "Use a platform with high-level memory abstractions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Always use array indexing instead of direct pointer manipulation.",
                    "Description_Merged": "Always use array indexing instead of direct pointer manipulation.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use technologies for preventing buffer overflows.",
                    "Description_Merged": "Use technologies for preventing buffer overflows.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在C和C++中，由于隐式缩放的语义，经常会意外引用错误的内存。",
        "Name_ZH": "不正确的指针缩放",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用具有高级内存抽象的平台。",
                    "Description_Merged": "使用具有高级内存抽象的平台。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "始终使用数组索引而不是直接指针操作。",
                    "Description_Merged": "始终使用数组索引而不是直接指针操作。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用防止缓冲区溢出的技术。",
                    "Description_Merged": "使用防止缓冲区溢出的技术。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "469",
        "Name": "Use of Pointer Subtraction to Determine Size",
        "Description": "The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.",
                    "Description_Merged": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过减去一个指针来确定大小，但如果指针不存在于同一内存块中，则这个计算可能是不正确的。",
        "Name_ZH": "使用指针减法来确定大小",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "保存一个索引变量。这是推荐的解决方案。而不是互相减去指针，使用与相关指针相同大小的索引变量。使用这个变量来从一个指针移动到另一个指针并计算差异。始终验证这个数字。",
                    "Description_Merged": "保存一个索引变量。这是推荐的解决方案。而不是互相减去指针，使用与相关指针相同大小的索引变量。使用这个变量来从一个指针移动到另一个指针并计算差异。始终验证这个数字。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "470",
        "Name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
        "Description": "The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Refactor your code to avoid using reflection.",
                    "Description_Merged": "Refactor your code to avoid using reflection.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use user-controlled inputs to select and load classes or code.",
                    "Description_Merged": "Do not use user-controlled inputs to select and load classes or code.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
                    "Description_Merged": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入与反射来选择要使用的类或代码，但它没有充分防止输入选择不适当的类或代码。",
        "Name_ZH": "使用外部控制的输入选择类或代码（'不安全反射'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "重构你的代码以避免使用反射。",
                    "Description_Merged": "重构你的代码以避免使用反射。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要使用用户可控输入来选择和加载类或代码。",
                    "Description_Merged": "不要使用用户可控输入来选择和加载类或代码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "通过使用允许列表或间接选择，应用严格的输入验证，以确保用户只选择可接受的类或代码。",
                    "Description_Merged": "通过使用允许列表或间接选择，应用严格的输入验证，以确保用户只选择可接受的类或代码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "471",
        "Name": "Modification of Assumed-Immutable Data (MAID)",
        "Description": "The product does not properly protect an assumed-immutable element from being modified by an attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation",
                        "Implementation"
                    ],
                    "Description": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
                    "Description_Merged": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
                    "Phase_Merged": "Architecture and Design / Operation / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品没有正确保护假定为不可变元素免受攻击者修改的影响。",
        "Name_ZH": "修改假定不可变数据（MAID）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "操作",
                        "实施"
                    ],
                    "Description": "当数据存储或通过可能修改数据的不可信来源进行传输时，实施完整性检查以检测未经授权的修改，或将数据存储/传输到一个没有外部影响的可信位置。",
                    "Description_Merged": "当数据存储或通过可能修改数据的不可信来源进行传输时，实施完整性检查以检测未经授权的修改，或将数据存储/传输到一个没有外部影响的可信位置。",
                    "Phase_Merged": "架构与设计 / 操作 / 实施"
                }
            ]
        }
    },
    {
        "ID": "472",
        "Name": "External Control of Assumed-Immutable Web Parameter",
        "Description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "Web应用程序没有充分验证那些被假定为不可变但实际上是外部可控的输入，例如隐藏表单字段。",
        "Name_ZH": "外部控制的假定不可变Web参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-20",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Description_Merged": "在验证之前，应该将输入解码并规范化为应用程序的当前内部表示形式 (CWE-180)。确保应用程序不会对同一输入进行两次解码 (CWE-174)。这样的错误可能会被用于在检查之后引入危险输入，从而绕过白名单验证机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "473",
        "Name": "PHP External Variable Modification",
        "Description": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Requirements",
                        "Implementation"
                    ],
                    "Description": "Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.",
                    "Description_Merged": "Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.",
                    "Phase_Merged": "Requirements / Implementation"
                }
            ]
        },
        "Description_ZH": "PHP应用程序没有正确防止外部来源（如查询参数或cookie）修改变量。这可能会使应用程序暴露于许多本应不存在的弱点。",
        "Name_ZH": "PHP外部变量修改",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "需求",
                        "实施"
                    ],
                    "Description": "仔细确定哪些变量可以被外部用户控制或影响，并考虑采用一种命名约定，以强调在使用可外部修改的变量时。应用程序应该不轻易信任在其信任边界之外初始化的变量。在依赖于来自信任边界之外的输入时，确保进行了充分的检查。不要允许应用程序在启用register_globals的情况下运行。如果您实现了一个register_globals模拟器，请在变量提取、动态评估和类似问题上非常小心，因为模拟器的弱点可能会导致即使没有register_globals也可以进行外部变量修改。",
                    "Description_Merged": "仔细确定哪些变量可以被外部用户控制或影响，并考虑采用一种命名约定，以强调在使用可外部修改的变量时。应用程序应该不轻易信任在其信任边界之外初始化的变量。在依赖于来自信任边界之外的输入时，确保进行了充分的检查。不要允许应用程序在启用register_globals的情况下运行。如果您实现了一个register_globals模拟器，请在变量提取、动态评估和类似问题上非常小心，因为模拟器的弱点可能会导致即使没有register_globals也可以进行外部变量修改。",
                    "Phase_Merged": "需求 / 实施"
                }
            ]
        }
    },
    {
        "ID": "474",
        "Name": "Use of Function with Inconsistent Implementations",
        "Description": "The code uses a function that has inconsistent implementations across operating systems and versions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Description": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
                    "Description_Merged": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
                    "Phase_Merged": "Architecture and Design / Requirements"
                }
            ]
        },
        "Description_ZH": "代码使用的函数在操作系统和版本之间的实现不一致。",
        "Name_ZH": "使用具有不一致实现的函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Description": "当API规范存在偏离行为增加风险级别时，不要接受不一致的行为。",
                    "Description_Merged": "当API规范存在偏离行为增加风险级别时，不要接受不一致的行为。",
                    "Phase_Merged": "架构与设计 / 需求"
                }
            ]
        }
    },
    {
        "ID": "475",
        "Name": "Undefined Behavior for Input to API",
        "Description": "The behavior of this function is undefined unless its control parameter is set to a specific value.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该函数的行为在控制参数未设置为特定值时是未定义的。",
        "Name_ZH": "API输入的未定义行为",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "476",
        "Name": "NULL Pointer Dereference",
        "Description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.",
                    "Description_Merged": "If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Requirements",
                    "Description": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Description_Merged": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check the results of all functions that return a value and verify that the value is non-null before acting upon it.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).",
                    "Description_Merged": "Check the results of all functions that return a value and verify that the value is non-null before acting upon it.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.",
                    "Description_Merged": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
                    "Description_Merged": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "当应用程序引用一个预期为有效的指针，但实际上为NULL时，将发生NULL指针解引用，通常导致崩溃或退出。",
        "Name_ZH": "空指针解引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果在使用之前对所有可能被修改的指针进行了合理检查，就几乎可以预防所有的空指针解引用。",
                    "Description_Merged": "如果在使用之前对所有可能被修改的指针进行了合理检查，就几乎可以预防所有的空指针解引用。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "需求",
                    "Description": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Description_Merged": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "检查所有返回值的结果，并在执行操作之前验证该值是否为非空。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).",
                    "Description_Merged": "检查所有返回值的结果，并在执行操作之前验证该值是否为非空。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确定所有从外部来源接收信息的变量和数据存储，并应用输入验证以确保它们仅被初始化为预期值。",
                    "Description_Merged": "确定所有从外部来源接收信息的变量和数据存储，并应用输入验证以确保它们仅被初始化为预期值。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "明确地初始化所有变量和其他数据存储，无论是在声明时还是在第一次使用之前。",
                    "Description_Merged": "明确地初始化所有变量和其他数据存储，无论是在声明时还是在第一次使用之前。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "477",
        "Name": "Use of Obsolete Function",
        "Description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
                    "Description_Merged": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Requirements",
                    "Description": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
                    "Description_Merged": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
                    "Phase_Merged": "Requirements"
                }
            ]
        },
        "Description_ZH": "代码使用了已弃用或过时的函数，这表明代码没有经过积极的审查或维护。",
        "Name_ZH": "使用过时函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "参考废弃函数的文档，以确定为什么它被废弃或过时，并了解实现相同功能的替代方法。",
                    "Description_Merged": "参考废弃函数的文档，以确定为什么它被废弃或过时，并了解实现相同功能的替代方法。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "需求",
                    "Description": "认真考虑使用废弃函数的安全影响。考虑使用替代函数。",
                    "Description_Merged": "认真考虑使用废弃函数的安全影响。考虑使用替代函数。",
                    "Phase_Merged": "需求"
                }
            ]
        }
    },
    {
        "ID": "478",
        "Name": "Missing Default Case in Multiple Condition Expression",
        "Description": "The code does not have a default case in an expression with multiple conditions, such as a switch statement.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
                    "Description_Merged": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码在具有多个条件的表达式中没有默认情况，比如switch语句。",
        "Name_ZH": "多个条件表达式中缺少默认情况",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保在根据给定变量的值调整程序流程或值时，没有遗漏任何情况。对于switch风格的语句，创建一个默认情况可以在正确的情况下缓解这种情况。然而，通常情况下，默认情况仅用于表示一个假设的选项，而不是作为检查无效输入的方式。这是一种不良实践，在某些情况下与完全省略默认情况一样糟糕。",
                    "Description_Merged": "确保在根据给定变量的值调整程序流程或值时，没有遗漏任何情况。对于switch风格的语句，创建一个默认情况可以在正确的情况下缓解这种情况。然而，通常情况下，默认情况仅用于表示一个假设的选项，而不是作为检查无效输入的方式。这是一种不良实践，在某些情况下与完全省略默认情况一样糟糕。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "479",
        "Name": "Signal Handler Use of a Non-reentrant Function",
        "Description": "The product defines a signal handler that calls a non-reentrant function.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.",
                    "Description_Merged": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design signal handlers to only set flags rather than perform complex functionality.",
                    "Description_Merged": "Design signal handlers to only set flags rather than perform complex functionality.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that non-reentrant functions are not found in signal handlers.",
                    "Description_Merged": "Ensure that non-reentrant functions are not found in signal handlers.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品定义了一个调用非可重入函数的信号处理程序。",
        "Name_ZH": "信号处理程序使用非可重入函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "要求提供可重入功能的语言或库，或者以其他方式更容易避免此弱点。",
                    "Description_Merged": "要求提供可重入功能的语言或库，或者以其他方式更容易避免此弱点。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计信号处理程序只设置标志位，而不执行复杂功能。",
                    "Description_Merged": "设计信号处理程序只设置标志位，而不执行复杂功能。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保信号处理程序中不存在不可重入函数。",
                    "Description_Merged": "确保信号处理程序中不存在不可重入函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用健全性检查来减少竞争条件利用的时间窗口。这只是一个部分解决方案，因为许多攻击可能会失败，但其他攻击仍可能在较窄的时间窗口内成功，甚至是意外的。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "使用健全性检查来减少竞争条件利用的时间窗口。这只是一个部分解决方案，因为许多攻击可能会失败，但其他攻击仍可能在较窄的时间窗口内成功，甚至是意外的。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "480",
        "Name": "Use of Incorrect Operator",
        "Description": "The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品错误地使用了错误的运算符，从而以安全相关的方式改变了逻辑。",
        "Name_ZH": "使用不正确的运算符",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "481",
        "Name": "Assigning instead of Comparing",
        "Description": "The code uses an operator for assignment when the intention was to perform a comparison.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Many IDEs and static analysis products will detect this problem.",
                    "Description_Merged": "Many IDEs and static analysis products will detect this problem.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error.",
                    "Description_Merged": "Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码在本意是执行比较操作时使用了赋值运算符。",
        "Name_ZH": "赋值而不是比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "许多集成开发环境和静态分析工具都可以检测到这个问题。",
                    "Description_Merged": "许多集成开发环境和静态分析工具都可以检测到这个问题。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "实施",
                    "Description": "将常量放在左边。如果尝试将常量与变量进行赋值，编译器将产生错误。",
                    "Description_Merged": "将常量放在左边。如果尝试将常量与变量进行赋值，编译器将产生错误。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "482",
        "Name": "Comparing instead of Assigning",
        "Description": "The code uses an operator for comparison when the intention was to perform an assignment.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Many IDEs and static analysis products will detect this problem.",
                    "Description_Merged": "Many IDEs and static analysis products will detect this problem.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "代码在本意是执行赋值操作时使用了比较运算符。",
        "Name_ZH": "比较而不是赋值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "许多集成开发环境和静态分析工具都可以检测到这个问题。",
                    "Description_Merged": "许多集成开发环境和静态分析工具都可以检测到这个问题。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "483",
        "Name": "Incorrect Block Delimitation",
        "Description": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
                    "Description_Merged": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码没有明确界定一个预期包含2个或多个语句的代码块，导致逻辑错误。",
        "Name_ZH": "不正确的块界定",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "始终使用显式的块分隔，并使用静态分析技术来强制执行这种实践。",
                    "Description_Merged": "始终使用显式的块分隔，并使用静态分析技术来强制执行这种实践。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "484",
        "Name": "Omitted Break Statement in Switch",
        "Description": "The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.",
                    "Description_Merged": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
                    "Description_Merged": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在switch或类似结构中省略了break语句，导致与多个条件相关的代码被执行。当程序员只打算执行与一个条件相关的代码时，这可能会引发问题。",
        "Name_ZH": "在switch语句中省略了break语句",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "避免省略break语句以实现fall-through功能，这往往很难与错误区分开，因此应该避免。如果需要使用fall-through功能，请确保在switch语句中明确记录，并确保检查了所有的逻辑可能性。",
                    "Description_Merged": "避免省略break语句以实现fall-through功能，这往往很难与错误区分开，因此应该避免。如果需要使用fall-through功能，请确保在switch语句中明确记录，并确保检查了所有的逻辑可能性。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "可以通过if语句来明确省略break语句的功能。这种方法更安全。",
                    "Description_Merged": "可以通过if语句来明确省略break语句的功能。这种方法更安全。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "486",
        "Name": "Comparison of Classes by Name",
        "Description": "The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.",
                    "Description_Merged": "Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过名称比较类，当多个类具有相同名称时可能会使用错误的类。",
        "Name_ZH": "按名称比较类",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用类等价性来确定类型。不要使用类名来确定对象是否属于特定类型，而是使用getClass()方法和==运算符。",
                    "Description_Merged": "使用类等价性来确定类型。不要使用类名来确定对象是否属于特定类型，而是使用getClass()方法和==运算符。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "487",
        "Name": "Reliance on Package-level Scope",
        "Description": "Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
                    "Description_Merged": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "Java包在本质上不是封闭的；因此，依赖它们来保证代码安全性并不是一个好的做法。",
        "Name_ZH": "依赖于包级作用域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "尽可能将数据设置为private static和final。这将确保您的代码通过早期实例化来保护，防止访问和篡改。",
                    "Description_Merged": "尽可能将数据设置为private static和final。这将确保您的代码通过早期实例化来保护，防止访问和篡改。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "488",
        "Name": "Exposure of Data Element to Wrong Session",
        "Description": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.",
                    "Description_Merged": "Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
                    "Description_Merged": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.",
                    "Description_Merged": "In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品未充分强制执行不同会话状态之间的边界，导致数据被提供给或被错误会话使用。",
        "Name_ZH": "将数据元素暴露给错误的会话",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "保护应用程序的会话免受信息泄露。确保一个会话的数据不被其他会话使用或可见。",
                    "Description_Merged": "保护应用程序的会话免受信息泄露。确保一个会话的数据不被其他会话使用或可见。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具对代码进行信息泄露漏洞的扫描（例如 Singleton Member Field）。",
                    "Description_Merged": "使用静态分析工具对代码进行信息泄露漏洞的扫描（例如 Singleton Member Field）。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在多线程环境中，将用户数据存储在 Servlet 成员字段中会引入数据访问竞争条件。不要使用成员字段在 Servlet 中存储信息。",
                    "Description_Merged": "在多线程环境中，将用户数据存储在 Servlet 成员字段中会引入数据访问竞争条件。不要使用成员字段在 Servlet 中存储信息。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "489",
        "Name": "Active Debug Code",
        "Description": "The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Build and Compilation",
                        "Distribution"
                    ],
                    "Description": "Remove debug code before deploying the application.",
                    "Description_Merged": "Remove debug code before deploying the application.",
                    "Phase_Merged": "Build and Compilation / Distribution"
                }
            ]
        },
        "Description_ZH": "该产品部署给未经授权的操作者，调试代码仍然启用或处于活动状态，这可能会创建意外的入口点或暴露敏感信息。",
        "Name_ZH": "活动调试代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "构建和编译",
                        "分发"
                    ],
                    "Description": "在部署应用程序之前删除调试代码。",
                    "Description_Merged": "在部署应用程序之前删除调试代码。",
                    "Phase_Merged": "构建和编译 / 分发"
                }
            ]
        }
    },
    {
        "ID": "491",
        "Name": "Public cloneable() Method Without Final ('Object Hijack')",
        "Description": "A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Make the cloneable() method final.",
                    "Description_Merged": "Make the cloneable() method final.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "一个类有一个未声明为final的cloneable()方法，这允许在不调用构造函数的情况下创建一个对象。这可能导致对象处于预期之外的状态。",
        "Name_ZH": "公共cloneable()方法没有final修饰符（'对象劫持'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将 cloneable() 方法声明为 final。",
                    "Description_Merged": "将 cloneable() 方法声明为 final。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "492",
        "Name": "Use of Inner Class Containing Sensitive Data",
        "Description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
                    "Description_Merged": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.",
                    "Description_Merged": "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "内部类被转化为对攻击者可见的包作用域类，可能会暴露程序员意图保持私有的代码。",
        "Name_ZH": "使用包含敏感数据的内部类",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用封闭类保护面向对象封装范式，从而防止代码被不可预见地扩展。",
                    "Description_Merged": "使用封闭类保护面向对象封装范式，从而防止代码被不可预见地扩展。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "内部类不提供安全性。警告：永不将对象从外部类转换为内部类以减少安全性。如果外部类是 final 或 private，请确保其内部类也是 private。",
                    "Description_Merged": "内部类不提供安全性。警告：永不将对象从外部类转换为内部类以减少安全性。如果外部类是 final 或 private，请确保其内部类也是 private。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "493",
        "Name": "Critical Public Variable Without Final Modifier",
        "Description": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",
                    "Description_Merged": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品有一个关键的公共变量未被声明为final，这允许变量被修改为包含意外值。",
        "Name_ZH": "关键公共变量没有final修饰符",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "尽可能将所有公共字段声明为 final，尤其是用于维护 Applet 或由 Applet 使用的类的内部状态的字段。如果字段必须是公共的，则在访问该字段之前执行所有适当的合理性检查。",
                    "Description_Merged": "尽可能将所有公共字段声明为 final，尤其是用于维护 Applet 或由 Applet 使用的类的内部状态的字段。如果字段必须是公共的，则在访问该字段之前执行所有适当的合理性检查。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "494",
        "Name": "Download of Code Without Integrity Check",
        "Description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-42",
                    "Phase": "Implementation",
                    "Description": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
                    "Effectiveness_Notes": "This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.",
                    "Description_Merged": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Description": {
                        "p": [
                            "Encrypt the code with a reliable encryption scheme before transmitting.",
                            "This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site."
                        ]
                    },
                    "Description_Merged": "Encrypt the code with a reliable encryption scheme before transmitting.\nThis will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.",
                    "Phase_Merged": "Architecture and Design / Operation"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code."
                        ],
                        "ul": {
                            "li": [
                                "When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.",
                                "Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456]."
                            ]
                        }
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nSpeficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.\nWhen providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.\nUse code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "该产品从远程位置下载源代码或可执行文件，并在不充分验证代码的来源和完整性的情况下执行代码。",
        "Name_ZH": "下载未进行完整性检查的代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-42",
                    "Phase": "实施",
                    "Description": "执行正确的正向和反向DNS查找以检测DNS欺骗。",
                    "Effectiveness_Notes": "This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.",
                    "Description_Merged": "执行正确的正向和反向DNS查找以检测DNS欺骗。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Description": {
                        "p": [
                            "在传输之前使用可靠的加密方案加密代码。",
                            "这只是一个部分解决方案，因为它无法检测到 DNS 欺骗，并且无法防止您的代码在托管站点上被修改。"
                        ]
                    },
                    "Description_Merged": "在传输之前使用可靠的加密方案加密代码。\n这只是一个部分解决方案，因为它无法检测到 DNS 欺骗，并且无法防止您的代码在托管站点上被修改。",
                    "Phase_Merged": "架构与设计 / 操作"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "特别是在提供要下载的代码（例如软件的自动更新）时，使用工具或框架对传输代码进行完整性检查可能是有帮助的。"
                        ],
                        "ul": {
                            "li": [
                                "在提供要下载的代码时，例如用于软件的自动更新，使用加密签名对代码进行签名，并修改下载客户端以验证签名。确保实现不包含CWE-295、CWE-320、CWE-347和相关的弱点。",
                                "使用诸如Authenticode的代码签名技术。参考文献[REF-454] [REF-455] [REF-456]。"
                            ]
                        }
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n特别是在提供要下载的代码（例如软件的自动更新）时，使用工具或框架对传输代码进行完整性检查可能是有帮助的。\n在提供要下载的代码时，例如用于软件的自动更新，使用加密签名对代码进行签名，并修改下载客户端以验证签名。确保实现不包含CWE-295、CWE-320、CWE-347和相关的弱点。\n使用诸如Authenticode的代码签名技术。参考文献[REF-454] [REF-455] [REF-456]。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "495",
        "Name": "Private Data Structure Returned From A Public Method",
        "Description": "The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Declare the method private.",
                    "Description_Merged": "Declare the method private.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Clone the member data and keep an unmodified version of the data private to the object.",
                    "Description_Merged": "Clone the member data and keep an unmodified version of the data private to the object.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use public setter methods that govern how a private member can be modified.",
                    "Description_Merged": "Use public setter methods that govern how a private member can be modified.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品有一个被声明为public的方法，但返回对私有数据结构的引用，这可能导致以意外的方式对其进行修改。",
        "Name_ZH": "从公共方法返回私有数据结构",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "声明该方法为私有。",
                    "Description_Merged": "声明该方法为私有。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "克隆成员数据并将未修改的数据保持私有。",
                    "Description_Merged": "克隆成员数据并将未修改的数据保持私有。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用公共的设置方法来控制如何修改私有成员。",
                    "Description_Merged": "使用公共的设置方法来控制如何修改私有成员。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "496",
        "Name": "Public Data Assigned to Private Array-Typed Field",
        "Description": "Assigning public data to a private array is equivalent to giving public access to the array.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not allow objects to modify private members of a class.",
                    "Description_Merged": "Do not allow objects to modify private members of a class.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "将公共数据分配给私有数组等同于给予数组公共访问权限。",
        "Name_ZH": "将公共数据分配给私有数组类型字段",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不允许对象修改类的私有成员。",
                    "Description_Merged": "不允许对象修改类的私有成员。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "497",
        "Name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
        "Description": "The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs",
                    "Description_Merged": "Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "产品未能正确防止未经授权的参与者访问敏感的系统级信息，这些参与者对底层系统的访问权限与产品不一致。",
        "Name_ZH": "将敏感系统信息暴露给未授权的控制域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在生产应用程序中，除非该信息直接提交给不可被最终用户查看的日志，否则不要使用生成内部细节（如堆栈跟踪和错误消息）的方法。所有错误消息文本在写入日志文件之前应进行HTML实体编码，以防止潜在的跨站脚本攻击。",
                    "Description_Merged": "在生产应用程序中，除非该信息直接提交给不可被最终用户查看的日志，否则不要使用生成内部细节（如堆栈跟踪和错误消息）的方法。所有错误消息文本在写入日志文件之前应进行HTML实体编码，以防止潜在的跨站脚本攻击。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "498",
        "Name": "Cloneable Class Containing Sensitive Information",
        "Description": "The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If you do make your classes clonable, ensure that your clone method is final and throw super.clone().",
                    "Description_Merged": "If you do make your classes clonable, ensure that your clone method is final and throw super.clone().",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码包含一个含有敏感数据的类，但该类是可克隆的。通过克隆类，可以访问到数据。",
        "Name_ZH": "包含敏感信息的可克隆类",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果你将类定义为可克隆的，请确保你的克隆方法是final的，并抛出super.clone()。",
                    "Description_Merged": "如果你将类定义为可克隆的，请确保你的克隆方法是final的，并抛出super.clone()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "499",
        "Name": "Serializable Class Containing Sensitive Data",
        "Description": "The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
                    "Description_Merged": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Make sure to prevent serialization of your objects.",
                    "Description_Merged": "Make sure to prevent serialization of your objects.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码包含一个含有敏感数据的类，但该类没有明确拒绝序列化。通过另一个类序列化该类，可以访问到数据。",
        "Name_ZH": "包含敏感数据的可序列化类",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在Java中，显式定义final writeObject()方法以防止序列化。这是推荐的解决方案。定义writeObject()函数时，显式抛出异常以拒绝序列化。",
                    "Description_Merged": "在Java中，显式定义final writeObject()方法以防止序列化。这是推荐的解决方案。定义writeObject()函数时，显式抛出异常以拒绝序列化。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "确保防止对象的序列化。",
                    "Description_Merged": "确保防止对象的序列化。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "500",
        "Name": "Public Static Field Not Marked Final",
        "Description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static.",
                    "Description_Merged": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Make any static fields private and constant.",
                            "A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java"
                        ]
                    },
                    "Description_Merged": "Make any static fields private and constant.\nA constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "一个对象包含一个未标记为final的公共静态字段，可能导致该字段以意想不到的方式被修改。",
        "Name_ZH": "未标记为最终的公共静态字段",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "明确标识所有关键数据元素的范围，包括是否应将其视为静态。",
                    "Description_Merged": "明确标识所有关键数据元素的范围，包括是否应将其视为静态。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "将任何静态字段设为私有和常量。",
                            "在C/C++中，常量字段用关键字'const'表示，在Java中用'final'表示。"
                        ]
                    },
                    "Description_Merged": "将任何静态字段设为私有和常量。\n在C/C++中，常量字段用关键字'const'表示，在Java中用'final'表示。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "501",
        "Name": "Trust Boundary Violation",
        "Description": "The product mixes trusted and untrusted data in the same data structure or structured message.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品在同一数据结构或结构化消息中混合了可信和不可信的数据。",
        "Name_ZH": "信任边界违规",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "502",
        "Name": "Deserialization of Untrusted Data",
        "Description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
                    "Description_Merged": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.",
                    "Description_Merged": "When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Explicitly define a final object() to prevent deserialization.",
                    "Description_Merged": "Explicitly define a final object() to prevent deserialization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": [
                            "Make fields transient to protect them from deserialization.",
                            "An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly."
                        ]
                    },
                    "Description_Merged": "Make fields transient to protect them from deserialization.\nAn attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.",
                    "Description_Merged": "Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在反序列化不可信数据时没有充分验证结果数据的有效性。",
        "Name_ZH": "对不可信数据的反序列化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "如果可用，使用编程语言的签名/封装功能来确保反序列化数据未被污染。例如，可以使用基于哈希的消息认证码（HMAC）来确保数据未被修改。",
                    "Description_Merged": "如果可用，使用编程语言的签名/封装功能来确保反序列化数据未被污染。例如，可以使用基于哈希的消息认证码（HMAC）来确保数据未被修改。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在反序列化数据时，填充一个新对象而不仅仅是反序列化。结果是数据通过安全输入验证并且函数是安全的。",
                    "Description_Merged": "在反序列化数据时，填充一个新对象而不仅仅是反序列化。结果是数据通过安全输入验证并且函数是安全的。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "明确定义一个最终对象，以防止反序列化。",
                    "Description_Merged": "明确定义一个最终对象，以防止反序列化。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": [
                            "将字段设为瞬态以保护它们免受反序列化的影响。",
                            "尝试对包含瞬态字段的类进行序列化和反序列化将导致瞬态数据应该存在的位置出现NULL。这是防止时间、环境或敏感变量被传递并被错误使用的绝佳方法。"
                        ]
                    },
                    "Description_Merged": "将字段设为瞬态以保护它们免受反序列化的影响。\n尝试对包含瞬态字段的类进行序列化和反序列化将导致瞬态数据应该存在的位置出现NULL。这是防止时间、环境或敏感变量被传递并被错误使用的绝佳方法。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免提供不必要的类型或小工具，这些可以被滥用以达到恶意目的。这限制了攻击者利用非预期或未经授权的类型和小工具的潜力。只向允许列表中添加可接受的类。注意：新的小工具不断被发现，所以仅凭这一点不足以达到充分的缓解效果。",
                    "Description_Merged": "避免提供不必要的类型或小工具，这些可以被滥用以达到恶意目的。这限制了攻击者利用非预期或未经授权的类型和小工具的潜力。只向允许列表中添加可接受的类。注意：新的小工具不断被发现，所以仅凭这一点不足以达到充分的缓解效果。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "506",
        "Name": "Embedded Malicious Code",
        "Description": "The product contains code that appears to be malicious in nature.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.",
                    "Description_Merged": "Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品中包含的代码看起来具有恶意性质。",
        "Name_ZH": "内嵌的恶意代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "删除恶意代码并开始努力确保不存在更多的恶意代码。这可能需要对所有代码进行详细审查，因为攻击者可能只在一两行代码中隐藏一个严重的攻击。这些代码行可能位于应用程序的几乎任何位置，并且可能已被攻击者有意混淆。",
                    "Description_Merged": "删除恶意代码并开始努力确保不存在更多的恶意代码。这可能需要对所有代码进行详细审查，因为攻击者可能只在一两行代码中隐藏一个严重的攻击。这些代码行可能位于应用程序的几乎任何位置，并且可能已被攻击者有意混淆。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "507",
        "Name": "Trojan Horse",
        "Description": "The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "Most antivirus software scans for Trojan Horses.",
                    "Description_Merged": "Most antivirus software scans for Trojan Horses.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Installation",
                    "Description": "Verify the integrity of the product that is being installed.",
                    "Description_Merged": "Verify the integrity of the product that is being installed.",
                    "Phase_Merged": "Installation"
                }
            ]
        },
        "Description_ZH": "产品似乎包含了良性或有用的功能，但同时也包含了对用户或系统管理员的安全策略违反的隐藏代码。",
        "Name_ZH": "木马",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "大多数防病毒软件会扫描木马程序。",
                    "Description_Merged": "大多数防病毒软件会扫描木马程序。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "安装",
                    "Description": "验证正在安装的产品的完整性。",
                    "Description_Merged": "验证正在安装的产品的完整性。",
                    "Phase_Merged": "安装"
                }
            ]
        }
    },
    {
        "ID": "508",
        "Name": "Non-Replicating Malicious Code",
        "Description": "Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "Antivirus software can help mitigate known malicious code.",
                    "Description_Merged": "Antivirus software can help mitigate known malicious code.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Installation",
                    "Description": "Verify the integrity of the software that is being installed.",
                    "Description_Merged": "Verify the integrity of the software that is being installed.",
                    "Phase_Merged": "Installation"
                }
            ]
        },
        "Description_ZH": "非复制的恶意代码仅存在于被攻击的目标系统或产品上，它不会试图传播到其他系统。",
        "Name_ZH": "非复制的恶意代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "防病毒软件可以帮助缓解已知的恶意代码问题。",
                    "Description_Merged": "防病毒软件可以帮助缓解已知的恶意代码问题。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "安装",
                    "Description": "验证正在安装的软件的完整性。",
                    "Description_Merged": "验证正在安装的软件的完整性。",
                    "Phase_Merged": "安装"
                }
            ]
        }
    },
    {
        "ID": "509",
        "Name": "Replicating Malicious Code (Virus or Worm)",
        "Description": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "Antivirus software scans for viruses or worms.",
                    "Description_Merged": "Antivirus software scans for viruses or worms.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Installation",
                    "Description": "Always verify the integrity of the software that is being installed.",
                    "Description_Merged": "Always verify the integrity of the software that is being installed.",
                    "Phase_Merged": "Installation"
                }
            ]
        },
        "Description_ZH": "包括病毒和蠕虫在内的复制的恶意代码在成功攻击目标系统或产品后，会尝试攻击其他系统。",
        "Name_ZH": "复制的恶意代码（病毒或蠕虫）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "防病毒软件扫描病毒或蠕虫。",
                    "Description_Merged": "防病毒软件扫描病毒或蠕虫。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "安装",
                    "Description": "始终验证正在安装的软件的完整性。",
                    "Description_Merged": "始终验证正在安装的软件的完整性。",
                    "Phase_Merged": "安装"
                }
            ]
        }
    },
    {
        "ID": "510",
        "Name": "Trapdoor",
        "Description": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Installation",
                    "Description": "Always verify the integrity of the software that is being installed.",
                    "Description_Merged": "Always verify the integrity of the software that is being installed.",
                    "Phase_Merged": "Installation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.",
                    "Description_Merged": "Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "陷阱门是一段隐藏的代码，对特定的输入做出响应，允许用户绕过正常的安全执行机制访问资源。",
        "Name_ZH": "陷阱门",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "安装",
                    "Description": "始终验证正在安装的软件的完整性。",
                    "Description_Merged": "始终验证正在安装的软件的完整性。",
                    "Phase_Merged": "安装"
                },
                {
                    "Phase": "测试",
                    "Description": "识别并仔细检查进入代码特权区域的条件，特别是与身份验证、进程调用和网络通信相关的条件。",
                    "Description_Merged": "识别并仔细检查进入代码特权区域的条件，特别是与身份验证、进程调用和网络通信相关的条件。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "511",
        "Name": "Logic/Time Bomb",
        "Description": "The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Installation",
                    "Description": "Always verify the integrity of the product that is being installed.",
                    "Description_Merged": "Always verify the integrity of the product that is being installed.",
                    "Phase_Merged": "Installation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
                    "Description_Merged": "Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含一段旨在在特定时间经过或满足特定逻辑条件时干扰产品（或其环境）正常运行的代码。",
        "Name_ZH": "逻辑/时间炸弹",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "安装",
                    "Description": "始终验证正在安装的产品的完整性。",
                    "Description_Merged": "始终验证正在安装的产品的完整性。",
                    "Phase_Merged": "安装"
                },
                {
                    "Phase": "测试",
                    "Description": "使用实时测试进行代码覆盖率分析，然后仔细检查未覆盖的任何代码。",
                    "Description_Merged": "使用实时测试进行代码覆盖率分析，然后仔细检查未覆盖的任何代码。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "512",
        "Name": "Spyware",
        "Description": "The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "Use spyware detection and removal software.",
                    "Description_Merged": "Use spyware detection and removal software.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Installation",
                    "Description": "Always verify the integrity of the product that is being installed.",
                    "Description_Merged": "Always verify the integrity of the product that is being installed.",
                    "Phase_Merged": "Installation"
                }
            ]
        },
        "Description_ZH": "该产品收集人类用户的个人可识别信息或用户的活动信息，但在访问这些信息时使用了除产品本身之外的其他资源，并且不需要用户明确批准或直接输入到产品中。",
        "Name_ZH": "间谍软件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "使用间谍软件检测和清除工具。",
                    "Description_Merged": "使用间谍软件检测和清除工具。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "安装",
                    "Description": "始终验证正在安装的产品的完整性。",
                    "Description_Merged": "始终验证正在安装的产品的完整性。",
                    "Phase_Merged": "安装"
                }
            ]
        }
    },
    {
        "ID": "514",
        "Name": "Covert Channel",
        "Description": "A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "隐蔽通道是一条未被系统设计者预期的传输信息的路径。",
        "Name_ZH": "隐蔽通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "515",
        "Name": "Covert Storage Channel",
        "Description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.",
                    "Description_Merged": "Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "隐蔽存储通道通过一个程序设置位并由另一个程序读取这些位来传输信息。与普通操作的区别在于，这些位用于传达编码信息。",
        "Name_ZH": "隐蔽存储通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保在发送消息之前将所有保留字段设置为零，并且不包含不必要的信息。",
                    "Description_Merged": "确保在发送消息之前将所有保留字段设置为零，并且不包含不必要的信息。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "516",
        "Name": "DEPRECATED: Covert Timing Channel",
        "Description": "This weakness can be found at CWE-385.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此弱点可在CWE-385中找到。",
        "Name_ZH": "已废弃：隐蔽时间通道",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "520",
        "Name": ".NET Misconfiguration: Use of Impersonation",
        "Description": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "Run the application with limited privilege to the underlying operating and file system.",
                    "Description_Merged": "Run the application with limited privilege to the underlying operating and file system.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "允许.NET应用程序以潜在升级的访问权限运行在底层操作系统和文件系统上可能是危险的，并可能导致各种形式的攻击。",
        "Name_ZH": ".NET 配置错误：使用模拟身份",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "以有限权限运行应用程序，限制对底层操作系统和文件系统的访问。",
                    "Description_Merged": "以有限权限运行应用程序，限制对底层操作系统和文件系统的访问。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "521",
        "Name": "Weak Password Requirements",
        "Description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes:",
                            "Depending on the threat model, the password policy may include several additional attributes.",
                            "See NIST 800-63B [REF-1053] for further information on password requirements."
                        ],
                        "ul": [
                            {
                                "li": [
                                    "Enforcement of a minimum and maximum length",
                                    "Restrictions against password reuse",
                                    "Restrictions against using common passwords",
                                    "Restrictions against using contextual string in the password (e.g., user id, app name)"
                                ]
                            },
                            {
                                "li": [
                                    {
                                        "#text": "Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case)",
                                        "ul": {
                                            "li": [
                                                "Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.",
                                                "Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down).",
                                                "Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols."
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "Large Minimum Length (encouraging passphrases instead of passwords)",
                                        "ul": {
                                            "li": [
                                                "Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.",
                                                "A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords."
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "Randomly Chosen Secrets",
                                        "ul": {
                                            "li": [
                                                "Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used.",
                                                "A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down."
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "Password Expiration",
                                        "ul": {
                                            "li": [
                                                "Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations.",
                                                "Password expiration may be a good mitigating technique when long complex passwords are not desired."
                                            ]
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "Description_Merged": "A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes:\nDepending on the threat model, the password policy may include several additional attributes.\nSee NIST 800-63B [REF-1053] for further information on password requirements.\nEnforcement of a minimum and maximum length\nRestrictions against password reuse\nRestrictions against using common passwords\nRestrictions against using contextual string in the password (e.g., user id, app name)\nComplex passwords requiring mixed character sets (alpha, numeric, special, mixed case)\nIncreasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.\nUnfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down).\nAnother disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols.\nLarge Minimum Length (encouraging passphrases instead of passwords)\nIncreasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.\nA disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords.\nRandomly Chosen Secrets\nGenerating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used.\nA disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down.\nPassword Expiration\nRequiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations.\nPassword expiration may be a good mitigating technique when long complex passwords are not desired.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider a second authentication factor beyond the password, which prevents the password from being a single point of failure. See CWE-308 for further information.",
                    "Description_Merged": "Consider a second authentication factor beyond the password, which prevents the password from being a single point of failure. See CWE-308 for further information.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes.",
                    "Description_Merged": "Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品不要求用户使用强密码，这使得攻击者更容易破坏用户账户。",
        "Name_ZH": "弱密码要求",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "产品设计应要求符合适当的密码策略。具体的密码要求取决于上下文因素，但建议包含以下属性：",
                            "根据威胁模型的不同，密码策略可能还包括其他几个属性。",
                            "请参阅NIST 800-63B [REF-1053]以获取有关密码要求的更多信息。"
                        ],
                        "ul": [
                            {
                                "li": [
                                    "强制执行最小和最大长度的限制。",
                                    "限制密码重复使用。",
                                    "限制使用常见密码。",
                                    "限制在密码中使用上下文字符串（例如，用户ID，应用程序名称）。"
                                ]
                            },
                            {
                                "li": [
                                    {
                                        "#text": "复杂密码要求使用混合字符集（字母、数字、特殊字符、大小写混合）。",
                                        "ul": {
                                            "li": [
                                                "增加字符范围可以增加密码的破解难度，适用于依赖单因素认证的系统。",
                                                "不幸的是，复杂密码可能难以记忆，导致用户选择短密码或错误地管理密码（写下来）。",
                                                "这种方法的另一个缺点是，由于人们对各种符号的可预测使用，通常不会显著增加密码的复杂性。"
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "较长的最小长度（鼓励使用密码短语而不是密码）",
                                        "ul": {
                                            "li": [
                                                "增加字符数可以增加密码的破解难度，适用于依赖单因素认证的系统。",
                                                "这种方法的一个缺点是，选择一个好的密码短语并不容易，仍然可能生成较差的密码。可能需要一些提示来鼓励使用长且不可预测的密码。"
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "随机选择的秘密",
                                        "ul": {
                                            "li": [
                                                "为用户生成密码可以确保满足长度和复杂性要求，并且可以使用安全的密码。",
                                                "这种方法的一个缺点是，生成的密码或密码短语可能过于难以记忆，导致写下来。"
                                            ]
                                        }
                                    },
                                    {
                                        "#text": "密码过期",
                                        "ul": {
                                            "li": [
                                                "要求定期更改密码可以缩短对手破解密码的时间窗口，同时限制密码泄露在其他位置造成的损害。",
                                                "当不需要长且复杂的密码时，密码过期可能是一个不错的缓解技术。"
                                            ]
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "Description_Merged": "产品设计应要求符合适当的密码策略。具体的密码要求取决于上下文因素，但建议包含以下属性：\n根据威胁模型的不同，密码策略可能还包括其他几个属性。\n请参阅NIST 800-63B [REF-1053]以获取有关密码要求的更多信息。\n强制执行最小和最大长度的限制。\n限制密码重复使用。\n限制使用常见密码。\n限制在密码中使用上下文字符串（例如，用户ID，应用程序名称）。\n复杂密码要求使用混合字符集（字母、数字、特殊字符、大小写混合）。\n增加字符范围可以增加密码的破解难度，适用于依赖单因素认证的系统。\n不幸的是，复杂密码可能难以记忆，导致用户选择短密码或错误地管理密码（写下来）。\n这种方法的另一个缺点是，由于人们对各种符号的可预测使用，通常不会显著增加密码的复杂性。\n较长的最小长度（鼓励使用密码短语而不是密码）\n增加字符数可以增加密码的破解难度，适用于依赖单因素认证的系统。\n这种方法的一个缺点是，选择一个好的密码短语并不容易，仍然可能生成较差的密码。可能需要一些提示来鼓励使用长且不可预测的密码。\n随机选择的秘密\n为用户生成密码可以确保满足长度和复杂性要求，并且可以使用安全的密码。\n这种方法的一个缺点是，生成的密码或密码短语可能过于难以记忆，导致写下来。\n密码过期\n要求定期更改密码可以缩短对手破解密码的时间窗口，同时限制密码泄露在其他位置造成的损害。\n当不需要长且复杂的密码时，密码过期可能是一个不错的缓解技术。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑在密码之外使用第二个身份验证因素，以防止密码成为单点故障。详细信息请参见CWE-308。",
                    "Description_Merged": "考虑在密码之外使用第二个身份验证因素，以防止密码成为单点故障。详细信息请参见CWE-308。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "考虑实施密码复杂度评估器，以通知用户所选密码是否符合所需属性。",
                    "Description_Merged": "考虑实施密码复杂度评估器，以通知用户所选密码是否符合所需属性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "522",
        "Name": "Insufficiently Protected Credentials",
        "Description": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an appropriate security mechanism to protect the credentials.",
                    "Description_Merged": "Use an appropriate security mechanism to protect the credentials.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make appropriate use of cryptography to protect the credentials.",
                    "Description_Merged": "Make appropriate use of cryptography to protect the credentials.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
                    "Description_Merged": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品传输或存储身份验证凭证，但使用了不安全的方法，容易受到未经授权的拦截和/或检索。",
        "Name_ZH": "未充分保护的凭证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用适当的安全机制来保护凭据。",
                    "Description_Merged": "使用适当的安全机制来保护凭据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "适当使用加密来保护凭据。",
                    "Description_Merged": "适当使用加密来保护凭据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "使用行业标准来保护凭据（例如LDAP，密钥库等）。",
                    "Description_Merged": "使用行业标准来保护凭据（例如LDAP，密钥库等）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "523",
        "Name": "Unprotected Transport of Credentials",
        "Description": "Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Operation",
                        "System Configuration"
                    ],
                    "Description": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
                    "Description_Merged": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
                    "Phase_Merged": "Operation / System Configuration"
                }
            ]
        },
        "Description_ZH": "登录页面在客户端到服务器传输用户名和密码时没有使用足够的措施来保护。",
        "Name_ZH": "未保护的凭证传输",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "操作",
                        "系统配置"
                    ],
                    "Description": "强制使用SSL来登录页面或任何用于传输用户凭据或其他敏感信息的页面。即使整个网站未使用SSL，登录页面也必须使用SSL。此外，为了防止钓鱼攻击，请确保SSL服务于登录页面。SSL允许用户验证他们正在连接的服务器的身份。如果SSL服务登录页面，用户可以确保他们正在与正确的终端系统通信。钓鱼攻击通常会将用户重定向到一个没有来自授权供应商的有效受信任服务器证书的站点。",
                    "Description_Merged": "强制使用SSL来登录页面或任何用于传输用户凭据或其他敏感信息的页面。即使整个网站未使用SSL，登录页面也必须使用SSL。此外，为了防止钓鱼攻击，请确保SSL服务于登录页面。SSL允许用户验证他们正在连接的服务器的身份。如果SSL服务登录页面，用户可以确保他们正在与正确的终端系统通信。钓鱼攻击通常会将用户重定向到一个没有来自授权供应商的有效受信任服务器证书的站点。",
                    "Phase_Merged": "操作 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "524",
        "Name": "Use of Cache Containing Sensitive Information",
        "Description": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect information stored in cache.",
                    "Description_Merged": "Protect information stored in cache.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not store unnecessarily sensitive information in the cache.",
                    "Description_Merged": "Do not store unnecessarily sensitive information in the cache.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider using encryption in the cache.",
                    "Description_Merged": "Consider using encryption in the cache.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该代码使用了一个包含敏感信息的缓存，但该缓存可以被意图之外的人读取。",
        "Name_ZH": "使用包含敏感信息的缓存",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "保护存储在缓存中的信息。",
                    "Description_Merged": "保护存储在缓存中的信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要在缓存中存储不必要的敏感信息。",
                    "Description_Merged": "不要在缓存中存储不必要的敏感信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑在缓存中使用加密。",
                    "Description_Merged": "考虑在缓存中使用加密。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "525",
        "Name": "Use of Web Browser Cache Containing Sensitive Information",
        "Description": "The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect information stored in cache.",
                    "Description_Merged": "Protect information stored in cache.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.",
                    "Description_Merged": "Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not store unnecessarily sensitive information in the cache.",
                    "Description_Merged": "Do not store unnecessarily sensitive information in the cache.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider using encryption in the cache.",
                    "Description_Merged": "Consider using encryption in the cache.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该网络应用程序未使用适当的缓存策略，无法指定每个网页和相关表单字段应该被缓存的范围。",
        "Name_ZH": "使用包含敏感信息的 Web 浏览器缓存",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "保护存储在缓存中的信息。",
                    "Description_Merged": "保护存储在缓存中的信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "对于可能包含敏感信息的表单和网页，使用严格的缓存策略。",
                    "Description_Merged": "对于可能包含敏感信息的表单和网页，使用严格的缓存策略。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要在缓存中存储不必要的敏感信息。",
                    "Description_Merged": "不要在缓存中存储不必要的敏感信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑在缓存中使用加密。",
                    "Description_Merged": "考虑在缓存中使用加密。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "526",
        "Name": "Cleartext Storage of Sensitive Information in an Environment Variable",
        "Description": "The product uses an environment variable to store unencrypted sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.",
                    "Description_Merged": "Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.",
                    "Description_Merged": "If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用环境变量来存储未加密的敏感信息。",
        "Name_ZH": "以明文方式存储敏感信息于环境变量中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对存储在环境变量中的信息进行加密，以防止未经授权的用户访问。如果加密对于应用程序的商业使用来说不可行或成本过高，则考虑使用正确保护的配置文件代替环境变量。应明确理解，配置文件中的未加密信息也不能保证被保护，但它仍然是更好的选择，因为它减少了与CWE-214等弱点相关的攻击面。在某些环境中，保险库可能是更安全的数据传输选项。用户应被告知商业选择为不通过加密来保护敏感信息。",
                    "Description_Merged": "对存储在环境变量中的信息进行加密，以防止未经授权的用户访问。如果加密对于应用程序的商业使用来说不可行或成本过高，则考虑使用正确保护的配置文件代替环境变量。应明确理解，配置文件中的未加密信息也不能保证被保护，但它仍然是更好的选择，因为它减少了与CWE-214等弱点相关的攻击面。在某些环境中，保险库可能是更安全的数据传输选项。用户应被告知商业选择为不通过加密来保护敏感信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果环境变量对所需行为不必要，则完全删除它，或将其清空为一个空值。",
                    "Description_Merged": "如果环境变量对所需行为不必要，则完全删除它，或将其清空为一个空值。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "527",
        "Name": "Exposure of Version-Control Repository to an Unauthorized Control Sphere",
        "Description": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Operation",
                        "Distribution",
                        "System Configuration"
                    ],
                    "Description": "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.",
                    "Description_Merged": "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.",
                    "Phase_Merged": "Operation / Distribution / System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品将CVS、git或其他仓库存储在目录、归档或其他资源中，这些资源可以被未经授权的人存储、传输或访问。",
        "Name_ZH": "将版本控制仓库暴露给未授权的控制域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "操作",
                        "分发",
                        "系统配置"
                    ],
                    "Description": "建议包括从生产服务器中删除任何CVS目录和仓库，禁用远程CVS仓库的使用，并确保已执行最新的CVS补丁和版本更新。",
                    "Description_Merged": "建议包括从生产服务器中删除任何CVS目录和仓库，禁用远程CVS仓库的使用，并确保已执行最新的CVS补丁和版本更新。",
                    "Phase_Merged": "操作 / 分发 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "528",
        "Name": "Exposure of Core Dump File to an Unauthorized Control Sphere",
        "Description": "The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Protect the core dump files from unauthorized access.",
                    "Description_Merged": "Protect the core dump files from unauthorized access.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品将核心转储文件生成在目录、归档或其他资源中，这些资源可以被未经授权的人存储、传输或访问。",
        "Name_ZH": "将核心转储文件暴露给未授权的控制域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "保护核心转储文件免受未经授权的访问。",
                    "Description_Merged": "保护核心转储文件免受未经授权的访问。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "529",
        "Name": "Exposure of Access Control List Files to an Unauthorized Control Sphere",
        "Description": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Protect access control list files.",
                    "Description_Merged": "Protect access control list files.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品将访问控制列表文件存储在目录或其他容器中，这些容器可以被意图之外的人访问。",
        "Name_ZH": "将访问控制列表文件暴露给未授权的控制域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "保护访问控制列表文件。",
                    "Description_Merged": "保护访问控制列表文件。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "530",
        "Name": "Exposure of Backup File to an Unauthorized Control Sphere",
        "Description": "A backup file is stored in a directory or archive that is made accessible to unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Policy",
                    "Description": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
                    "Description_Merged": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
                    "Phase_Merged": "Policy"
                }
            ]
        },
        "Description_ZH": "备份文件存储在目录或归档中，这些目录或归档可以被未经授权的人访问。",
        "Name_ZH": "将备份文件暴露给未授权的控制域",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "策略",
                    "Description": "建议组织内部实施安全策略，禁止在Web根目录中备份Web应用程序源代码。",
                    "Description_Merged": "建议组织内部实施安全策略，禁止在Web根目录中备份Web应用程序源代码。",
                    "Phase_Merged": "策略"
                }
            ]
        }
    },
    {
        "ID": "531",
        "Name": "Inclusion of Sensitive Information in Test Code",
        "Description": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Distribution",
                        "Installation"
                    ],
                    "Description": "Remove test code before deploying the application into production.",
                    "Description_Merged": "Remove test code before deploying the application into production.",
                    "Phase_Merged": "Distribution / Installation"
                }
            ]
        },
        "Description_ZH": "可访问的测试应用程序可能存在各种安全风险。由于开发人员或管理员很少考虑到除了他们自己之外的人会知道这些应用程序的存在，因此这些应用程序通常包含敏感信息或功能。",
        "Name_ZH": "在测试代码中包含敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "分发",
                        "安装"
                    ],
                    "Description": "在将应用程序部署到生产环境之前，删除测试代码。",
                    "Description_Merged": "在将应用程序部署到生产环境之前，删除测试代码。",
                    "Phase_Merged": "分发 / 安装"
                }
            ]
        }
    },
    {
        "ID": "532",
        "Name": "Insertion of Sensitive Information into Log File",
        "Description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.",
                    "Description_Merged": "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Distribution",
                    "Description": "Remove debug log files before deploying the application into production.",
                    "Description_Merged": "Remove debug log files before deploying the application into production.",
                    "Phase_Merged": "Distribution"
                },
                {
                    "Phase": "Operation",
                    "Description": "Protect log files against unauthorized read/write.",
                    "Description_Merged": "Protect log files against unauthorized read/write.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Adjust configurations appropriately when software is transitioned from a debug state to production.",
                    "Description_Merged": "Adjust configurations appropriately when software is transitioned from a debug state to production.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "写入日志文件的信息可能具有敏感性，并为攻击者提供有价值的指导或暴露敏感的用户信息。",
        "Name_ZH": "将敏感信息插入日志文件中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "认真考虑写入日志文件的信息的敏感性。不要将机密信息写入日志文件。",
                    "Description_Merged": "认真考虑写入日志文件的信息的敏感性。不要将机密信息写入日志文件。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "分发",
                    "Description": "在将应用程序部署到生产环境之前，删除调试日志文件。",
                    "Description_Merged": "在将应用程序部署到生产环境之前，删除调试日志文件。",
                    "Phase_Merged": "分发"
                },
                {
                    "Phase": "操作",
                    "Description": "保护日志文件免受未经授权的读写。",
                    "Description_Merged": "保护日志文件免受未经授权的读写。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "实施",
                    "Description": "在将软件从调试状态过渡到生产状态时，适当调整配置。",
                    "Description_Merged": "在将软件从调试状态过渡到生产状态时，适当调整配置。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "533",
        "Name": "DEPRECATED: Information Exposure Through Server Log Files",
        "Description": "This entry has been deprecated because its abstraction was too low-level. See CWE-532.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为其抽象级别过低。请参考CWE-532。",
        "Name_ZH": "已废弃：通过服务器日志文件暴露信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "534",
        "Name": "DEPRECATED: Information Exposure Through Debug Log Files",
        "Description": "This entry has been deprecated because its abstraction was too low-level. See CWE-532.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为其抽象层级过低。参见CWE-532。",
        "Name_ZH": "已废弃：通过调试日志文件暴露信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "535",
        "Name": "Exposure of Information Through Shell Error Message",
        "Description": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "命令行错误消息表示在Web应用程序代码中存在未处理的异常。在许多情况下，攻击者可以利用导致这些错误的条件来未经授权地访问系统。",
        "Name_ZH": "通过 Shell 错误消息暴露信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "536",
        "Name": "Servlet Runtime Error Message Containing Sensitive Information",
        "Description": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "Servlet错误消息表示在您的Web应用程序代码中存在未处理的异常，并可能向攻击者提供有用的信息。",
        "Name_ZH": "包含敏感信息的 Servlet 运行时错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "537",
        "Name": "Java Runtime Error Message Containing Sensitive Information",
        "Description": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not expose sensitive error information to the user.",
                    "Description_Merged": "Do not expose sensitive error information to the user.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在许多情况下，攻击者可以利用导致未处理异常错误的条件来未经授权地访问系统。",
        "Name_ZH": "包含敏感信息的 Java 运行时错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不要向用户公开敏感的错误信息。",
                    "Description_Merged": "不要向用户公开敏感的错误信息。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "538",
        "Name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
        "Description": "The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation",
                        "System Configuration"
                    ],
                    "Description": "Do not expose file and directory information to the user.",
                    "Description_Merged": "Do not expose file and directory information to the user.",
                    "Phase_Merged": "Architecture and Design / Operation / System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品将敏感信息放入对于被允许访问文件但不允许访问敏感信息的角色可访问的文件或目录中。",
        "Name_ZH": "将敏感信息插入可外部访问的文件或目录",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "操作",
                        "系统配置"
                    ],
                    "Description": "不要向用户公开文件和目录信息。",
                    "Description_Merged": "不要向用户公开文件和目录信息。",
                    "Phase_Merged": "架构与设计 / 操作 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "539",
        "Name": "Use of Persistent Cookies Containing Sensitive Information",
        "Description": "The web application uses persistent cookies, but the cookies contain sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not store sensitive information in persistent cookies.",
                    "Description_Merged": "Do not store sensitive information in persistent cookies.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "Web应用程序使用持久性Cookie，但Cookie中包含敏感信息。",
        "Name_ZH": "使用包含敏感信息的持久化 Cookie",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要在持久性cookie中存储敏感信息。",
                    "Description_Merged": "不要在持久性cookie中存储敏感信息。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "540",
        "Name": "Inclusion of Sensitive Information in Source Code",
        "Description": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
                    "Description_Merged": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "Web服务器或存储库上的源代码通常包含敏感信息，一般不应对用户可访问。",
        "Name_ZH": "在源代码中包含敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "建议将此脚本从Web服务器中移除，并将其移到无法从互联网访问的位置。",
                    "Description_Merged": "建议将此脚本从Web服务器中移除，并将其移到无法从互联网访问的位置。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "541",
        "Name": "Inclusion of Sensitive Information in an Include File",
        "Description": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not store sensitive information in include files.",
                    "Description_Merged": "Do not store sensitive information in include files.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Protect include files from being exposed.",
                    "Description_Merged": "Protect include files from being exposed.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "如果可访问包含文件的源代码，则该文件可能包含用户名和密码，以及与应用程序和系统相关的敏感信息。",
        "Name_ZH": "在包含文件中包含敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要在包含文件中存储敏感信息。",
                    "Description_Merged": "不要在包含文件中存储敏感信息。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "保护包含文件不被公开。",
                    "Description_Merged": "保护包含文件不被公开。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "542",
        "Name": "DEPRECATED: Information Exposure Through Cleanup Log Files",
        "Description": "This entry has been deprecated because its abstraction was too low-level. See CWE-532.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为其抽象层级过低。参见CWE-532。",
        "Name_ZH": "已废弃：通过清理日志文件暴露信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "543",
        "Name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
        "Description": "The product uses the singleton pattern when creating a resource within a multithreaded environment.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use the Thread-Specific Storage Pattern. See References.",
                    "Description_Merged": "Use the Thread-Specific Storage Pattern. See References.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.",
                    "Description_Merged": "Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).",
                    "Effectiveness": "Limited",
                    "Description_Merged": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在多线程环境中，该产品在创建资源时使用了单例模式。",
        "Name_ZH": "在多线程环境中无同步地使用单例模式",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用线程特定存储模式。见参考资料。",
                    "Description_Merged": "使用线程特定存储模式。见参考资料。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "不要在Servlet中使用成员字段存储信息。在多线程环境中，将用户数据存储在Servlet成员字段中会引入数据访问竞态条件。",
                    "Description_Merged": "不要在Servlet中使用成员字段存储信息。在多线程环境中，将用户数据存储在Servlet成员字段中会引入数据访问竞态条件。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免在不能保证线程安全的语言版本中使用双重检查锁定模式。该模式可用于避免同步调用的开销，但在某些Java版本中，已经证明是不安全的，因为它仍然引入了竞态条件（CWE-209）。",
                    "Effectiveness": "Limited",
                    "Description_Merged": "避免在不能保证线程安全的语言版本中使用双重检查锁定模式。该模式可用于避免同步调用的开销，但在某些Java版本中，已经证明是不安全的，因为它仍然引入了竞态条件（CWE-209）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "544",
        "Name": "Missing Standardized Error Handling Mechanism",
        "Description": "The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
                    "Description_Merged": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在代码中没有使用标准化的方法来处理错误，这可能导致错误处理不一致和相关的弱点。",
        "Name_ZH": "缺少标准化的错误处理机制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "定义处理不同严重性错误的策略，如致命错误与基本日志事件的处理。使用或创建内置语言功能或外部包，提供易于使用的API，并定义用于检测和处理错误的编码标准。",
                    "Description_Merged": "定义处理不同严重性错误的策略，如致命错误与基本日志事件的处理。使用或创建内置语言功能或外部包，提供易于使用的API，并定义用于检测和处理错误的编码标准。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "545",
        "Name": "DEPRECATED: Use of Dynamic Class Loading",
        "Description": "This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "这个弱点已经被弃用，因为它部分重叠了CWE-470，它描述了合法的程序员行为，并且其他部分需要集成到其他条目中。",
        "Name_ZH": "已弃用：使用动态类加载",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "546",
        "Name": "Suspicious Comment",
        "Description": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Documentation",
                    "Description": "Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.",
                    "Description_Merged": "Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.",
                    "Phase_Merged": "Documentation"
                }
            ]
        },
        "Description_ZH": "代码中包含了暗示存在错误、不完整功能或弱点的注释。",
        "Name_ZH": "可疑的注释",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "文档",
                    "Description": "在部署应用程序之前，删除暗示存在错误、功能不完整或弱点的注释。",
                    "Description_Merged": "在部署应用程序之前，删除暗示存在错误、功能不完整或弱点的注释。",
                    "Phase_Merged": "文档"
                }
            ]
        }
    },
    {
        "ID": "547",
        "Name": "Use of Hard-coded, Security-relevant Constants",
        "Description": "The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Avoid using hard-coded constants. Configuration files offer a more flexible solution.",
                    "Description_Merged": "Avoid using hard-coded constants. Configuration files offer a more flexible solution.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用硬编码的常量而不是符号名称来表示安全关键值，这增加了在代码维护或安全策略更改过程中出现错误的可能性。",
        "Name_ZH": "使用硬编码的安全相关常量",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "避免使用硬编码的常量。配置文件提供了更灵活的解决方案。",
                    "Description_Merged": "避免使用硬编码的常量。配置文件提供了更灵活的解决方案。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "548",
        "Name": "Exposure of Information Through Directory Listing",
        "Description": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
                    "Description_Merged": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "一个目录列表被不适当地公开，向攻击者泄露了潜在的敏感信息。",
        "Name_ZH": "通过目录列表公开信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "建议限制对重要目录或文件的访问，采用文档和服务器根目录的“需要知道”要求，并关闭诸如自动目录列表等可能暴露私有文件并为攻击者提供信息的功能，以防止攻击者构建或进行攻击。",
                    "Description_Merged": "建议限制对重要目录或文件的访问，采用文档和服务器根目录的“需要知道”要求，并关闭诸如自动目录列表等可能暴露私有文件并为攻击者提供信息的功能，以防止攻击者构建或进行攻击。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "549",
        "Name": "Missing Password Field Masking",
        "Description": "The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Requirements"
                    ],
                    "Description": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
                    "Description_Merged": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
                    "Phase_Merged": "Implementation / Requirements"
                }
            ]
        },
        "Description_ZH": "该产品在输入密码时没有进行掩码处理，增加了攻击者观察和获取密码的可能性。",
        "Name_ZH": "缺少密码字段屏蔽",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "需求"
                    ],
                    "Description": "建议要求在您的Web应用程序中，所有密码字段都被掩盖，以防止其他用户看到这些信息。",
                    "Description_Merged": "建议要求在您的Web应用程序中，所有密码字段都被掩盖，以防止其他用户看到这些信息。",
                    "Phase_Merged": "实施 / 需求"
                }
            ]
        }
    },
    {
        "ID": "550",
        "Name": "Server-generated Error Message Containing Sensitive Information",
        "Description": "Certain conditions, such as network failure, will cause a server error message to be displayed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.",
                    "Description_Merged": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "特定条件，比如网络故障，会导致显示服务器错误消息。",
        "Name_ZH": "服务器生成的包含敏感信息的错误消息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "建议设计并添加一致的错误处理机制，能够处理Web应用程序中的任何用户输入，向最终用户提供有意义的详细信息，并防止显示可能为攻击者提供有用信息的错误消息。",
                    "Description_Merged": "建议设计并添加一致的错误处理机制，能够处理Web应用程序中的任何用户输入，向最终用户提供有意义的详细信息，并防止显示可能为攻击者提供有用信息的错误消息。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "551",
        "Name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
        "Description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
                    "Description_Merged": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "如果一个Web服务器在进行授权之前没有完全解析所请求的URL，攻击者可能绕过授权保护。",
        "Name_ZH": "错误的行为顺序：授权在解析和规范化之前",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在验证和授权之前，URL输入应解码并规范化为应用程序的当前内部表示。确保您的应用程序不会对同一输入进行两次解码。此类错误可能会在检查后引入危险输入，从而绕过白名单方案。",
                    "Description_Merged": "在验证和授权之前，URL输入应解码并规范化为应用程序的当前内部表示。确保您的应用程序不会对同一输入进行两次解码。此类错误可能会在检查后引入危险输入，从而绕过白名单方案。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "552",
        "Name": "Files or Directories Accessible to External Parties",
        "Description": "The product makes files or directories accessible to unauthorized actors, even though they should not be.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration",
                        "Operation"
                    ],
                    "Description": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
                    "Description_Merged": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
                    "Phase_Merged": "Implementation / System Configuration / Operation"
                }
            ]
        },
        "Description_ZH": "该产品使未经授权的用户可以访问文件或目录，尽管它们不应该被访问。",
        "Name_ZH": "文件或目录可被外部方访问",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "系统配置",
                        "操作"
                    ],
                    "Description": "在将数据存储在云中（例如S3存储桶、Azure Blob、Google Cloud Storage等）时，请使用提供商的控制功能禁用公共访问。",
                    "Description_Merged": "在将数据存储在云中（例如S3存储桶、Azure Blob、Google Cloud Storage等）时，请使用提供商的控制功能禁用公共访问。",
                    "Phase_Merged": "实施 / 系统配置 / 操作"
                }
            ]
        }
    },
    {
        "ID": "553",
        "Name": "Command Shell in Externally Accessible Directory",
        "Description": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Installation",
                        "System Configuration"
                    ],
                    "Description": "Remove any Shells accessible under the web root folder and children directories.",
                    "Description_Merged": "Remove any Shells accessible under the web root folder and children directories.",
                    "Phase_Merged": "Installation / System Configuration"
                }
            ]
        },
        "Description_ZH": "在/cgi-bin/或其他可访问的目录中存在可能的shell文件。这非常危险，攻击者可以利用它在Web服务器上执行命令。",
        "Name_ZH": "外部可访问目录中的命令Shell",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "安装",
                        "系统配置"
                    ],
                    "Description": "删除在Web根目录和子目录下可访问的Shell。",
                    "Description_Merged": "删除在Web根目录和子目录下可访问的Shell。",
                    "Phase_Merged": "安装 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "554",
        "Name": "ASP.NET Misconfiguration: Not Using Input Validation Framework",
        "Description": "The ASP.NET application does not use an input validation framework.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:",
                        "ul": {
                            "li": [
                                "Phone number fields contain only valid characters in phone numbers",
                                "Boolean values are only \"T\" or \"F\"",
                                "Free-form strings are of a reasonable length and composition"
                            ]
                        }
                    },
                    "Description_Merged": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:\nPhone number fields contain only valid characters in phone numbers\nBoolean values are only \"T\" or \"F\"\nFree-form strings are of a reasonable length and composition",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该ASP.NET应用程序不使用输入验证框架。",
        "Name_ZH": "ASP.NET配置错误：未使用输入验证框架",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "在应用程序处理之前，请使用ASP.NET验证框架检查所有程序输入。验证框架的示例用途包括检查以下内容：",
                        "ul": {
                            "li": [
                                "电话号码字段中是否只包含电话号码中的有效字符。",
                                "布尔值只能是\"T\"或\"F\"。",
                                "自由格式的字符串应该具有合理的长度和组成。"
                            ]
                        }
                    },
                    "Description_Merged": "在应用程序处理之前，请使用ASP.NET验证框架检查所有程序输入。验证框架的示例用途包括检查以下内容：\n电话号码字段中是否只包含电话号码中的有效字符。\n布尔值只能是\"T\"或\"F\"。\n自由格式的字符串应该具有合理的长度和组成。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "555",
        "Name": "J2EE Misconfiguration: Plaintext Password in Configuration File",
        "Description": "The J2EE application stores a plaintext password in a configuration file.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not hardwire passwords into your software.",
                    "Description_Merged": "Do not hardwire passwords into your software.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use industry standard libraries to encrypt passwords before storage in configuration files.",
                    "Description_Merged": "Use industry standard libraries to encrypt passwords before storage in configuration files.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该J2EE应用程序在配置文件中存储明文密码。",
        "Name_ZH": "J2EE配置错误：配置文件中的明文密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要将密码硬编码到软件中。",
                    "Description_Merged": "不要将密码硬编码到软件中。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在配置文件中存储密码之前，请使用行业标准库对其进行加密。",
                    "Description_Merged": "在配置文件中存储密码之前，请使用行业标准库对其进行加密。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "556",
        "Name": "ASP.NET Misconfiguration: Use of Identity Impersonation",
        "Description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use the least privilege principle.",
                    "Description_Merged": "Use the least privilege principle.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "配置ASP.NET应用程序以使用模拟凭据可能会给应用程序不必要的特权。",
        "Name_ZH": "ASP.NET配置错误：使用身份模拟",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用最低权限原则。",
                    "Description_Merged": "使用最低权限原则。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "558",
        "Name": "Use of getlogin() in Multithreaded Application",
        "Description": "The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.",
                    "Description_Merged": "Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
                    "Description_Merged": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在多线程环境中使用getlogin()函数，可能导致返回不正确的值。",
        "Name_ZH": "在多线程应用程序中使用getlogin()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不建议将名称用于安全目的。名称容易伪造，并且可能存在重叠的用户ID，可能导致混淆或冒充。",
                    "Description_Merged": "不建议将名称用于安全目的。名称容易伪造，并且可能存在重叠的用户ID，可能导致混淆或冒充。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "请改用reentrant的getlogin_r()，这意味着其他进程无法更改用户名。",
                    "Description_Merged": "请改用reentrant的getlogin_r()，这意味着其他进程无法更改用户名。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "560",
        "Name": "Use of umask() with chmod-style Argument",
        "Description": "The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use umask() with the correct argument.",
                    "Description_Merged": "Use umask() with the correct argument.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "If you suspect misuse of umask(), you can use grep to spot call instances of umask().",
                    "Description_Merged": "If you suspect misuse of umask(), you can use grep to spot call instances of umask().",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品调用umask()函数时使用了错误的参数，该参数被指定为chmod()的参数。",
        "Name_ZH": "使用带有chmod样式参数的umask()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "请使用正确的参数调用umask()。",
                    "Description_Merged": "请使用正确的参数调用umask()。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "如果怀疑umask()的误用，可以使用grep来查找umask()的调用实例。",
                    "Description_Merged": "如果怀疑umask()的误用，可以使用grep来查找umask()的调用实例。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "561",
        "Name": "Dead Code",
        "Description": "The product contains dead code, which can never be executed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Remove dead code before deploying the application.",
                    "Description_Merged": "Remove dead code before deploying the application.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a static analysis tool to spot dead code.",
                    "Description_Merged": "Use a static analysis tool to spot dead code.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含无效代码，永远不会被执行。",
        "Name_ZH": "死代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在部署应用程序之前删除无用代码。",
                    "Description_Merged": "在部署应用程序之前删除无用代码。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检测无用代码。",
                    "Description_Merged": "使用静态分析工具来检测无用代码。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "562",
        "Name": "Return of Stack Variable Address",
        "Description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Use static analysis tools to spot return of the address of a stack variable.",
                    "Description_Merged": "Use static analysis tools to spot return of the address of a stack variable.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "一个函数返回了一个栈变量的地址，这将导致意外的程序行为，通常以崩溃的形式出现。",
        "Name_ZH": "返回堆栈变量地址",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检测返回栈变量地址的情况。",
                    "Description_Merged": "使用静态分析工具来检测返回栈变量地址的情况。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "563",
        "Name": "Assignment to Variable without Use",
        "Description": "The variable's value is assigned but never used, making it a dead store.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Remove unused variables from the code.",
                    "Description_Merged": "Remove unused variables from the code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该变量的值被赋值但从未被使用，导致其成为无效存储。",
        "Name_ZH": "赋值给变量但未使用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "从代码中删除未使用的变量。",
                    "Description_Merged": "从代码中删除未使用的变量。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "564",
        "Name": "SQL Injection: Hibernate",
        "Description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "A non-SQL style database which is not subject to this flaw may be chosen.",
                    "Description_Merged": "A non-SQL style database which is not subject to this flaw may be chosen.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.",
                    "Description_Merged": "Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
                    "Description_Merged": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.",
                    "Description_Merged": "Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "使用Hibernate执行由用户控制的输入构建的动态SQL语句可能允许攻击者修改语句的含义或执行任意SQL命令。",
        "Name_ZH": "SQL注入：Hibernate",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择非SQL风格的数据库，该数据库不会受此漏洞影响。",
                    "Description_Merged": "可以选择非SQL风格的数据库，该数据库不会受此漏洞影响。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在创建SQL数据库用户账户时，遵循最小权限原则。用户只能拥有使用其账户所需的最低权限。如果系统要求用户可以读取和修改自己的数据，则限制其权限，使其无法读取/写入他人的数据。",
                    "Description_Merged": "在创建SQL数据库用户账户时，遵循最小权限原则。用户只能拥有使用其账户所需的最低权限。如果系统要求用户可以读取和修改自己的数据，则限制其权限，使其无法读取/写入他人的数据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "使用绑定变量的预编译语句来实现SQL字符串。未绑定变量的预编译语句可能容易受到攻击。",
                    "Description_Merged": "使用绑定变量的预编译语句来实现SQL字符串。未绑定变量的预编译语句可能容易受到攻击。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于可能在SQL命令中使用的任何用户输入，要进行严格的白名单检查。最安全的做法是不允许元字符的存在，而不是转义它们。原因是：在将数据输入数据库后，后续使用数据时可能忽略了对元字符进行转义。根据请求中参数的预期值，狭义地定义安全字符集。",
                    "Description_Merged": "对于可能在SQL命令中使用的任何用户输入，要进行严格的白名单检查。最安全的做法是不允许元字符的存在，而不是转义它们。原因是：在将数据输入数据库后，后续使用数据时可能忽略了对元字符进行转义。根据请求中参数的预期值，狭义地定义安全字符集。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "565",
        "Name": "Reliance on Cookies without Validation and Integrity Checking",
        "Description": "The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid using cookie data for a security-related decision.",
                    "Description_Merged": "Avoid using cookie data for a security-related decision.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
                    "Description_Merged": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Add integrity checks to detect tampering.",
                    "Description_Merged": "Add integrity checks to detect tampering.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
                    "Description_Merged": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在执行安全关键操作时依赖于cookie的存在或值，但未正确确保设置对于相关用户是有效的。",
        "Name_ZH": "依赖于未经验证和完整性检查的Cookie",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "避免使用Cookie数据作为安全相关的决策依据。",
                    "Description_Merged": "避免使用Cookie数据作为安全相关的决策依据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果要将Cookie数据用于安全相关的决策，请对其进行彻底的输入验证（即服务器端验证）。",
                    "Description_Merged": "如果要将Cookie数据用于安全相关的决策，请对其进行彻底的输入验证（即服务器端验证）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "添加完整性检查以检测篡改。",
                    "Description_Merged": "添加完整性检查以检测篡改。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "保护关键cookie免受重放攻击，因为跨站脚本或其他攻击可能允许攻击者窃取通过完整性检查的强加密cookie。此缓解措施适用于在单个事务或会话期间应该有效的cookie。通过强制超时，您可以限制攻击的范围。作为完整性检查的一部分，使用一个对客户端不可见的不可预测的服务器端值。",
                    "Description_Merged": "保护关键cookie免受重放攻击，因为跨站脚本或其他攻击可能允许攻击者窃取通过完整性检查的强加密cookie。此缓解措施适用于在单个事务或会话期间应该有效的cookie。通过强制超时，您可以限制攻击的范围。作为完整性检查的一部分，使用一个对客户端不可见的不可预测的服务器端值。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "566",
        "Name": "Authorization Bypass Through User-Controlled SQL Primary Key",
        "Description": "The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.",
                    "Description_Merged": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.",
                    "Description_Merged": "Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个包含对参与者不可访问的记录的数据库表，但是它执行了一个由该参与者可控制的主键的SQL语句。",
        "Name_ZH": "通过用户控制的SQL主键绕过授权",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "假设所有输入都是恶意的。在接受数据之前，使用标准的输入验证机制对所有输入进行长度、类型、语法和业务规则的验证。使用“接受已知良好”验证策略。",
                    "Description_Merged": "假设所有输入都是恶意的。在接受数据之前，使用标准的输入验证机制对所有输入进行长度、类型、语法和业务规则的验证。使用“接受已知良好”验证策略。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用参数化查询，并确保接受的值符合业务规则。相应地构建SQL语句。",
                    "Description_Merged": "使用参数化查询，并确保接受的值符合业务规则。相应地构建SQL语句。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "567",
        "Name": "Unsynchronized Access to Shared Data in a Multithreaded Context",
        "Description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.",
                    "Description_Merged": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未正确同步共享数据，如跨线程的静态变量，这可能导致未定义的行为和不可预测的数据更改。",
        "Name_ZH": "在多线程环境中未同步访问共享数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "删除在Servlet之间使用的静态变量。如果无法避免使用，使用同步访问这些变量。",
                    "Description_Merged": "删除在Servlet之间使用的静态变量。如果无法避免使用，使用同步访问这些变量。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "568",
        "Name": "finalize() Method Without super.finalize()",
        "Description": "The product contains a finalize() method that does not call super.finalize().",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Call the super.finalize() method.",
                    "Description_Merged": "Call the super.finalize() method.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use static analysis tools to spot such issues in your code.",
                    "Description_Merged": "Use static analysis tools to spot such issues in your code.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含一个未调用super.finalize()的finalize()方法。",
        "Name_ZH": "finalize()方法没有调用super.finalize()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "调用super.finalize()方法。",
                    "Description_Merged": "调用super.finalize()方法。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检测代码中的此类问题。",
                    "Description_Merged": "使用静态分析工具来检测代码中的此类问题。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "570",
        "Name": "Expression is Always False",
        "Description": "The product contains an expression that will always evaluate to false.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Use Static Analysis tools to spot such conditions.",
                    "Description_Merged": "Use Static Analysis tools to spot such conditions.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含一个始终计算为false的表达式。",
        "Name_ZH": "表达式始终为假",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检测此类条件。",
                    "Description_Merged": "使用静态分析工具来检测此类条件。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "571",
        "Name": "Expression is Always True",
        "Description": "The product contains an expression that will always evaluate to true.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Use Static Analysis tools to spot such conditions.",
                    "Description_Merged": "Use Static Analysis tools to spot such conditions.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含一个始终计算为true的表达式。",
        "Name_ZH": "表达式始终为真",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检测此类条件。",
                    "Description_Merged": "使用静态分析工具来检测此类条件。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "572",
        "Name": "Call to Thread run() instead of start()",
        "Description": "The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use the start() method instead of the run() method.",
                    "Description_Merged": "Use the start() method instead of the run() method.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品调用了线程的run()方法而不是调用start()，这导致代码在调用者的线程中运行而不是被调用者的线程中运行。",
        "Name_ZH": "调用Thread的run()而不是start()",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用start()方法而不是run()方法。",
                    "Description_Merged": "使用start()方法而不是run()方法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "573",
        "Name": "Improper Following of Specification by Caller",
        "Description": "The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未遵循或错误遵循了实现语言、环境、框架、协议或平台所要求的规范。",
        "Name_ZH": "调用者未正确遵循规范",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "574",
        "Name": "EJB Bad Practices: Use of Synchronization Primitives",
        "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not use Synchronization Primitives when writing EJBs.",
                    "Description_Merged": "Do not use Synchronization Primitives when writing EJBs.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过使用线程同步原语违反了Enterprise JavaBeans (EJB) 规范。",
        "Name_ZH": "EJB不良实践：使用同步原语",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "编写EJB时不要使用同步原语。",
                    "Description_Merged": "编写EJB时不要使用同步原语。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "575",
        "Name": "EJB Bad Practices: Use of AWT Swing",
        "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use AWT/Swing when writing EJBs.",
                    "Description_Merged": "Do not use AWT/Swing when writing EJBs.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品通过使用AWT/Swing违反了Enterprise JavaBeans (EJB) 规范。",
        "Name_ZH": "EJB不良实践：使用AWT Swing",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "编写EJB时不要使用AWT/Swing。",
                    "Description_Merged": "编写EJB时不要使用AWT/Swing。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "576",
        "Name": "EJB Bad Practices: Use of Java I/O",
        "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not use Java I/O when writing EJBs.",
                    "Description_Merged": "Do not use Java I/O when writing EJBs.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过使用java.io包违反了Enterprise JavaBeans (EJB) 规范。",
        "Name_ZH": "EJB不良实践：使用Java I/O",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "编写EJB时不要使用Java I/O。",
                    "Description_Merged": "编写EJB时不要使用Java I/O。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "577",
        "Name": "EJB Bad Practices: Use of Sockets",
        "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using sockets.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not use Sockets when writing EJBs.",
                    "Description_Merged": "Do not use Sockets when writing EJBs.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过使用套接字违反了企业级JavaBeans (EJB) 规范。",
        "Name_ZH": "EJB不良实践：使用套接字",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "编写EJB时不要使用Sockets。",
                    "Description_Merged": "编写EJB时不要使用Sockets。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "578",
        "Name": "EJB Bad Practices: Use of Class Loader",
        "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not use the Class Loader when writing EJBs.",
                    "Description_Merged": "Do not use the Class Loader when writing EJBs.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过使用类加载器违反了企业级JavaBeans (EJB) 规范。",
        "Name_ZH": "EJB不良实践：使用类加载器",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在编写EJB时不要使用类加载器。",
                    "Description_Merged": "在编写EJB时不要使用类加载器。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "579",
        "Name": "J2EE Bad Practices: Non-serializable Object Stored in Session",
        "Description": "The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.",
                    "Description_Merged": "In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品将一个非可序列化对象作为HttpSession属性存储，这可能会影响可靠性。",
        "Name_ZH": "J2EE不良实践：会话中存储非可序列化对象",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "为了使会话复制正常工作，产品在会话中存储的属性的值必须实现Serializable接口。",
                    "Description_Merged": "为了使会话复制正常工作，产品在会话中存储的属性的值必须实现Serializable接口。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "580",
        "Name": "clone() Method Without super.clone()",
        "Description": "The product contains a clone() method that does not call super.clone() to obtain the new object.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Call super.clone() within your clone() method, when obtaining a new object.",
                    "Description_Merged": "Call super.clone() within your clone() method, when obtaining a new object.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
                    "Description_Merged": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品包含一个clone()方法，但该方法没有调用super.clone()以获取新对象。",
        "Name_ZH": "没有调用super.clone()的clone()方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在clone()方法中调用super.clone()以获取一个新对象。",
                    "Description_Merged": "在clone()方法中调用super.clone()以获取一个新对象。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在某些情况下，可以完全省略clone方法并使用复制构造函数。",
                    "Description_Merged": "在某些情况下，可以完全省略clone方法并使用复制构造函数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "581",
        "Name": "Object Model Violation: Just One of Equals and Hashcode Defined",
        "Description": "The product does not maintain equal hashcodes for equal objects.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Both Equals() and Hashcode() should be defined.",
                    "Description_Merged": "Both Equals() and Hashcode() should be defined.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品对于相等的对象没有维护相等的哈希码。",
        "Name_ZH": "对象模型违规：只定义了Equals和Hashcode中的一个",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "Equals()和Hashcode()都应该被定义。",
                    "Description_Merged": "Equals()和Hashcode()都应该被定义。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "582",
        "Name": "Array Declared Public, Final, and Static",
        "Description": "The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "In most situations the array should be made private.",
                    "Description_Merged": "In most situations the array should be made private.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品将一个数组声明为public、final和static，但这并不足以防止修改数组的内容。",
        "Name_ZH": "数组声明为public、final和static",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在大多数情况下，数组应该被声明为私有。",
                    "Description_Merged": "在大多数情况下，数组应该被声明为私有。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "583",
        "Name": "finalize() Method Declared Public",
        "Description": "The product violates secure coding principles for mobile code by declaring a finalize() method public.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",
                    "Description_Merged": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品通过将finalize()方法声明为public，违反了移动代码的安全编码原则。",
        "Name_ZH": "public修饰的finalize()方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果按照设计使用finalize()，则没有理由以其他方式声明finalize()。",
                    "Description_Merged": "如果按照设计使用finalize()，则没有理由以其他方式声明finalize()。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "584",
        "Name": "Return Inside Finally Block",
        "Description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
                    "Description_Merged": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码在finally块内部有一个return语句，这将导致try块中抛出的任何异常被丢弃。",
        "Name_ZH": "在finally块中的返回语句",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不要在finally块内使用return语句。finally块应该包含“清理”代码。",
                    "Description_Merged": "不要在finally块内使用return语句。finally块应该包含“清理”代码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "585",
        "Name": "Empty Synchronized Block",
        "Description": "The product contains an empty synchronized block.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.",
                    "Description_Merged": "When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品包含一个空的synchronized块。",
        "Name_ZH": "空的同步块",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "当遇到空的同步语句或已注释掉代码的同步语句时，尝试确定最初的意图以及同步块是否仍然必要。",
                    "Description_Merged": "当遇到空的同步语句或已注释掉代码的同步语句时，尝试确定最初的意图以及同步块是否仍然必要。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "586",
        "Name": "Explicit Call to Finalize()",
        "Description": "The product makes an explicit call to the finalize() method from outside the finalizer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Testing"
                    ],
                    "Description": "Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.",
                    "Description_Merged": "Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.",
                    "Phase_Merged": "Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "该产品从finalizer之外显式调用了finalize()方法。",
        "Name_ZH": "显式调用finalize()方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "测试"
                    ],
                    "Description": "不要显式调用finalize()。使用静态分析工具来发现此类情况。",
                    "Description_Merged": "不要显式调用finalize()。使用静态分析工具来发现此类情况。",
                    "Phase_Merged": "实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "587",
        "Name": "Assignment of a Fixed Address to a Pointer",
        "Description": "The product sets a pointer to a specific address other than NULL or 0.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Never set a pointer to a fixed address.",
                    "Description_Merged": "Never set a pointer to a fixed address.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品将指针设置为除NULL或0之外的特定地址。",
        "Name_ZH": "指针分配固定地址",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "永远不要将指针设置为固定地址。",
                    "Description_Merged": "永远不要将指针设置为固定地址。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "588",
        "Name": "Attempt to Access Child of a Non-structure Pointer",
        "Description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Description_Merged": "The choice could be made to use a language that is not susceptible to these issues.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Review of type casting operations can identify locations where incompatible types are cast.",
                    "Description_Merged": "Review of type casting operations can identify locations where incompatible types are cast.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "将非结构类型强制转换为结构类型并访问字段可能导致内存访问错误或数据损坏。",
        "Name_ZH": "尝试访问非结构指针的子节点",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Description_Merged": "可以选择使用不容易受到这些问题影响的编程语言。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "通过类型转换操作的审查，可以识别出类型不兼容的地方。",
                    "Description_Merged": "通过类型转换操作的审查，可以识别出类型不兼容的地方。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "589",
        "Name": "Call to Non-ubiquitous API",
        "Description": "The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Always test your code on any platform on which it is targeted to run on.",
                    "Description_Merged": "Always test your code on any platform on which it is targeted to run on.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Test your code on the newest and oldest platform on which it is targeted to run on.",
                    "Description_Merged": "Test your code on the newest and oldest platform on which it is targeted to run on.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Develop a system to test for API functions that are not portable.",
                    "Description_Merged": "Develop a system to test for API functions that are not portable.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品使用了在目标平台的所有版本上都不存在的API函数。这可能导致可移植性问题或不一致性，从而导致拒绝服务或其他后果。",
        "Name_ZH": "调用非普遍存在的API",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "始终在目标平台上测试代码的运行。",
                    "Description_Merged": "始终在目标平台上测试代码的运行。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "在目标平台的最新和最旧版本上测试代码的运行。",
                    "Description_Merged": "在目标平台的最新和最旧版本上测试代码的运行。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "开发一个系统来测试不可移植的API函数。",
                    "Description_Merged": "开发一个系统来测试不可移植的API函数。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "590",
        "Name": "Free of Memory not on the Heap",
        "Description": "The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.",
                    "Description_Merged": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.",
                    "Description_Merged": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, glibc in Linux provides protection against free of invalid pointers."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, glibc in Linux provides protection against free of invalid pointers.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Description_Merged": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Description_Merged": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品在未使用相关堆分配函数（如malloc()、calloc()或realloc()）分配内存的指针上调用了free()。",
        "Name_ZH": "释放非堆上的内存",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "只释放之前调用malloc分配的指针。这是推荐的解决方案。跟踪指针指向的有效块的开头，并且只释放一次。",
                    "Description_Merged": "只释放之前调用malloc分配的指针。这是推荐的解决方案。跟踪指针指向的有效块的开头，并且只释放一次。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在释放指针之前，程序员应确保该指针之前在堆上分配，并且内存属于程序员。释放未分配的指针将导致程序中的未定义行为。",
                    "Description_Merged": "在释放指针之前，程序员应确保该指针之前在堆上分配，并且内存属于程序员。释放未分配的指针将导致程序中的未定义行为。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Linux中的glibc提供了针对无效指针释放的保护。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用提供内存分配和释放抽象的语言。",
                    "Description_Merged": "使用提供内存分配和释放抽象的语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Description_Merged": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "591",
        "Name": "Sensitive Data Storage in Improperly Locked Memory",
        "Description": "The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.",
                    "Description_Merged": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check return values to ensure locking operations are successful.",
                    "Description_Merged": "Check return values to ensure locking operations are successful.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品将敏感数据存储在未锁定的内存中，或者锁定不正确的内存，这可能导致虚拟内存管理器将数据写入磁盘上的交换文件。这会使数据更容易被外部攻击者访问。",
        "Name_ZH": "敏感数据存储在未正确锁定的内存中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "识别需要保护免受交换的数据，并选择适合平台的保护机制。",
                    "Description_Merged": "识别需要保护免受交换的数据，并选择适合平台的保护机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "检查返回值以确保锁定操作成功。",
                    "Description_Merged": "检查返回值以确保锁定操作成功。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "592",
        "Name": "DEPRECATED: Authentication Bypass Issues",
        "Description": "This weakness has been deprecated because it covered redundant concepts already described in CWE-287.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此弱点已被弃用，因为它涵盖了CWE-287中已描述的冗余概念。",
        "Name_ZH": "已废弃：身份验证绕过问题",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "593",
        "Name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created",
        "Description": "The product modifies the SSL context after connection creation has begun.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a language or a library that provides a cryptography framework at a higher level of abstraction.",
                    "Description_Merged": "Use a language or a library that provides a cryptography framework at a higher level of abstraction.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.",
                    "Description_Merged": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Applications should set up an SSL_CTX completely, before creating SSL objects from it.",
                    "Description_Merged": "Applications should set up an SSL_CTX completely, before creating SSL objects from it.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在连接创建开始后修改了SSL上下文。",
        "Name_ZH": "身份验证绕过：在创建SSL对象后修改OpenSSL CTX对象",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用提供更高层次抽象的加密框架的语言或库。",
                    "Description_Merged": "使用提供更高层次抽象的加密框架的语言或库。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "大多数SSL_CTX函数都有作用于SSL类型对象的SSL对应函数。",
                    "Description_Merged": "大多数SSL_CTX函数都有作用于SSL类型对象的SSL对应函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "应用程序应在创建SSL对象之前完全设置一个SSL_CTX。",
                    "Description_Merged": "应用程序应在创建SSL对象之前完全设置一个SSL_CTX。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "594",
        "Name": "J2EE Framework: Saving Unserializable Objects to Disk",
        "Description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.",
                    "Description_Merged": "All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "当J2EE容器尝试将不可串行化的对象写入磁盘时，无法保证进程能够成功完成。",
        "Name_ZH": "J2EE框架：将不可序列化对象保存到磁盘",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "所有成为会话和应用程序范围的对象必须实现java.io.Serializable接口，以确保包含对象的可序列化性。",
                    "Description_Merged": "所有成为会话和应用程序范围的对象必须实现java.io.Serializable接口，以确保包含对象的可序列化性。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "595",
        "Name": "Comparison of Object References Instead of Object Contents",
        "Description": "The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.",
                    "Description_Merged": "In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品比较对象引用而不是对象内容本身，从而无法检测到等效对象。",
        "Name_ZH": "比较对象引用而非对象内容",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在Java中，使用equals()方法来比较对象，而不是使用==运算符。如果使用==，出于性能原因，重要的是确保您的对象是由静态工厂创建的，而不是通过构造函数创建的。",
                    "Description_Merged": "在Java中，使用equals()方法来比较对象，而不是使用==运算符。如果使用==，出于性能原因，重要的是确保您的对象是由静态工厂创建的，而不是通过构造函数创建的。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "596",
        "Name": "DEPRECATED: Incorrect Semantic Object Comparison",
        "Description": "This weakness has been deprecated. It was poorly described and difficult to distinguish from other entries. It was also inappropriate to assign a separate ID solely because of domain-specific considerations. Its closest equivalent is CWE-1023.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该弱点已被弃用。它的描述不清楚，很难与其他条目区分开来。仅仅因为领域特定的考虑而分配一个单独的ID也是不合适的。它最接近的等效弱点是CWE-1023。",
        "Name_ZH": "已废弃：不正确的语义对象比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "597",
        "Name": "Use of Wrong Operator in String Comparison",
        "Description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "#text": "Within Java, use .equals() to compare string values.Within JavaScript, use == to compare string values.Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)",
                        "br": [
                            "",
                            ""
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Within Java, use .equals() to compare string values.Within JavaScript, use == to compare string values.Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)\n\n",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在比较字符串时使用了错误的运算符，比如使用“==”而应该使用.equals()方法。",
        "Name_ZH": "在字符串比较中使用了错误的运算符",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "#text": "在Java中，使用.equals()方法来比较字符串值。在JavaScript中，使用==来比较字符串值。在PHP中，使用==来比较数值和字符串值。（PHP会将字符串转换为数值。）",
                        "br": [
                            "",
                            ""
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "在Java中，使用.equals()方法来比较字符串值。在JavaScript中，使用==来比较字符串值。在PHP中，使用==来比较数值和字符串值。（PHP会将字符串转换为数值。）\n\n",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "598",
        "Name": "Use of GET Request Method With Sensitive Query Strings",
        "Description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When sensitive information is sent, use the POST method (e.g. registration form).",
                    "Description_Merged": "When sensitive information is sent, use the POST method (e.g. registration form).",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该网络应用程序使用HTTP GET方法来处理请求，并在请求的查询字符串中包含敏感信息。",
        "Name_ZH": "使用GET请求方法传递敏感查询字符串",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "发送敏感信息时，请使用POST方法（例如注册表单）。",
                    "Description_Merged": "发送敏感信息时，请使用POST方法（例如注册表单）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "599",
        "Name": "Missing Validation of OpenSSL Certificate",
        "Description": "The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that proper authentication is included in the system design.",
                    "Description_Merged": "Ensure that proper authentication is included in the system design.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
                    "Description_Merged": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用OpenSSL，并信任或使用证书，但未使用SSL_get_verify_result()函数来确保证书满足所有必要的安全要求。",
        "Name_ZH": "未对OpenSSL证书进行验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保系统设计中包含适当的身份验证机制。",
                    "Description_Merged": "确保系统设计中包含适当的身份验证机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "理解并正确实施所有必要的检查来确保加密通信中涉及的实体的身份。",
                    "Description_Merged": "理解并正确实施所有必要的检查来确保加密通信中涉及的实体的身份。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "600",
        "Name": "Uncaught Exception in Servlet",
        "Description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Implement Exception blocks to handle all types of Exceptions.",
                    "Description_Merged": "Implement Exception blocks to handle all types of Exceptions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "Servlet没有捕获所有异常，这可能会暴露敏感的调试信息。",
        "Name_ZH": "在Servlet中未捕获的异常",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "实现异常块来处理所有类型的异常。",
                    "Description_Merged": "实现异常块来处理所有类型的异常。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "601",
        "Name": "URL Redirection to Untrusted Site ('Open Redirect')",
        "Description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "Use a list of approved URLs or domains to be used for redirection."
                        ]
                    },
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nUse a list of approved URLs or domains to be used for redirection.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.",
                    "Description_Merged": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-21.2",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": {
                        "p": [
                            "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                            "For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability."
                        ]
                    },
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nFor example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                            "Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields."
                        ]
                    },
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\nMany open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                }
            ]
        },
        "Description_ZH": "一个Web应用程序接受用户可控的输入，指定一个外部站点的链接，并在重定向中使用该链接。这简化了钓鱼攻击。",
        "Name_ZH": "将URL重定向到不受信任的站点（'开放重定向'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "使用批准的URL或域名列表用于重定向。"
                        ]
                    },
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n使用批准的URL或域名列表用于重定向。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用一个中间的免责声明页面，向用户清楚地提供他们正在离开当前网站的警告。实施一个较长的超时时间，然后才进行重定向，或者强制用户点击链接。在生成免责声明页面时，注意避免XSS问题（CWE-79）。",
                    "Description_Merged": "使用一个中间的免责声明页面，向用户清楚地提供他们正在离开当前网站的警告。实施一个较长的超时时间，然后才进行重定向，或者强制用户点击链接。在生成免责声明页面时，注意避免XSS问题（CWE-79）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-21.2",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": {
                        "p": [
                            "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                            "例如，ID 1可以映射为\"/login.asp\"，ID 2可以映射为\"http://www.example.com/\"。ESAPI AccessReferenceMap [REF-45]等功能提供了这种能力。"
                        ]
                    },
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。\n例如，ID 1可以映射为\"/login.asp\"，ID 2可以映射为\"http://www.example.com/\"。ESAPI AccessReferenceMap [REF-45]等功能提供了这种能力。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "通过要求所有重定向请求都包含应用程序生成的唯一nonce，确保不接受外部提供的请求[REF-483]。确保nonce不可预测（CWE-330）。",
                    "Effectiveness_Notes": "Note that this can be bypassed using XSS (CWE-79).",
                    "Description_Merged": "通过要求所有重定向请求都包含应用程序生成的唯一nonce，确保不接受外部提供的请求[REF-483]。确保nonce不可预测（CWE-330）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                            "许多开放式重定向问题是因为程序员假设某些输入无法被修改，例如cookies和隐藏的表单字段。"
                        ]
                    },
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。\n许多开放式重定向问题是因为程序员假设某些输入无法被修改，例如cookies和隐藏的表单字段。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                }
            ]
        }
    },
    {
        "ID": "602",
        "Name": "Client-Side Enforcement of Server-Side Security",
        "Description": "The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                            "Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."
                        ]
                    },
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.",
                    "Description_Merged": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Description_Merged": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Description_Merged": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品由一个依赖于客户端来实现保护服务器的机制的服务器组成。",
        "Name_ZH": "客户端强制执行服务器端安全性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于在客户端执行的任何安全检查，请确保在服务器端复制这些检查。攻击者可以在检查完成后修改值或更改客户端以完全删除客户端检查，从而绕过客户端检查。然后，这些修改后的值将被提交到服务器。",
                            "即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。"
                        ]
                    },
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保在服务器端复制这些检查。攻击者可以在检查完成后修改值或更改客户端以完全删除客户端检查，从而绕过客户端检查。然后，这些修改后的值将被提交到服务器。\n即使从服务器端安全性的角度来看，客户端检查提供的收益很小，它们仍然是有用的。首先，它们可以支持入侵检测。如果服务器接收到客户端应该拒绝的输入，则可能表示遭受了攻击。其次，客户端错误检查可以为用户提供有关有效输入的期望的有用反馈。第三，对于意外输入错误，服务器端处理时间可能会减少，尽管这通常只是一种小的节省。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果两个实体之间需要一定程度的信任，请使用完整性检查和强身份验证，以确保输入来自可信源。设计产品时，以集中的方式管理此信任，尤其是如果存在复杂或众多的通信渠道，以减少实施者错误地在单个代码路径中遗漏检查的风险。",
                    "Description_Merged": "如果两个实体之间需要一定程度的信任，请使用完整性检查和强身份验证，以确保输入来自可信源。设计产品时，以集中的方式管理此信任，尤其是如果存在复杂或众多的通信渠道，以减少实施者错误地在单个代码路径中遗漏检查的风险。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用与软件交互的动态工具和技术，使用大量多样化的输入进行测试，如模糊测试（fuzzing）、健壮性测试和故障注入。软件的操作可能会变慢，但不应出现不稳定、崩溃或生成错误结果的情况。",
                    "Description_Merged": "使用与软件交互的动态工具和技术，使用大量多样化的输入进行测试，如模糊测试（fuzzing）、健壮性测试和故障注入。软件的操作可能会变慢，但不应出现不稳定、崩溃或生成错误结果的情况。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Description_Merged": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "603",
        "Name": "Use of Client-Side Authentication",
        "Description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not rely on client side data. Always perform server side authentication.",
                    "Description_Merged": "Do not rely on client side data. Always perform server side authentication.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "一个客户端/服务器产品在客户端代码中执行身份验证，但在服务器代码中没有执行身份验证，允许通过修改客户端来绕过服务器端的身份验证检查。",
        "Name_ZH": "使用客户端端身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不要依赖客户端数据。始终执行服务器端身份验证。",
                    "Description_Merged": "不要依赖客户端数据。始终执行服务器端身份验证。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "605",
        "Name": "Multiple Binds to the Same Port",
        "Description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Policy",
                    "Description": "Restrict server socket address to known local addresses.",
                    "Description_Merged": "Restrict server socket address to known local addresses.",
                    "Phase_Merged": "Policy"
                }
            ]
        },
        "Description_ZH": "当允许多个套接字绑定到同一个端口时，可能会窃取或伪造该端口上的其他服务。",
        "Name_ZH": "多次绑定到同一端口",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "策略",
                    "Description": "限制服务器套接字地址为已知的本地地址。",
                    "Description_Merged": "限制服务器套接字地址为已知的本地地址。",
                    "Phase_Merged": "策略"
                }
            ]
        }
    },
    {
        "ID": "606",
        "Name": "Unchecked Input for Loop Condition",
        "Description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Do not use user-controlled data for loop conditions.",
                    "Description_Merged": "Do not use user-controlled data for loop conditions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Perform input validation.",
                    "Description_Merged": "Perform input validation.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品没有正确检查用于循环条件的输入，可能会因为过度循环导致拒绝服务或其他后果。",
        "Name_ZH": "未对循环条件进行输入验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "不要使用用户可控数据作为循环条件。",
                    "Description_Merged": "不要使用用户可控数据作为循环条件。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "进行输入验证。",
                    "Description_Merged": "进行输入验证。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "607",
        "Name": "Public Static Final Field References Mutable Object",
        "Description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
                    "Description_Merged": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "一个公共或受保护的静态常量字段引用了一个可变对象，这允许恶意代码或来自另一个包的意外更改该对象。",
        "Name_ZH": "公共静态最终字段引用可变对象",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "通过将可变对象设置为私有来保护其安全性。同时限制对getter和setter的访问。",
                    "Description_Merged": "通过将可变对象设置为私有来保护其安全性。同时限制对getter和setter的访问。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "608",
        "Name": "Struts: Non-private Field in ActionForm Class",
        "Description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.",
                    "Description_Merged": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "一个ActionForm类包含一个未声明为私有的字段，可以在不使用setter或getter的情况下访问。",
        "Name_ZH": "Struts：ActionForm类中的非私有字段",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将所有字段设置为私有。使用getter获取字段的值。setter应仅由框架使用；避免从其他操作中设置操作表单字段。",
                    "Description_Merged": "将所有字段设置为私有。使用getter获取字段的值。setter应仅由框架使用；避免从其他操作中设置操作表单字段。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "609",
        "Name": "Double-Checked Locking",
        "Description": "The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
                    "Description_Merged": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用双重检查锁定来访问资源，以避免显式同步的开销，但锁定不足。",
        "Name_ZH": "双重检查锁定",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "尽管一些语言可以实现双重检查锁定，但在Java 1.5之前，它存在固有缺陷，并且无法在不损害平台独立性的情况下实现。在Java 1.5之前，只有使用synchronized关键字被认为有效。从Java 1.5开始，使用\"volatile\"关键字可以使双重检查锁定成功工作，尽管有关其是否能够获得足够的性能提升存在一些争议。请参考相关资料。",
                    "Description_Merged": "尽管一些语言可以实现双重检查锁定，但在Java 1.5之前，它存在固有缺陷，并且无法在不损害平台独立性的情况下实现。在Java 1.5之前，只有使用synchronized关键字被认为有效。从Java 1.5开始，使用\"volatile\"关键字可以使双重检查锁定成功工作，尽管有关其是否能够获得足够的性能提升存在一些争议。请参考相关资料。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "610",
        "Name": "Externally Controlled Reference to a Resource in Another Sphere",
        "Description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用由外部控制的名称或引用，解析到超出预期控制范围的资源。",
        "Name_ZH": "在另一个领域中对资源进行外部控制引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "611",
        "Name": "Improper Restriction of XML External Entity Reference",
        "Description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration"
                    ],
                    "Description": "Many XML parsers and validators can be configured to disable external entity expansion.",
                    "Description_Merged": "Many XML parsers and validators can be configured to disable external entity expansion.",
                    "Phase_Merged": "Implementation / System Configuration"
                }
            ]
        },
        "Description_ZH": "该产品处理可能包含解析到超出预期控制范围的文档的XML文档，导致产品将错误的文档嵌入其输出。",
        "Name_ZH": "不正确的XML外部实体引用限制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "系统配置"
                    ],
                    "Description": "许多XML解析器和验证器可以配置为禁用外部实体扩展。",
                    "Description_Merged": "许多XML解析器和验证器可以配置为禁用外部实体扩展。",
                    "Phase_Merged": "实施 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "612",
        "Name": "Improper Authorization of Index Containing Sensitive Information",
        "Description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品创建了一个包含私有或敏感文档的搜索索引，但未正确限制索引访问权限，使未经授权的用户可以访问原始信息。",
        "Name_ZH": "未正确授权包含敏感信息的索引",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "613",
        "Name": "Insufficient Session Expiration",
        "Description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Set sessions/credentials expiration date.",
                    "Description_Merged": "Set sessions/credentials expiration date.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "根据WASC的说法，“不足的会话过期是指网站允许攻击者重用旧的会话凭据或会话ID进行授权”。",
        "Name_ZH": "会话过期不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "设置会话/凭证的过期日期。",
                    "Description_Merged": "设置会话/凭证的过期日期。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "614",
        "Name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "Description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Always set the secure attribute when the cookie should sent via HTTPS only.",
                    "Description_Merged": "Always set the secure attribute when the cookie should sent via HTTPS only.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在HTTPS会话中，敏感Cookie的Secure属性未设置，这可能导致用户代理在HTTP会话中以明文形式发送这些Cookie。",
        "Name_ZH": "HTTPS会话中的敏感Cookie缺少'Secure'属性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在仅通过HTTPS发送Cookie时，始终设置secure属性。",
                    "Description_Merged": "在仅通过HTTPS发送Cookie时，始终设置secure属性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "615",
        "Name": "Inclusion of Sensitive Information in Source Code Comments",
        "Description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Distribution",
                    "Description": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.",
                    "Description_Merged": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.",
                    "Phase_Merged": "Distribution"
                }
            ]
        },
        "Description_ZH": "尽管添加一般性的注释非常有用，但一些程序员倾向于留下重要的数据，例如：与Web应用程序相关的文件名、旧链接或不应由用户浏览的链接、旧代码片段等。",
        "Name_ZH": "在源代码注释中包含敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "分发",
                    "Description": "删除包含有关应用程序设计/实现敏感信息的注释。某些注释可能会暴露给用户，并影响应用程序的安全性。",
                    "Description_Merged": "删除包含有关应用程序设计/实现敏感信息的注释。某些注释可能会暴露给用户，并影响应用程序的安全性。",
                    "Phase_Merged": "分发"
                }
            ]
        }
    },
    {
        "ID": "616",
        "Name": "Incomplete Identification of Uploaded File Variables (PHP)",
        "Description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use PHP 4 or later.",
                    "Description_Merged": "Use PHP 4 or later.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
                    "Description_Merged": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.",
                    "Description_Merged": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该PHP应用程序使用了一种旧的方法来处理通过引用为每个文件设置的四个全局变量（例如$varname，$varname_size，$varname_name，$varname_type）上传的文件。这些变量可能被攻击者覆盖，导致应用程序处理未经授权的文件。",
        "Name_ZH": "未正确识别上传文件变量（PHP）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用PHP 4或更高版本。",
                    "Description_Merged": "使用PHP 4或更高版本。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果您必须支持较旧的PHP版本，请编写自己的is_uploaded_file()函数，并对$HTTP_POST_FILES['userfile']进行检查。",
                    "Description_Merged": "如果您必须支持较旧的PHP版本，请编写自己的is_uploaded_file()函数，并对$HTTP_POST_FILES['userfile']进行检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对于较新的PHP版本，请使用$HTTP_POST_FILES或$_FILES变量引用上传的文件，并使用is_uploaded_file()或move_uploaded_file()函数来确保您正在处理的是上传文件。",
                    "Description_Merged": "对于较新的PHP版本，请使用$HTTP_POST_FILES或$_FILES变量引用上传的文件，并使用is_uploaded_file()或move_uploaded_file()函数来确保您正在处理的是上传文件。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "617",
        "Name": "Reachable Assertion",
        "Description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
                    "Description_Merged": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Perform input validation on user data.",
                    "Description_Merged": "Perform input validation on user data.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品包含一个assert()或类似的语句，可以被攻击者触发，导致应用程序退出或产生比必要更严重的行为。",
        "Name_ZH": "可达的断言",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保敏感的打开/关闭操作不能被直接用户控制的数据访问（例如，打开/关闭资源）。",
                    "Description_Merged": "确保敏感的打开/关闭操作不能被直接用户控制的数据访问（例如，打开/关闭资源）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "对用户数据进行输入验证。",
                    "Description_Merged": "对用户数据进行输入验证。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "618",
        "Name": "Exposed Unsafe ActiveX Method",
        "Description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.",
                    "Description_Merged": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use code signing, although this does not protect against any weaknesses that are already in the control.",
                    "Description_Merged": "Use code signing, although this does not protect against any weaknesses that are already in the control.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "System Configuration"
                    ],
                    "Description": "Where possible, avoid marking the control as safe for scripting.",
                    "Description_Merged": "Where possible, avoid marking the control as safe for scripting.",
                    "Phase_Merged": "Architecture and Design / System Configuration"
                }
            ]
        },
        "Description_ZH": "一个ActiveX控件是用于在Web浏览器中使用的，但它暴露了危险的方法，执行的操作超出了浏览器的安全模型（例如，区域或域）。",
        "Name_ZH": "暴露的不安全ActiveX方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果必须公开一种方法，请确保对所有参数进行输入验证，并防范所有可能的漏洞。",
                    "Description_Merged": "如果必须公开一种方法，请确保对所有参数进行输入验证，并防范所有可能的漏洞。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用代码签名，尽管这不能防止已经存在于控制中的任何弱点。",
                    "Description_Merged": "使用代码签名，尽管这不能防止已经存在于控制中的任何弱点。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "系统配置"
                    ],
                    "Description": "在可能的情况下，避免将控件标记为可安全脚本化。",
                    "Description_Merged": "在可能的情况下，避免将控件标记为可安全脚本化。",
                    "Phase_Merged": "架构与设计 / 系统配置"
                }
            ]
        }
    },
    {
        "ID": "619",
        "Name": "Dangling Database Cursor ('Cursor Injection')",
        "Description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.",
                    "Description_Merged": "Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "如果数据库游标未正确关闭，则在保留相同权限的情况下，它可能对其他用户可访问，使游标\"悬空\"。",
        "Name_ZH": "悬空数据库游标（'游标注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在访问完游标后立即关闭它们。确保在出现异常时关闭游标。",
                    "Description_Merged": "在访问完游标后立即关闭它们。确保在出现异常时关闭游标。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "620",
        "Name": "Unverified Password Change",
        "Description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When prompting for a password change, force the user to provide the original password in addition to the new password.",
                    "Description_Merged": "When prompting for a password change, force the user to provide the original password in addition to the new password.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.",
                    "Description_Merged": "Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在为用户设置新密码时，该产品不要求知道原密码或使用其他形式的身份验证。",
        "Name_ZH": "未经验证的密码更改",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在提示用户更改密码时，强制用户提供原始密码以及新密码。",
                    "Description_Merged": "在提示用户更改密码时，强制用户提供原始密码以及新密码。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要使用“忘记密码”功能。但如果必须使用，请确保只向实际用户提供信息，例如使用用户过去提供的电子邮件地址或挑战问题；在正确的密码提供之前，不允许当前用户更改此身份信息。",
                    "Description_Merged": "不要使用“忘记密码”功能。但如果必须使用，请确保只向实际用户提供信息，例如使用用户过去提供的电子邮件地址或挑战问题；在正确的密码提供之前，不允许当前用户更改此身份信息。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "621",
        "Name": "Variable Extraction Error",
        "Description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Use allowlists of variable names that can be extracted.",
                    "Description_Merged": "Use allowlists of variable names that can be extracted.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Consider refactoring your code to avoid extraction routines altogether.",
                    "Description_Merged": "Consider refactoring your code to avoid extraction routines altogether.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
                    "Description_Merged": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来确定提取信息的变量名称，但未验证指定变量名称的有效性。这可能导致程序覆盖意外的变量。",
        "Name_ZH": "变量提取错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "使用允许列表来提取变量名。",
                    "Description_Merged": "使用允许列表来提取变量名。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "考虑重构代码，避免完全使用提取例程。",
                    "Description_Merged": "考虑重构代码，避免完全使用提取例程。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在PHP中，使用EXTR_SKIP和EXTR_PREFIX_ALL等选项调用extract()函数；使用prefix参数调用import_request_variables()函数。请注意，这些功能在所有PHP版本中并不都存在。",
                    "Description_Merged": "在PHP中，使用EXTR_SKIP和EXTR_PREFIX_ALL等选项调用extract()函数；使用prefix参数调用import_request_variables()函数。请注意，这些功能在所有PHP版本中并不都存在。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "622",
        "Name": "Improper Validation of Function Hook Arguments",
        "Description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that all arguments are verified, as defined by the API you are protecting.",
                    "Description_Merged": "Ensure that all arguments are verified, as defined by the API you are protecting.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Drop privileges before invoking such functions, if possible.",
                    "Description_Merged": "Drop privileges before invoking such functions, if possible.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品为用户可访问的API函数添加了钩子，但未正确验证参数。这可能导致产生漏洞。",
        "Name_ZH": "不正确验证函数钩子参数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保验证所有参数，按照所保护的API的定义。",
                    "Description_Merged": "确保验证所有参数，按照所保护的API的定义。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果可能的话，在调用这些函数之前降低权限。",
                    "Description_Merged": "如果可能的话，在调用这些函数之前降低权限。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "623",
        "Name": "Unsafe ActiveX Control Marked Safe For Scripting",
        "Description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "During development, do not mark it as safe for scripting.",
                    "Description_Merged": "During development, do not mark it as safe for scripting.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.",
                    "Description_Merged": "After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "一个ActiveX控件是用于受限制使用的，但它被标记为适用于脚本的安全。",
        "Name_ZH": "被标记为可供脚本使用的不安全ActiveX控件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在开发过程中，不要将其标记为安全的脚本。",
                    "Description_Merged": "在开发过程中，不要将其标记为安全的脚本。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "系统配置",
                    "Description": "在发布后，您可以为控件设置禁用位，以使其无法从Internet Explorer访问。",
                    "Description_Merged": "在发布后，您可以为控件设置禁用位，以使其无法从Internet Explorer访问。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "624",
        "Name": "Executable Regular Expression Error",
        "Description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
                    "Description_Merged": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用的正则表达式包含（1）带有用户可控输入的可执行组件，或（2）允许用户通过插入模式修饰器来启用执行。",
        "Name_ZH": "可执行的正则表达式错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "某些编程语言的正则表达式功能允许在插入之前对输入进行引用或转义，例如Perl中的\\Q和\\E。",
                    "Description_Merged": "某些编程语言的正则表达式功能允许在插入之前对输入进行引用或转义，例如Perl中的\\Q和\\E。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "625",
        "Name": "Permissive Regular Expression",
        "Description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
                    "Description_Merged": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用的正则表达式未能足够限制允许的值集。",
        "Name_ZH": "宽松的正则表达式",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果适用，确保正则表达式标记字符串的开头和结尾模式，例如Perl中的\"/^string$/\"。",
                    "Description_Merged": "如果适用，确保正则表达式标记字符串的开头和结尾模式，例如Perl中的\"/^string$/\"。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "626",
        "Name": "Null Byte Interaction Error (Poison Null Byte)",
        "Description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Remove null bytes from all incoming strings.",
                    "Description_Merged": "Remove null bytes from all incoming strings.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "当在不同的表示或组件之间传递数据时，该产品未正确处理空字节或NUL字符。",
        "Name_ZH": "空字节交互错误（毒零字节）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "从所有传入的字符串中删除空字节。",
                    "Description_Merged": "从所有传入的字符串中删除空字节。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "627",
        "Name": "Dynamic Variable Evaluation",
        "Description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Refactoring",
                    "Description": "Refactor the code to avoid dynamic variable evaluation whenever possible.",
                    "Description_Merged": "Refactor the code to avoid dynamic variable evaluation whenever possible.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Refactoring"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Use only allowlists of acceptable variable or function names.",
                    "Description_Merged": "Use only allowlists of acceptable variable or function names.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.",
                    "Description_Merged": "For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在一个用户可以在运行时影响变量名称的语言中，如果变量名称未受控制，攻击者可以读取或写入任意变量，或访问任意函数。",
        "Name_ZH": "动态变量评估",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "重构",
                    "Description": "尽量避免动态变量评估的代码重构。",
                    "Description_Merged": "尽量避免动态变量评估的代码重构。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "重构"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "仅使用可接受的变量或函数名称的白名单。",
                    "Description_Merged": "仅使用可接受的变量或函数名称的白名单。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "对于函数名称，确保只调用接受正确数量参数的函数，以避免意外的空参数。",
                    "Description_Merged": "对于函数名称，确保只调用接受正确数量参数的函数，以避免意外的空参数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "628",
        "Name": "Function Call with Incorrectly Specified Arguments",
        "Description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Build and Compilation",
                    "Description": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
                    "Description_Merged": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
                    "Phase_Merged": "Build and Compilation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make sure your API's are stable before you use them in production code.",
                    "Description_Merged": "Make sure your API's are stable before you use them in production code.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，并提供了不正确的参数，导致总是产生错误行为和相关的弱点。",
        "Name_ZH": "函数调用参数错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "构建和编译",
                    "Description": "一旦发现这些问题，修复起来很容易。使用代码检查工具和相关编译器功能来识别潜在的违规行为。特别注意在质量保证期间不太可能被频繁使用的代码。",
                    "Description_Merged": "一旦发现这些问题，修复起来很容易。使用代码检查工具和相关编译器功能来识别潜在的违规行为。特别注意在质量保证期间不太可能被频繁使用的代码。",
                    "Phase_Merged": "构建和编译"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保在生产代码中使用之前，API 是稳定的。",
                    "Description_Merged": "确保在生产代码中使用之前，API 是稳定的。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "636",
        "Name": "Not Failing Securely ('Failing Open')",
        "Description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.",
                    "Description_Merged": "Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "当该产品遇到错误条件或失败时，其设计要求其退回到比其他可用选项更不安全的状态，比如选择最弱的加密算法或使用最宽松的访问控制限制。",
        "Name_ZH": "未安全地失败（'失败开放'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "将资源和组件进行细分和分配，以防止一个部分的故障影响整个产品。",
                    "Description_Merged": "将资源和组件进行细分和分配，以防止一个部分的故障影响整个产品。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "637",
        "Name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')",
        "Description": "The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.",
                    "Description_Merged": "Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了比必要更复杂的机制，当机制没有被正确理解、建模、配置、实施或使用时，可能导致相关的弱点。",
        "Name_ZH": "保护机制中的不必要复杂性（未使用'经济机制'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "满足需求时尽量避免复杂的安全机制。避免复杂的数据模型和不必要的复杂操作。采用能提供保证、通过优雅和抽象简化理解，并可相似实现的架构。模块化、隔离和不信任复杂代码，并在这些模块上应用其他安全编程原则（例如，最小权限原则）以减轻漏洞。",
                    "Description_Merged": "满足需求时尽量避免复杂的安全机制。避免复杂的数据模型和不必要的复杂操作。采用能提供保证、通过优雅和抽象简化理解，并可相似实现的架构。模块化、隔离和不信任复杂代码，并在这些模块上应用其他安全编程原则（例如，最小权限原则）以减轻漏洞。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "638",
        "Name": "Not Using Complete Mediation",
        "Description": "The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.",
                    "Description_Merged": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
                    "Description_Merged": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在每次实体访问资源时没有执行访问检查，如果该实体的权限随时间改变，可能会产生相关的弱点。",
        "Name_ZH": "未使用完全中介",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "当身份、进程、策略、角色、能力或权限发生变化时，使缓存的权限、文件句柄或描述符等访问凭据失效。在接受、缓存和重用数据、动态内容和代码（脚本）之前执行完整的身份验证检查。尽可能避免缓存访问控制决策。",
                    "Description_Merged": "当身份、进程、策略、角色、能力或权限发生变化时，使缓存的权限、文件句柄或描述符等访问凭据失效。在接受、缓存和重用数据、动态内容和代码（脚本）之前执行完整的身份验证检查。尽可能避免缓存访问控制决策。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "识别可能访问敏感资源的所有可能代码路径。如果可能，创建并使用一个执行访问检查的单一接口，并开发要求使用该接口的代码标准。",
                    "Description_Merged": "识别可能访问敏感资源的所有可能代码路径。如果可能，创建并使用一个执行访问检查的单一接口，并开发要求使用该接口的代码标准。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "639",
        "Name": "Authorization Bypass Through User-Controlled Key",
        "Description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
                    "Description_Merged": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.",
                    "Description_Merged": "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
                    "Description_Merged": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "系统的授权功能没有阻止一个用户通过修改标识数据的关键值来访问另一个用户的数据或记录。",
        "Name_ZH": "通过用户控制的密钥绕过授权",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对于每一次数据访问，请确保用户具有足够的权限来访问所请求的记录。",
                    "Description_Merged": "对于每一次数据访问，请确保用户具有足够的权限来访问所请求的记录。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "确保在查找特定用户记录时使用的密钥不受用户外部控制，且可以检测到任何篡改行为。",
                    "Description_Merged": "确保在查找特定用户记录时使用的密钥不受用户外部控制，且可以检测到任何篡改行为。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用加密技术，增加猜测密钥的合法值的难度，或者为密钥关联一个数字签名，以便服务器可以验证是否存在篡改行为。",
                    "Description_Merged": "使用加密技术，增加猜测密钥的合法值的难度，或者为密钥关联一个数字签名，以便服务器可以验证是否存在篡改行为。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "640",
        "Name": "Weak Password Recovery Mechanism for Forgotten Password",
        "Description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.",
                    "Description_Merged": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use standard weak security questions and use several security questions.",
                    "Description_Merged": "Do not use standard weak security questions and use several security questions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.",
                    "Description_Merged": "Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.",
                    "Description_Merged": "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.",
                    "Description_Merged": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Assign a new temporary password rather than revealing the original password.",
                    "Description_Merged": "Assign a new temporary password rather than revealing the original password.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品包含了一个允许用户在不知道原始密码的情况下恢复或更改密码的机制，但该机制是脆弱的。",
        "Name_ZH": "用于忘记密码的弱密码恢复机制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保用户在密码恢复机制中提供的所有输入都经过彻底的过滤和验证。",
                    "Description_Merged": "确保用户在密码恢复机制中提供的所有输入都经过彻底的过滤和验证。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要使用标准的弱安全问题，而是使用多个安全问题。",
                    "Description_Merged": "不要使用标准的弱安全问题，而是使用多个安全问题。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保安全问题的错误答案数量受到限制。在一定（较小）数量的错误猜测后，禁用密码恢复功能。",
                    "Description_Merged": "确保安全问题的错误答案数量受到限制。在一定（较小）数量的错误猜测后，禁用密码恢复功能。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "要求用户在重置密码之前正确回答安全问题，并将新密码发送到预留的电子邮件地址。",
                    "Description_Merged": "要求用户在重置密码之前正确回答安全问题，并将新密码发送到预留的电子邮件地址。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在密码恢复机制中，不允许用户控制新密码将发送到的电子邮件地址。",
                    "Description_Merged": "在密码恢复机制中，不允许用户控制新密码将发送到的电子邮件地址。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "分配一个新的临时密码，而不是透露原始密码。",
                    "Description_Merged": "分配一个新的临时密码，而不是透露原始密码。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "641",
        "Name": "Improper Restriction of Names for Files and Other Resources",
        "Description": "The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not allow users to control names of resources used on the server side.",
                    "Description_Merged": "Do not allow users to control names of resources used on the server side.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.",
                    "Description_Merged": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
                    "Description_Merged": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用来自上游组件的输入来构建文件或其他资源的名称，但没有限制或错误限制生成的名称。",
        "Name_ZH": "对文件和其他资源的名称限制不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "不允许用户控制服务器端使用的资源名称。",
                    "Description_Merged": "不允许用户控制服务器端使用的资源名称。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在入口点和使用资源之前，执行白名单式的输入验证。拒绝不良的文件名，而不是尝试清理它们。",
                    "Description_Merged": "在入口点和使用资源之前，执行白名单式的输入验证。拒绝不良的文件名，而不是尝试清理它们。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保消耗资源的技术不容易受到漏洞的影响（例如缓冲区溢出、格式化字符串等），以防资源名称格式错误时导致代码执行。",
                    "Description_Merged": "确保消耗资源的技术不容易受到漏洞的影响（例如缓冲区溢出、格式化字符串等），以防资源名称格式错误时导致代码执行。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "642",
        "Name": "External Control of Critical State Data",
        "Description": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
                    "Description_Merged": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-14",
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Store state information and sensitive data on the server side only.",
                            "Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.",
                            "If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328)."
                        ]
                    },
                    "Description_Merged": "Store state information and sensitive data on the server side only.\nEnsure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.\nIf information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.",
                    "Description_Merged": "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.",
                            "Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.",
                            "Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nWith a stateless protocol such as HTTP, use some frameworks can maintain the state for you.\nExamples include ASP.NET View State and the OWASP ESAPI Session Management feature.\nBe careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Description_Merged": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Description_Merged": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品将其用户或产品本身的安全关键状态信息存储在未经授权的角色可访问的位置。",
        "Name_ZH": "对关键状态数据的外部控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "了解所有可能被攻击者访问的位置。例如，一些程序员可能认为cookie和隐藏表单字段不能被攻击者修改，或者可能没有考虑到在特权程序调用之前环境变量可以被修改。",
                    "Description_Merged": "了解所有可能被攻击者访问的位置。例如，一些程序员可能认为cookie和隐藏表单字段不能被攻击者修改，或者可能没有考虑到在特权程序调用之前环境变量可以被修改。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-14",
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "只在服务器端存储状态信息和敏感数据。",
                            "确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。",
                            "如果必须在客户端存储信息，请确保进行加密和完整性检查，或者在服务器端设置机制以检测篡改。可以使用消息认证码（MAC）算法，例如Hash Message Authentication Code（HMAC）[REF-529]。将其应用于需要公开的状态或敏感数据，可以确保数据的完整性，即数据未被修改。确保使用强大的哈希函数（CWE-328）。"
                        ]
                    },
                    "Description_Merged": "只在服务器端存储状态信息和敏感数据。\n确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。\n如果必须在客户端存储信息，请确保进行加密和完整性检查，或者在服务器端设置机制以检测篡改。可以使用消息认证码（MAC）算法，例如Hash Message Authentication Code（HMAC）[REF-529]。将其应用于需要公开的状态或敏感数据，可以确保数据的完整性，即数据未被修改。确保使用强大的哈希函数（CWE-328）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "只在服务器端存储状态信息。确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。",
                    "Description_Merged": "只在服务器端存储状态信息。确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "对于无状态协议（如HTTP），可以使用一些框架来为您维护状态。",
                            "例如，ASP.NET视图状态和OWASP ESAPI会话管理功能。",
                            "注意提供状态支持的语言特性，因为这些可能是为了方便程序员而提供的，可能没有考虑到安全性。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n对于无状态协议（如HTTP），可以使用一些框架来为您维护状态。\n例如，ASP.NET视图状态和OWASP ESAPI会话管理功能。\n注意提供状态支持的语言特性，因为这些可能是为了方便程序员而提供的，可能没有考虑到安全性。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Description_Merged": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Description_Merged": "使用需要人工分析的工具和技术，如渗透测试、威胁建模和允许测试人员记录和修改活动会话的交互式工具。这些方法可能比纯自动化技术更有效，尤其是与设计和业务规则相关的弱点。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "643",
        "Name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
        "Description": "The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.",
                    "Description_Merged": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.",
                    "Description_Merged": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入来动态构建用于从XML数据库中检索数据的XPath表达式，但没有中和或错误中和该输入。这使得攻击者可以控制查询的结构。",
        "Name_ZH": "XPath表达式中数据的不正确中和（'XPath注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用参数化的XPath查询（例如使用XQuery）。这将有助于确保数据平面和控制平面之间的分离。",
                    "Description_Merged": "使用参数化的XPath查询（例如使用XQuery）。这将有助于确保数据平面和控制平面之间的分离。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "适当验证用户输入。在适当的情况下拒绝数据，过滤数据，以及适当地转义数据。确保在XPath查询中使用的输入在该上下文中是安全的。",
                    "Description_Merged": "适当验证用户输入。在适当的情况下拒绝数据，过滤数据，以及适当地转义数据。确保在XPath查询中使用的输入在该上下文中是安全的。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "644",
        "Name": "Improper Neutralization of HTTP Headers for Scripting Syntax",
        "Description": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.",
                    "Description_Merged": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Disable script execution functionality in the clients' browser.",
                    "Description_Merged": "Disable script execution functionality in the clients' browser.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品没有中和或错误中和HTTP头部中的网络脚本语法，这些头部可以被可以处理原始头部的Web浏览器组件使用，比如Flash。",
        "Name_ZH": "用于脚本语法的HTTP头部的不正确中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "执行输出验证以过滤/转义/编码从服务器传递给客户端的不安全数据，该数据包含在HTTP响应头中。",
                    "Description_Merged": "执行输出验证以过滤/转义/编码从服务器传递给客户端的不安全数据，该数据包含在HTTP响应头中。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在客户端浏览器中禁用脚本执行功能。",
                    "Description_Merged": "在客户端浏览器中禁用脚本执行功能。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "645",
        "Name": "Overly Restrictive Account Lockout Mechanism",
        "Description": "The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
                    "Description_Merged": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.",
                    "Description_Merged": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).",
                    "Description_Merged": "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品包含一个账户锁定保护机制，但该机制过于严格且容易触发，这使得攻击者可以通过导致合法用户账户被锁定来拒绝服务。",
        "Name_ZH": "过于限制的帐户锁定机制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "实施更智能的密码限制机制，例如根据IP地址和登录名进行限制。",
                    "Description_Merged": "实施更智能的密码限制机制，例如根据IP地址和登录名进行限制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "实施锁定超时时间，随着错误登录尝试次数的增加而逐渐增大，最终导致完全锁定。",
                    "Description_Merged": "实施锁定超时时间，随着错误登录尝试次数的增加而逐渐增大，最终导致完全锁定。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "考虑替代账户锁定的方法，以仍然有效地防御密码暴力破解攻击，例如向用户的计算机提供需要解决的难题。",
                    "Description_Merged": "考虑替代账户锁定的方法，以仍然有效地防御密码暴力破解攻击，例如向用户的计算机提供需要解决的难题。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "646",
        "Name": "Reliance on File Name or Extension of Externally-Supplied File",
        "Description": "The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make decisions on the server side based on file content and not on file name or extension.",
                    "Description_Merged": "Make decisions on the server side based on file content and not on file name or extension.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品允许上传文件，但它依赖于文件名或扩展名来确定适当的行为。攻击者可以利用这一点将文件分类错误并以危险的方式处理。",
        "Name_ZH": "依赖外部提供的文件名或扩展名",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "基于文件内容而不是文件名或扩展名，在服务器端基于路径信息做出决策。",
                    "Description_Merged": "基于文件内容而不是文件名或扩展名，在服务器端基于路径信息做出决策。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "647",
        "Name": "Use of Non-Canonical URL Paths for Authorization Decisions",
        "Description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.",
                    "Description_Merged": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Reject all alternate path encodings that are not in the expected canonical form.",
                    "Description_Merged": "Reject all alternate path encodings that are not in the expected canonical form.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品定义了策略命名空间，并根据URL是规范的假设来进行授权决策。这可能允许非规范的URL绕过授权。",
        "Name_ZH": "使用非规范URL路径进行授权决策",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用非常严格的正则表达式验证路径是否符合预期的格式，以制定访问控制策略。",
                    "Description_Merged": "使用非常严格的正则表达式验证路径是否符合预期的格式，以制定访问控制策略。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "拒绝所有不符合预期规范的备用路径编码。",
                    "Description_Merged": "拒绝所有不符合预期规范的备用路径编码。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "648",
        "Name": "Incorrect Use of Privileged APIs",
        "Description": "The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.",
                    "Description_Merged": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.",
                    "Description_Merged": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.",
                    "Description_Merged": "If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.",
                    "Description_Merged": "If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Only call privileged APIs from safe, consistent and expected state.",
                    "Description_Merged": "Only call privileged APIs from safe, consistent and expected state.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
                    "Description_Merged": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品没有符合需要额外权限的函数调用的API要求。这可能使攻击者通过使函数调用不正确来获取权限。",
        "Name_ZH": "错误使用特权API",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在调用特权API之前，始终确保特权代码所做的假设在调用之前成立。",
                    "Description_Merged": "在调用特权API之前，始终确保特权代码所做的假设在调用之前成立。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在调用特权API之前，请了解特权API的架构和实现上的弱点，并确保在调用特权API之前对这些弱点进行考虑，以确保能够安全地调用它们。",
                    "Description_Merged": "在调用特权API之前，请了解特权API的架构和实现上的弱点，并确保在调用特权API之前对这些弱点进行考虑，以确保能够安全地调用它们。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果特权API对由调用者传递的数据、上下文或状态有效性做出了某些假设，则调用代码必须在调用之前验证这些假设。",
                    "Description_Merged": "如果特权API对由调用者传递的数据、上下文或状态有效性做出了某些假设，则调用代码必须在调用之前验证这些假设。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果特权API在返回给调用代码之前不放弃其特权，则调用代码需要在调用特权API后立即且安全地放弃这些特权。特别是，调用代码需要确保特权执行线程永远不会返回给用户或提供给用户可控进程。",
                    "Description_Merged": "如果特权API在返回给调用代码之前不放弃其特权，则调用代码需要在调用特权API后立即且安全地放弃这些特权。特别是，调用代码需要确保特权执行线程永远不会返回给用户或提供给用户可控进程。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "只能从安全、一致和预期的状态调用特权API。",
                    "Description_Merged": "只能从安全、一致和预期的状态调用特权API。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "确保失败或错误不会使系统处于特权未正确放弃且可能发生特权提升的状态（即在处理特权时要进行安全失败）。",
                    "Description_Merged": "确保失败或错误不会使系统处于特权未正确放弃且可能发生特权提升的状态（即在处理特权时要进行安全失败）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "649",
        "Name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
        "Description": "The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.",
                    "Description_Merged": "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.",
                    "Description_Merged": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.",
                    "Description_Merged": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.",
                    "Description_Merged": "Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品对不应该由外部参与者更改的输入使用了混淆或加密，但它没有使用完整性检查来检测这些输入是否已被修改。",
        "Name_ZH": "依赖对安全相关输入的混淆或加密而不进行完整性检查",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用PKI方法（如数字签名）或其他手段，保护重要的客户可控令牌/参数的完整性，并在服务器端进行完整性检查。",
                    "Description_Merged": "使用PKI方法（如数字签名）或其他手段，保护重要的客户可控令牌/参数的完整性，并在服务器端进行完整性检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "来自特定用户的重复请求，如果包含无效的令牌/参数值（不应由用户手动更改的值），应导致用户账户被锁定。",
                    "Description_Merged": "来自特定用户的重复请求，如果包含无效的令牌/参数值（不应由用户手动更改的值），应导致用户账户被锁定。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "客户端的令牌/参数不应该是易于猜测另一个有效状态的。",
                    "Description_Merged": "客户端的令牌/参数不应该是易于猜测另一个有效状态的。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不应依赖混淆。如果使用加密，需要正确应用（即使用经过验证的算法和实现，使用填充，使用随机初始化向量，使用适当的加密模式）。即使使用了正确的加密，其中的密文不泄漏明文信息，也不透露其结构，但在没有提供完整性服务的情况下，破坏完整性是可能的（尽管不太可能）。",
                    "Description_Merged": "不应依赖混淆。如果使用加密，需要正确应用（即使用经过验证的算法和实现，使用填充，使用随机初始化向量，使用适当的加密模式）。即使使用了正确的加密，其中的密文不泄漏明文信息，也不透露其结构，但在没有提供完整性服务的情况下，破坏完整性是可能的（尽管不太可能）。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "650",
        "Name": "Trusting HTTP Permission Methods on the Server Side",
        "Description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.",
                    "Description_Merged": "Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "服务器包含一个保护机制，它假设使用HTTP GET访问的任何URI不会导致关联资源的状态更改。这可能允许攻击者绕过预期的访问限制，并进行资源修改和删除攻击，因为某些应用程序允许GET修改状态。",
        "Name_ZH": "信任服务器端的HTTP权限方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "在服务器端配置访问控制列表（ACLs），以确保为每个可访问资源表示定义了适当的访问控制级别。",
                    "Description_Merged": "在服务器端配置访问控制列表（ACLs），以确保为每个可访问资源表示定义了适当的访问控制级别。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "651",
        "Name": "Exposure of WSDL File Containing Sensitive Information",
        "Description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.",
                    "Description_Merged": "Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.",
                    "Description_Merged": "Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.",
                    "Description_Merged": "Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "Web服务架构可能需要公开一个包含可公开访问的服务信息以及调用这些服务的调用方应该如何与它们交互的Web服务定义语言（WSDL）文件（例如，它们期望哪些参数和返回哪些类型）。",
        "Name_ZH": "包含敏感信息的WSDL文件的暴露",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "尽量限制对WSDL文件的访问。如果服务仅提供给有限数量的实体，则最好将WSDL私下提供给每个实体，而不是公开发布。",
                    "Description_Merged": "尽量限制对WSDL文件的访问。如果服务仅提供给有限数量的实体，则最好将WSDL私下提供给每个实体，而不是公开发布。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "确保WSDL不描述不应公开访问的方法。确保用访问控制保护不应公开访问的服务方法。",
                    "Description_Merged": "确保WSDL不描述不应公开访问的方法。确保用访问控制保护不应公开访问的服务方法。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要在WSDL中使用可能帮助对手猜测服务所使用的私有方法/资源名称的方法名。",
                    "Description_Merged": "不要在WSDL中使用可能帮助对手猜测服务所使用的私有方法/资源名称的方法名。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "652",
        "Name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
        "Description": "The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
                    "Description_Merged": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.",
                    "Description_Merged": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用外部输入动态构造用于从XML数据库检索数据的XQuery表达式，但它没有中和或错误中和该输入。这使得攻击者可以控制查询的结构。",
        "Name_ZH": "XQuery表达式中数据的不正确中和（'XQuery注入'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用参数化查询。这有助于确保数据平面和控制平面之间的分离。",
                    "Description_Merged": "使用参数化查询。这有助于确保数据平面和控制平面之间的分离。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "正确验证用户输入。在适当的情况下拒绝数据，过滤适当的数据，适当时进行转义。确保将在XQL查询中使用的输入在该上下文中是安全的。",
                    "Description_Merged": "正确验证用户输入。在适当的情况下拒绝数据，过滤适当的数据，适当时进行转义。确保将在XQL查询中使用的输入在该上下文中是安全的。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "653",
        "Name": "Improper Isolation or Compartmentalization",
        "Description": "The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.",
                    "Description_Merged": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品没有正确地对需要不同特权级别、权限或许可的功能、进程或资源进行隔离。",
        "Name_ZH": "不正确的隔离或分隔",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在不同模块、对象或实体之间分解权限。最小化模块之间的接口，并要求它们之间进行强大的访问控制。",
                    "Description_Merged": "在不同模块、对象或实体之间分解权限。最小化模块之间的接口，并要求它们之间进行强大的访问控制。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "654",
        "Name": "Reliance on a Single Factor in a Security Decision",
        "Description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
                    "Description_Merged": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use redundant access rules on different choke points (e.g., firewalls).",
                    "Description_Merged": "Use redundant access rules on different choke points (e.g., firewalls).",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "保护机制完全或在很大程度上依赖于对单一条件或单一对象或实体的完整性评估，以便决定是否授予对受限资源或功能的访问。",
        "Name_ZH": "在安全决策中仅依赖单一因素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在授予关键操作或关键特权之前使用多重同时检查。一种较弱但有帮助的缓解措施是使用几个连续的检查（多层安全）。",
                    "Description_Merged": "在授予关键操作或关键特权之前使用多重同时检查。一种较弱但有帮助的缓解措施是使用几个连续的检查（多层安全）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在不同的阻塞点（例如防火墙）上使用冗余的访问规则。",
                    "Description_Merged": "在不同的阻塞点（例如防火墙）上使用冗余的访问规则。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "655",
        "Name": "Insufficient Psychological Acceptability",
        "Description": "The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.",
                    "Description_Merged": "Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.",
                    "Description_Merged": "Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品具有一个过于困难或不便使用的保护机制，鼓励非恶意用户禁用或绕过该机制，无论是意外还是故意。",
        "Name_ZH": "不足的心理可接受性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在可能的情况下，进行人因因素和可用性研究，以确定产品安全机制的使用难度和原因。",
                    "Description_Merged": "在可能的情况下，进行人因因素和可用性研究，以确定产品安全机制的使用难度和原因。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "尽可能使安全机制无缝，同时在安全决策产生意外结果时为用户提供足够的详细信息。",
                    "Description_Merged": "尽可能使安全机制无缝，同时在安全决策产生意外结果时为用户提供足够的详细信息。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "656",
        "Name": "Reliance on Security Through Obscurity",
        "Description": "The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
                    "Description_Merged": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
                    "Description_Merged": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个保护机制，其强度严重依赖于其晦涩的算法或关键数据，只要了解其算法或关键数据，就足以破坏该机制。",
        "Name_ZH": "依赖安全性通过混淆",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "始终考虑您对代码或设计的了解是否足以被破解。逆向工程是一门非常成功的学科，对于有动机的对手来说，在经济上也是可行的。已经建立了针对使用混淆、专有协议的运行时分析、推断文件格式等可执行文件的黑盒技术。",
                    "Description_Merged": "始终考虑您对代码或设计的了解是否足以被破解。逆向工程是一门非常成功的学科，对于有动机的对手来说，在经济上也是可行的。已经建立了针对使用混淆、专有协议的运行时分析、推断文件格式等可执行文件的黑盒技术。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果有的话，请使用经过公开审核的算法和流程，因为这些更有可能经受过更广泛的安全分析和测试。这尤其适用于加密和认证。",
                    "Description_Merged": "如果有的话，请使用经过公开审核的算法和流程，因为这些更有可能经受过更广泛的安全分析和测试。这尤其适用于加密和认证。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "657",
        "Name": "Violation of Secure Design Principles",
        "Description": "The product violates well-established principles for secure design.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品违反了安全设计的基本原则。",
        "Name_ZH": "违反安全设计原则",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "662",
        "Name": "Improper Synchronization",
        "Description": "The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use industry standard APIs to synchronize your code.",
                    "Description_Merged": "Use industry standard APIs to synchronize your code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品利用多个线程或进程来允许对一个共享资源的临时访问，但它没有正确地同步这些操作，可能导致多个线程或进程同时访问该资源。",
        "Name_ZH": "不正确的同步",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "使用行业标准的API来同步您的代码。",
                    "Description_Merged": "使用行业标准的API来同步您的代码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "663",
        "Name": "Use of a Non-reentrant Function in a Concurrent Context",
        "Description": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use reentrant functions if available.",
                    "Description_Merged": "Use reentrant functions if available.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Add synchronization to your non-reentrant function.",
                    "Description_Merged": "Add synchronization to your non-reentrant function.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "In Java, use the ReentrantLock Class.",
                    "Description_Merged": "In Java, use the ReentrantLock Class.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在并发环境中在调用一个非可重入函数时，可能会有其他竞争的代码序列（例如线程或信号处理程序）有机会调用相同的函数或以其他方式影响其状态。",
        "Name_ZH": "在并发上下文中使用不可重入函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果有的话，请使用可重入函数。",
                    "Description_Merged": "如果有的话，请使用可重入函数。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "为您的非可重入函数添加同步。",
                    "Description_Merged": "为您的非可重入函数添加同步。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在Java中，使用ReentrantLock类。",
                    "Description_Merged": "在Java中，使用ReentrantLock类。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "664",
        "Name": "Improper Control of a Resource Through its Lifetime",
        "Description": "The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Use Static analysis tools to check for unreleased resources.",
                    "Description_Merged": "Use Static analysis tools to check for unreleased resources.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品在创建、使用和释放资源的整个生命周期中，没有维护或错误地维护对该资源的控制。",
        "Name_ZH": "通过其生命周期对资源的不正确控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "使用静态分析工具来检查未释放的资源。",
                    "Description_Merged": "使用静态分析工具来检查未释放的资源。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "665",
        "Name": "Improper Initialization",
        "Description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.",
                    "Description_Merged": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
                    "Description_Merged": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.",
                    "Description_Merged": "Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Description_Merged": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "Run or compile your product with settings that generate warnings about uninitialized variables or data.",
                    "Description_Merged": "Run or compile your product with settings that generate warnings about uninitialized variables or data.",
                    "Phase_Merged": "Build and Compilation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品没有初始化或错误地初始化一个资源，当访问或使用该资源时，可能会使该资源处于意外的状态。",
        "Name_ZH": "不正确的初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，在Java中，如果程序员没有显式初始化变量，那么代码可能会产生编译时错误（如果变量是局部变量），或者自动将变量初始化为变量类型的默认值。在Perl中，如果未进行显式初始化，则会分配一个默认值undef，它在使用变量的上下文中被解释为0、false或等效值。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，在Java中，如果程序员没有显式初始化变量，那么代码可能会产生编译时错误（如果变量是局部变量），或者自动将变量初始化为变量类型的默认值。在Perl中，如果未进行显式初始化，则会分配一个默认值undef，它在使用变量的上下文中被解释为0、false或等效值。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确定所有从外部来源接收信息的变量和数据存储，并应用输入验证以确保它们仅被初始化为预期值。",
                    "Description_Merged": "确定所有从外部来源接收信息的变量和数据存储，并应用输入验证以确保它们仅被初始化为预期值。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "明确地初始化所有变量和其他数据存储，无论是在声明时还是在第一次使用之前。",
                    "Description_Merged": "明确地初始化所有变量和其他数据存储，无论是在声明时还是在第一次使用之前。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "要特别注意影响初始化的复杂条件，因为某些条件可能不执行初始化。",
                    "Description_Merged": "要特别注意影响初始化的复杂条件，因为某些条件可能不执行初始化。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Description_Merged": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "使用设置生成关于未初始化变量或数据的警告来运行或编译您的产品。",
                    "Description_Merged": "使用设置生成关于未初始化变量或数据的警告来运行或编译您的产品。",
                    "Phase_Merged": "构建和编译"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "666",
        "Name": "Operation on Resource in Wrong Phase of Lifetime",
        "Description": "The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Follow the resource's lifecycle from creation to release.",
                    "Description_Merged": "Follow the resource's lifecycle from creation to release.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在资源的生命周期的错误阶段执行操作，这可能导致意外的行为。",
        "Name_ZH": "在生命周期的错误阶段操作资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "从资源的创建到释放，遵循资源的生命周期。",
                    "Description_Merged": "从资源的创建到释放，遵循资源的生命周期。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "667",
        "Name": "Improper Locking",
        "Description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use industry standard APIs to implement locking mechanism.",
                    "Description_Merged": "Use industry standard APIs to implement locking mechanism.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "该产品没有正确地获取或释放对资源的锁定，导致资源状态的意外变化和行为。",
        "Name_ZH": "不正确的锁定",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": "使用行业标准的API实现锁定机制。",
                    "Description_Merged": "使用行业标准的API实现锁定机制。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "668",
        "Name": "Exposure of Resource to Wrong Sphere",
        "Description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将资源暴露给错误的控制领域，使意外的角色获得对资源的不适当访问权限。",
        "Name_ZH": "将资源暴露给错误的领域",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "669",
        "Name": "Incorrect Resource Transfer Between Spheres",
        "Description": "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在将资源/行为转移到另一个领域时，存在不正确的操作，或者在从另一个领域导入资源/行为时存在不正确的操作，从而以一种未经意的方式控制该资源。",
        "Name_ZH": "在领域之间不正确地转移资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "670",
        "Name": "Always-Incorrect Control Flow Implementation",
        "Description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码中存在一个控制流路径，它无法反映该路径本应实现的算法，导致每次导航该路径时都会出现错误行为。",
        "Name_ZH": "始终错误的控制流程实现",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "671",
        "Name": "Lack of Administrator Control over Security",
        "Description": "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用安全功能的方式阻止产品管理员根据产品使用环境自定义安全设置。这可能引入漏洞或阻止产品在管理员所期望的安全级别下运行。",
        "Name_ZH": "管理员对安全性缺乏控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "672",
        "Name": "Operation on a Resource after Expiration or Release",
        "Description": "The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "在资源过期、释放或被撤销后，该产品仍然使用、访问或操作该资源。",
        "Name_ZH": "在过期或释放后对资源进行操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "673",
        "Name": "External Influence of Sphere Definition",
        "Description": "The product does not prevent the definition of control spheres from external actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品无法防止外部操作者定义控制领域。",
        "Name_ZH": "领域定义受外部影响",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "674",
        "Name": "Uncontrolled Recursion",
        "Description": "The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Increase the stack size.",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Increasing the stack size might only be a temporary measure, since the stack typically is still not very large, and it might remain easy for attackers to cause an out-of-stack fault.",
                    "Description_Merged": "Increase the stack size.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品无法正确控制递归的次数，导致消耗大量资源，如内存分配或程序堆栈。",
        "Name_ZH": "无控制的递归",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保在所有逻辑条件下都会达到终止条件。终止条件可能包括对递归深度的测试，并在递归深度过深时退出并显示错误。终止条件的复杂性对此操作的有效性有影响。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "确保在所有逻辑条件下都会达到终止条件。终止条件可能包括对递归深度的测试，并在递归深度过深时退出并显示错误。终止条件的复杂性对此操作的有效性有影响。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "增加堆栈大小。",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Increasing the stack size might only be a temporary measure, since the stack typically is still not very large, and it might remain easy for attackers to cause an out-of-stack fault.",
                    "Description_Merged": "增加堆栈大小。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "675",
        "Name": "Multiple Operations on Resource in Single-Operation Context",
        "Description": "The product performs the same operation on a resource two or more times, when the operation should only be applied once.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品对同一资源执行两次或更多次相同的操作，而该操作只应应用一次。",
        "Name_ZH": "在单操作上下文中对资源进行多次操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "676",
        "Name": "Use of Potentially Dangerous Function",
        "Description": "The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Build and Compilation",
                        "Implementation"
                    ],
                    "Description": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
                    "Description_Merged": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
                    "Phase_Merged": "Build and Compilation / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个潜在危险的函数，如果使用不正确，可能会引入漏洞，但该函数也可以安全使用。",
        "Name_ZH": "使用潜在危险的函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "构建和编译",
                        "实施"
                    ],
                    "Description": "识别一组禁止使用的API函数，并禁止开发人员使用这些函数，提供更安全的替代方案。在某些情况下，可以通过自动代码分析工具或编译器来指示禁止使用的函数，例如微软的SDL中的\"banned.h\"包含文件。[REF-554] [REF-7]",
                    "Description_Merged": "识别一组禁止使用的API函数，并禁止开发人员使用这些函数，提供更安全的替代方案。在某些情况下，可以通过自动代码分析工具或编译器来指示禁止使用的函数，例如微软的SDL中的\"banned.h\"包含文件。[REF-554] [REF-7]",
                    "Phase_Merged": "构建和编译 / 实施"
                }
            ]
        }
    },
    {
        "ID": "680",
        "Name": "Integer Overflow to Buffer Overflow",
        "Description": "The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品执行计算以确定要分配多少内存，但可能会发生整数溢出，导致分配的内存少于预期，从而引发缓冲区溢出。",
        "Name_ZH": "整数溢出导致缓冲区溢出",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "681",
        "Name": "Incorrect Conversion between Numeric Types",
        "Description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Avoid making conversion between numeric types. Always check for the allowed ranges.",
                    "Description_Merged": "Avoid making conversion between numeric types. Always check for the allowed ranges.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在进行数据类型转换时，例如长整型转整型，数据可能会被省略或以产生意外值的方式转换。如果所得值在敏感上下文中使用，则可能发生危险行为。",
        "Name_ZH": "不正确的数值类型转换",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "避免在数值类型之间进行转换。始终检查允许的范围。",
                    "Description_Merged": "避免在数值类型之间进行转换。始终检查允许的范围。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "682",
        "Name": "Incorrect Calculation",
        "Description": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.",
                    "Description_Merged": "Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
                    "Description_Merged": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.",
                    "Description_Merged": "Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.",
                            "Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++)."
                        ]
                    },
                    "Description_Merged": "Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.",
                            "Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++)."
                        ]
                    },
                    "Description_Merged": "Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "Implementation",
                    "Strategy": "Compilation or Build Hardening",
                    "Description": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Description_Merged": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Compilation or Build Hardening"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Description_Merged": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Description_Merged": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品执行了一个计算，生成了错误或意外的结果，而后这些结果被用于安全关键决策或资源管理中。",
        "Name_ZH": "计算错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "了解编程语言的底层表示及其与数值计算的交互方式。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和转型、\"非数字\"计算以及语言如何处理其底层表示无法容纳的过大或过小的数字。",
                    "Description_Merged": "了解编程语言的底层表示及其与数值计算的交互方式。特别注意字节大小差异、精度、有符号/无符号区别、截断、类型之间的转换和转型、\"非数字\"计算以及语言如何处理其底层表示无法容纳的过大或过小的数字。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-8",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。",
                    "Description_Merged": "通过确保输入在预期范围内，对任何数值输入进行输入验证。强制要求输入满足预期范围的最小和最大要求。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "针对所需操作使用适当的类型。例如，在C/C++中，只使用无符号类型来表示永远不会为负的值，如高度、宽度或其他与数量相关的数字。",
                    "Description_Merged": "针对所需操作使用适当的类型。例如，在C/C++中，只使用无符号类型来表示永远不会为负的值，如高度、宽度或其他与数量相关的数字。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用能够更容易处理数字且不会产生意外后果的语言、库或框架。",
                            "例如，安全的整数处理包，如SafeInt（C++）或IntegerLib（C或C++）。"
                        ]
                    },
                    "Description_Merged": "使用能够更容易处理数字且不会产生意外后果的语言、库或框架。\n例如，安全的整数处理包，如SafeInt（C++）或IntegerLib（C或C++）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用能够更容易处理数字且不会产生意外后果的语言、库或框架。",
                            "例如，安全的整数处理包，如SafeInt（C++）或IntegerLib（C或C++）。"
                        ]
                    },
                    "Description_Merged": "使用能够更容易处理数字且不会产生意外后果的语言、库或框架。\n例如，安全的整数处理包，如SafeInt（C++）或IntegerLib（C或C++）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-26",
                    "Phase": "实施",
                    "Strategy": "编译或构建加固",
                    "Description": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Description_Merged": "仔细检查编译器警告，并消除与潜在安全问题有关的问题，例如内存操作中的有符号/无符号不匹配，或者使用未初始化的变量。即使弱点很少被利用，单一故障也可能导致整个系统被攻击。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "编译或构建加固"
                },
                {
                    "Phase": "测试",
                    "Description": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Description_Merged": "使用针对此类漏洞的自动静态分析工具。许多现代技术使用数据流分析来减少误报的数量。这并不是一个完美的解决方案，因为无法实现100%的准确性和覆盖率。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "测试",
                    "Description": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Description_Merged": "使用与产品交互的大型测试套件和多样化输入的动态工具和技术，例如模糊测试（fuzzing）、健壮性测试和故障注入。产品的运行可能会变慢，但不应变得不稳定、崩溃或生成错误结果。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "683",
        "Name": "Function Call With Incorrect Order of Arguments",
        "Description": "The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use the function, procedure, or routine as specified.",
                    "Description_Merged": "Use the function, procedure, or routine as specified.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Description_Merged": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，但调用者以错误的顺序指定了参数，导致结果存在弱点。",
        "Name_ZH": "函数调用参数顺序错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "按照指定的函数、过程或例程使用。",
                    "Description_Merged": "按照指定的函数、过程或例程使用。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Description_Merged": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "684",
        "Name": "Incorrect Provision of Specified Functionality",
        "Description": "The code does not function according to its published specifications, potentially leading to incorrect usage.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that your code strictly conforms to specifications.",
                    "Description_Merged": "Ensure that your code strictly conforms to specifications.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码的功能与其发布的规范不符，可能导致错误的使用。",
        "Name_ZH": "错误提供了指定功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保您的代码严格符合规范。",
                    "Description_Merged": "确保您的代码严格符合规范。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "685",
        "Name": "Function Call With Incorrect Number of Arguments",
        "Description": "The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Description_Merged": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，但调用者指定了太多或太少的参数，可能导致未定义的行为和结果的弱点。",
        "Name_ZH": "函数调用参数数量错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Description_Merged": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "686",
        "Name": "Function Call With Incorrect Argument Type",
        "Description": "The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Description_Merged": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，但调用者指定了错误的数据类型作为参数，可能导致结果的弱点。",
        "Name_ZH": "函数调用参数类型错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Description_Merged": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "687",
        "Name": "Function Call With Incorrectly Specified Argument Value",
        "Description": "The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，但调用者指定的参数包含了错误的值，可能导致结果的弱点。",
        "Name_ZH": "函数调用指定参数值错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "688",
        "Name": "Function Call With Incorrect Variable or Reference as Argument",
        "Description": "The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Description_Merged": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个函数、过程或例程，但调用者将错误的变量或引用作为其中一个参数，可能导致未定义的行为和结果的弱点。",
        "Name_ZH": "函数调用参数为错误的变量或引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Description_Merged": "由于这个函数调用通常会产生错误的行为，因此通常在产品的测试或正常运行过程中会被检测出来。在测试中，所有可能的控制路径通常都会暴露出这个弱点，除非在不常见的情况下，错误的函数调用意外地产生了正确的结果，或者提供的参数类型非常接近预期的参数类型。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "689",
        "Name": "Permission Race Condition During Resource Copy",
        "Description": "The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在复制或克隆资源时，在复制完成之前没有设置资源的权限或访问控制，使资源在复制过程中暴露给其他领域。",
        "Name_ZH": "资源复制过程中的权限竞争条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "690",
        "Name": "Unchecked Return Value to NULL Pointer Dereference",
        "Description": "The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在调用可能返回空指针的函数后没有检查错误，导致结果出现空指针解引用。",
        "Name_ZH": "将未检查的返回值赋给空指针解引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "691",
        "Name": "Insufficient Control Flow Management",
        "Description": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码在执行过程中没有足够地管理其控制流，造成控制流能以意外的方式被修改。",
        "Name_ZH": "控制流管理不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "692",
        "Name": "Incomplete Denylist to Cross-Site Scripting",
        "Description": "The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用基于拒绝列表的保护机制来防御XSS攻击，但是拒绝列表不完整，允许XSS变体成功。",
        "Name_ZH": "防止跨站脚本攻击的拒绝列表不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "693",
        "Name": "Protection Mechanism Failure",
        "Description": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未使用或错误使用了一种可以提供足够防御的保护机制，以抵御针对产品的有针对性攻击。",
        "Name_ZH": "保护机制失效",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "694",
        "Name": "Use of Multiple Resources with Duplicate Identifier",
        "Description": "The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.",
                    "Description_Merged": "Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在需要唯一标识符的上下文中使用了多个可能具有相同标识符的资源。",
        "Name_ZH": "使用重复标识符的多个资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在可能的情况下，使用唯一标识符。如果检测到非唯一标识符，则不要使用任何具有非唯一标识符的资源，并适当地报告错误。",
                    "Description_Merged": "在可能的情况下，使用唯一标识符。如果检测到非唯一标识符，则不要使用任何具有非唯一标识符的资源，并适当地报告错误。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "695",
        "Name": "Use of Low-Level Functionality",
        "Description": "The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了被框架或规范明确禁止的低级功能。",
        "Name_ZH": "使用低级功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "696",
        "Name": "Incorrect Behavior Order",
        "Description": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品执行了多个相关行为，但是这些行为的顺序有误，可能导致产生弱点。",
        "Name_ZH": "行为顺序错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "697",
        "Name": "Incorrect Comparison",
        "Description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在安全相关的上下文中对两个实体进行比较，但是比较结果不正确，可能导致产生弱点。",
        "Name_ZH": "比较错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "698",
        "Name": "Execution After Redirect (EAR)",
        "Description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "Web应用程序发送了一个重定向到另一个位置，但是在退出之前执行了额外的代码。",
        "Name_ZH": "重定向后的执行 (EAR)",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "703",
        "Name": "Improper Check or Handling of Exceptional Conditions",
        "Description": "The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未能正确预测或处理在产品正常运行过程中很少发生的异常情况。",
        "Name_ZH": "未正确检查或处理异常条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "704",
        "Name": "Incorrect Type Conversion or Cast",
        "Description": "The product does not correctly convert an object, resource, or structure from one type to a different type.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未能将一个对象、资源或结构正确地转换为不同的类型。",
        "Name_ZH": "类型转换或强制类型转换错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "705",
        "Name": "Incorrect Control Flow Scoping",
        "Description": "The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在完成任务或检测到异常情况后，未能将控制流正确返回到适当的位置。",
        "Name_ZH": "控制流作用域错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "706",
        "Name": "Use of Incorrectly-Resolved Name or Reference",
        "Description": "The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用名称或引用来访问资源，但该名称/引用解析到的资源位于预期控制范围之外。",
        "Name_ZH": "使用错误解析的名称或引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "707",
        "Name": "Improper Neutralization",
        "Description": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未能确保或错误地确保结构化消息或数据在从上游组件读取或发送到下游组件之前是格式良好的，并满足某些安全属性。",
        "Name_ZH": "中和不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "708",
        "Name": "Incorrect Ownership Assignment",
        "Description": "The product assigns an owner to a resource, but the owner is outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Policy",
                    "Description": "Periodically review the privileges and their owners.",
                    "Description_Merged": "Periodically review the privileges and their owners.",
                    "Phase_Merged": "Policy"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use automated tools to check for privilege settings.",
                    "Description_Merged": "Use automated tools to check for privilege settings.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品将所有者分配给资源，但所有者位于预期控制范围之外。",
        "Name_ZH": "错误的所有权分配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "策略",
                    "Description": "定期审查权限及其所有者。",
                    "Description_Merged": "定期审查权限及其所有者。",
                    "Phase_Merged": "策略"
                },
                {
                    "Phase": "测试",
                    "Description": "使用自动化工具检查权限设置。",
                    "Description_Merged": "使用自动化工具检查权限设置。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "710",
        "Name": "Improper Adherence to Coding Standards",
        "Description": "The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Document and closely follow coding standards.",
                    "Description_Merged": "Document and closely follow coding standards.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Testing",
                        "Implementation"
                    ],
                    "Description": "Where possible, use automated tools to enforce the standards.",
                    "Description_Merged": "Where possible, use automated tools to enforce the standards.",
                    "Phase_Merged": "Testing / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未遵循开发的某些编码规则，这可能导致漏洞或增加相关漏洞的严重性。",
        "Name_ZH": "未正确遵循编码标准",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "记录并严格遵守编码规范。",
                    "Description_Merged": "记录并严格遵守编码规范。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "测试",
                        "实施"
                    ],
                    "Description": "在可能的情况下，使用自动化工具来强制执行这些规范。",
                    "Description_Merged": "在可能的情况下，使用自动化工具来强制执行这些规范。",
                    "Phase_Merged": "测试 / 实施"
                }
            ]
        }
    },
    {
        "ID": "732",
        "Name": "Incorrect Permission Assignment for Critical Resource",
        "Description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.",
                    "Description_Merged": "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.",
                    "Description_Merged": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Installation"
                    ],
                    "Description": "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.",
                    "Effectiveness": "High",
                    "Description_Merged": "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.",
                    "Phase_Merged": "Implementation / Installation"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
                    "Effectiveness": "High",
                    "Description_Merged": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "Phase": "Documentation",
                    "Description": "Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.",
                    "Description_Merged": "Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.",
                    "Phase_Merged": "Documentation"
                },
                {
                    "Phase": "Installation",
                    "Description": "Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.",
                    "Description_Merged": "Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.",
                    "Phase_Merged": "Installation"
                },
                {
                    "@_Mitigation_ID": "MIT-37",
                    "Phase": [
                        "Operation",
                        "System Configuration"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
                    "Description_Merged": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
                    "Phase_Merged": "Operation / System Configuration",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": [
                        "Implementation",
                        "System Configuration",
                        "Operation"
                    ],
                    "Description": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
                    "Description_Merged": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
                    "Phase_Merged": "Implementation / System Configuration / Operation"
                }
            ]
        },
        "Description_ZH": "该产品以允许未经授权的角色读取或修改的方式指定了安全关键资源的权限。",
        "Name_ZH": "关键资源的权限分配错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在使用关键资源（如配置文件）时，检查资源是否具有不安全的权限（例如任何普通用户都可以修改），并在资源可能被未经授权的方修改的情况下生成错误或甚至退出软件。",
                    "Description_Merged": "在使用关键资源（如配置文件）时，检查资源是否具有不安全的权限（例如任何普通用户都可以修改），并在资源可能被未经授权的方修改的情况下生成错误或甚至退出软件。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "将软件分为匿名、普通、特权和管理区域。通过仔细定义不同的用户组、权限和/或角色来减少攻击面。将其与数据、功能和相关资源进行映射，然后相应地设置权限。这将使您能够对资源进行更精细的控制。[REF-207]",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.",
                    "Description_Merged": "将软件分为匿名、普通、特权和管理区域。通过仔细定义不同的用户组、权限和/或角色来减少攻击面。将其与数据、功能和相关资源进行映射，然后相应地设置权限。这将使您能够对资源进行更精细的控制。[REF-207]",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "Phase": [
                        "实施",
                        "安装"
                    ],
                    "Description": "在程序启动时，明确设置默认权限或umask为最严格的设置。还要在程序安装期间设置适当的权限。这将防止您从任何安装或运行该程序的用户那里继承不安全的权限。",
                    "Effectiveness": "High",
                    "Description_Merged": "在程序启动时，明确设置默认权限或umask为最严格的设置。还要在程序安装期间设置适当的权限。这将防止您从任何安装或运行该程序的用户那里继承不安全的权限。",
                    "Phase_Merged": "实施 / 安装"
                },
                {
                    "Phase": "系统配置",
                    "Description": "对于所有配置文件、可执行文件和库文件，请确保只有软件的管理员才能读取和写入它们。",
                    "Effectiveness": "High",
                    "Description_Merged": "对于所有配置文件、可执行文件和库文件，请确保只有软件的管理员才能读取和写入它们。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "Phase": "文档",
                    "Description": "在文档中不要提及不安全的配置更改，特别是如果这些配置可能扩展到应用程序范围之外的资源和其他程序。",
                    "Description_Merged": "在文档中不要提及不安全的配置更改，特别是如果这些配置可能扩展到应用程序范围之外的资源和其他程序。",
                    "Phase_Merged": "文档"
                },
                {
                    "Phase": "安装",
                    "Description": "不要假设系统管理员会手动更改配置为软件手册中推荐的设置。",
                    "Description_Merged": "不要假设系统管理员会手动更改配置为软件手册中推荐的设置。",
                    "Phase_Merged": "安装"
                },
                {
                    "@_Mitigation_ID": "MIT-37",
                    "Phase": [
                        "操作",
                        "系统配置"
                    ],
                    "Strategy": "环境加固",
                    "Description": "确保软件在美国政府配置基线（USGCB）[REF-199]或类似的加固配置指南下正常运行，许多组织使用这些指南来限制部署软件的攻击面和潜在风险。",
                    "Description_Merged": "确保软件在美国政府配置基线（USGCB）[REF-199]或类似的加固配置指南下正常运行，许多组织使用这些指南来限制部署软件的攻击面和潜在风险。",
                    "Phase_Merged": "操作 / 系统配置",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": [
                        "实施",
                        "系统配置",
                        "操作"
                    ],
                    "Description": "在将数据存储在云中（例如S3存储桶、Azure Blob、Google Cloud Storage等）时，请使用提供商的控制功能禁用公共访问。",
                    "Description_Merged": "在将数据存储在云中（例如S3存储桶、Azure Blob、Google Cloud Storage等）时，请使用提供商的控制功能禁用公共访问。",
                    "Phase_Merged": "实施 / 系统配置 / 操作"
                }
            ]
        }
    },
    {
        "ID": "733",
        "Name": "Compiler Optimization Removal or Modification of Security-critical Code",
        "Description": "The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "开发人员在软件中构建了一个安全关键的保护机制，但编译器对程序进行了优化，使该机制被移除或修改。",
        "Name_ZH": "编译器优化移除或修改安全关键代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "749",
        "Name": "Exposed Dangerous Method or Function",
        "Description": "The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.",
                    "Description_Merged": "If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:",
                            "Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting."
                        ],
                        "ul": {
                            "li": [
                                "accessible to all users",
                                "restricted to a small set of privileged users",
                                "prevented from being directly accessible at all"
                            ]
                        }
                    },
                    "Description_Merged": "Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:\nEnsure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.\naccessible to all users\nrestricted to a small set of privileged users\nprevented from being directly accessible at all",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品提供了一个应用程序编程接口（API）或类似的接口，用于与外部角色进行交互，但接口包含一个危险的方法或函数，未受到适当限制。",
        "Name_ZH": "暴露危险的方法或函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "如果必须公开某个方法，请确保对所有参数进行输入验证，限制访问权限，并防范所有可能的漏洞。",
                    "Description_Merged": "如果必须公开某个方法，请确保对所有参数进行输入验证，限制访问权限，并防范所有可能的漏洞。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "识别所有公开的功能。明确列出必须向某些用户或用户组公开的所有功能。确定哪些功能可以：",
                            "确保实现的代码符合这些期望。包括在适用的情况下设置适当的访问修饰符（public、private、protected等）或不将ActiveX控件标记为安全可脚本化。"
                        ],
                        "ul": {
                            "li": [
                                "对所有用户可访问",
                                "限制为一小组特权用户",
                                "完全禁止直接访问"
                            ]
                        }
                    },
                    "Description_Merged": "识别所有公开的功能。明确列出必须向某些用户或用户组公开的所有功能。确定哪些功能可以：\n确保实现的代码符合这些期望。包括在适用的情况下设置适当的访问修饰符（public、private、protected等）或不将ActiveX控件标记为安全可脚本化。\n对所有用户可访问\n限制为一小组特权用户\n完全禁止直接访问",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "754",
        "Name": "Improper Check for Unusual or Exceptional Conditions",
        "Description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248)."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nChoose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "Check the results of all functions that return a value and verify that the value is expected.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.",
                    "Description_Merged": "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.",
                            "If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.",
                            "Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
                            "Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS."
                        ]
                    },
                    "Description_Merged": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nExposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness_Notes": "Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-38",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.",
                    "Description_Merged": "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur.",
                    "Description_Merged": "Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品未检查或错误地检查了在产品日常运行过程中不经常发生的异常情况。",
        "Name_ZH": "未正确检查异常或异常条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "选择具有异常处理功能的语言，这样程序员就能预测到可能会生成异常的异常条件。可能需要开发自定义异常来处理异常业务逻辑条件。注意不要将敏感异常传递给用户（CWE-209，CWE-248）。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n选择具有异常处理功能的语言，这样程序员就能预测到可能会生成异常的异常条件。可能需要开发自定义异常来处理异常业务逻辑条件。注意不要将敏感异常传递给用户（CWE-209，CWE-248）。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "实施",
                    "Description": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.",
                    "Description_Merged": "检查所有返回值的函数的结果，并验证该值是否符合预期。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果使用异常处理，请捕获和抛出具体的异常，而不是过于通用的异常（CWE-396，CWE-397）。尽可能在本地捕获和处理异常，以免异常在调用堆栈上传播得太远（CWE-705）。尽量避免不受检查或未捕获的异常（CWE-248）。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.",
                    "Description_Merged": "如果使用异常处理，请捕获和抛出具体的异常，而不是过于通用的异常（CWE-396，CWE-397）。尽可能在本地捕获和处理异常，以免异常在调用堆栈上传播得太远（CWE-705）。尽量避免不受检查或未捕获的异常（CWE-248）。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-39",
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。",
                            "如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。",
                            "避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。",
                            "在异常情况下向潜在攻击者公开额外信息，可以帮助攻击者确定哪些攻击向量最有可能成功，超出了拒绝服务。"
                        ]
                    },
                    "Description_Merged": "确保错误消息仅包含对目标受众有用的最少信息，不要泄露给其他人。消息需要在过于晦涩（可能让用户困惑）和过于详细（可能泄露超出预期的信息）之间取得平衡。消息不应揭示确定错误的方法。攻击者可以利用详细信息来优化原始攻击，增加成功的机会。\n如果必须详细记录错误信息，请将其记录在日志消息中，但要考虑日志消息被攻击者查看的可能。高度敏感的信息如密码不应保存在日志文件中。\n避免不一致的消息可能无意中向攻击者透露内部状态，比如用户账户是否存在。\n在异常情况下向潜在攻击者公开额外信息，可以帮助攻击者确定哪些攻击向量最有可能成功，超出了拒绝服务。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness_Notes": "Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-38",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "如果程序必须失败，请确保它能够优雅地失败（失败关闭）。在低内存条件下，可能会有诱惑只是让程序在失败时表现不佳，但攻击者可能能够在软件完全退出之前控制它。或者，无控制的失败可能会导致其他下游组件的级联问题；例如，程序可以向下游进程发送信号，以便进程立即知道发生了问题，并有更好的恢复机会。",
                    "Description_Merged": "如果程序必须失败，请确保它能够优雅地失败（失败关闭）。在低内存条件下，可能会有诱惑只是让程序在失败时表现不佳，但攻击者可能能够在软件完全退出之前控制它。或者，无控制的失败可能会导致其他下游组件的级联问题；例如，程序可以向下游进程发送信号，以便进程立即知道发生了问题，并有更好的恢复机会。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用系统限制可以帮助防止资源耗尽。然而，产品仍应处理低资源条件，因为它们仍然可能发生。",
                    "Description_Merged": "使用系统限制可以帮助防止资源耗尽。然而，产品仍应处理低资源条件，因为它们仍然可能发生。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "755",
        "Name": "Improper Handling of Exceptional Conditions",
        "Description": "The product does not handle or incorrectly handles an exceptional condition.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未处理或错误地处理了异常情况。",
        "Name_ZH": "未正确处理异常条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "756",
        "Name": "Missing Custom Error Page",
        "Description": "The product does not return custom error pages to the user, possibly exposing sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未向用户返回自定义错误页面，可能会暴露敏感信息。",
        "Name_ZH": "缺少自定义错误页面",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "757",
        "Name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
        "Description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个协议或其实现支持多个参与者之间的交互，并允许这些参与者协商使用哪种算法作为保护机制，如加密或身份验证，但它没有选择可供双方使用的最强算法。",
        "Name_ZH": "在协商过程中选择了较不安全的算法（“算法降级”）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "758",
        "Name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
        "Description": "The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品以一种依赖于不总是保证该实体具有的属性的方式使用API函数、数据结构或其他实体。",
        "Name_ZH": "依赖于未定义、未指定或实现定义的行为",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "759",
        "Name": "Use of a One-Way Hash without a Salt",
        "Description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.",
                            "Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.",
                            "Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
                    "Description_Merged": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Description_Merged": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品对一个不应该可逆的输入（如密码）使用单向密码哈希算法，但产品并未在输入中使用盐。",
        "Name_ZH": "使用单向哈希函数但未加盐",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。",
                            "一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。",
                            "需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。\n一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。\n需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果无法实现需要额外计算工作的技术，那么对于每个处理的密码，使用具有不可预测种子的强随机数生成器生成一个新的随机盐。将盐添加到明文密码中，然后进行哈希。在存储哈希值时，同时存储盐。不要为每个密码使用相同的盐。",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
                    "Description_Merged": "如果无法实现需要额外计算工作的技术，那么对于每个处理的密码，使用具有不可预测种子的强随机数生成器生成一个新的随机盐。将盐添加到明文密码中，然后进行哈希。在存储哈希值时，同时存储盐。不要为每个密码使用相同的盐。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Description_Merged": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Phase_Merged": "实施 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "760",
        "Name": "Use of a One-Way Hash with a Predictable Salt",
        "Description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.",
                            "Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.",
                            "Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
                    "Description_Merged": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品对一个不应该可逆的输入（如密码）使用单向密码哈希算法，但产品在输入中使用可预测的盐。",
        "Name_ZH": "使用可预测的盐进行单向哈希",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。",
                            "一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。",
                            "需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。\n一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。\n需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果无法实现需要额外计算工作的技术，那么对于每个处理的密码，使用具有不可预测种子的强随机数生成器生成一个新的随机盐。将盐添加到明文密码中，然后进行哈希。在存储哈希值时，同时存储盐。不要为每个密码使用相同的盐。",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
                    "Description_Merged": "如果无法实现需要额外计算工作的技术，那么对于每个处理的密码，使用具有不可预测种子的强随机数生成器生成一个新的随机盐。将盐添加到明文密码中，然后进行哈希。在存储哈希值时，同时存储盐。不要为每个密码使用相同的盐。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "761",
        "Name": "Free of Pointer not at Start of Buffer",
        "Description": "The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.",
                    "Description_Merged": "When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.",
                    "Description_Merged": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, glibc in Linux provides protection against free of invalid pointers."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, glibc in Linux provides protection against free of invalid pointers.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Description_Merged": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Description_Merged": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品在堆上分配的内存资源上调用free()函数，但指针不指向缓冲区的开头。",
        "Name_ZH": "释放缓冲区起始处之外的指针",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在使用指针算术遍历缓冲区时，使用单独的变量来跟踪内存中的进度，并保留最初分配的地址以供以后释放。",
                    "Description_Merged": "在使用指针算术遍历缓冲区时，使用单独的变量来跟踪内存中的进度，并保留最初分配的地址以供以后释放。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在C++中编程时，考虑使用boost库提供的智能指针来正确和一致地管理内存。",
                    "Description_Merged": "在C++中编程时，考虑使用boost库提供的智能指针来正确和一致地管理内存。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Linux中的glibc提供了针对无效指针释放的保护。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用提供内存分配和释放抽象的语言。",
                    "Description_Merged": "使用提供内存分配和释放抽象的语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Description_Merged": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "762",
        "Name": "Mismatched Memory Management Routines",
        "Description": "The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
                    "Description_Merged": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-41",
                    "Phase": "Implementation",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.",
                            "For example, glibc in Linux provides protection against free of invalid pointers.",
                            "When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].",
                            "To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost."
                        ]
                    },
                    "Description_Merged": "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.\nFor example, glibc in Linux provides protection against free of invalid pointers.\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, glibc in Linux provides protection against free of invalid pointers."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, glibc in Linux provides protection against free of invalid pointers.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Description_Merged": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Description_Merged": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品试图将内存资源返回给系统，但调用的释放函数与最初用于分配该资源的函数不兼容。",
        "Name_ZH": "不匹配的内存管理例程",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "只调用匹配的内存管理函数。不要混合使用不同的例程。例如，当你用malloc()分配一个缓冲区时，用free()释放原始指针。",
                    "Description_Merged": "只调用匹配的内存管理函数。不要混合使用不同的例程。例如，当你用malloc()分配一个缓冲区时，用free()释放原始指针。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-41",
                    "Phase": "实施",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "选择一种提供自动内存管理或减少手动内存管理错误的语言或工具。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。",
                            "在使用Xcode针对OS X或iOS进行开发时，启用自动引用计数（ARC）[REF-391]。",
                            "在C++编程中，为了正确和一致地管理内存，考虑使用智能指针类，如std::auto_ptr（由ISO/IEC ISO/IEC 14882:2003定义），std::shared_ptr和std::unique_ptr（由即将发布的C++标准修订版规定，非正式称为C++ 1x），或者使用类似于Boost的等效解决方案。"
                        ]
                    },
                    "Description_Merged": "选择一种提供自动内存管理或减少手动内存管理错误的语言或工具。\n例如，Linux中的glibc提供了针对无效指针释放的保护。\n在使用Xcode针对OS X或iOS进行开发时，启用自动引用计数（ARC）[REF-391]。\n在C++编程中，为了正确和一致地管理内存，考虑使用智能指针类，如std::auto_ptr（由ISO/IEC ISO/IEC 14882:2003定义），std::shared_ptr和std::unique_ptr（由即将发布的C++标准修订版规定，非正式称为C++ 1x），或者使用类似于Boost的等效解决方案。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Linux中的glibc提供了针对无效指针释放的保护。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用提供内存分配和释放抽象的语言。",
                    "Description_Merged": "使用提供内存分配和释放抽象的语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Description_Merged": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "763",
        "Name": "Release of Invalid Pointer or Reference",
        "Description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
                    "Description_Merged": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.",
                    "Description_Merged": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, glibc in Linux provides protection against free of invalid pointers."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, glibc in Linux provides protection against free of invalid pointers.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Description_Merged": "Use a language that provides abstractions for memory allocation and deallocation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Description_Merged": "Use a tool that dynamically detects memory management problems, such as valgrind.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品试图将内存资源返回给系统，但调用了错误的释放函数或以错误的方式调用了适当的释放函数。",
        "Name_ZH": "释放无效的指针或引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "只调用匹配的内存管理函数。不要混合使用不同的例程。例如，当你用malloc()分配一个缓冲区时，用free()释放原始指针。",
                    "Description_Merged": "只调用匹配的内存管理函数。不要混合使用不同的例程。例如，当你用malloc()分配一个缓冲区时，用free()释放原始指针。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在C++中编程时，考虑使用boost库提供的智能指针来正确和一致地管理内存。",
                    "Description_Merged": "在C++中编程时，考虑使用boost库提供的智能指针来正确和一致地管理内存。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-4.6",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Linux中的glibc提供了针对无效指针释放的保护。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Linux中的glibc提供了针对无效指针释放的保护。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "使用提供内存分配和释放抽象的语言。",
                    "Description_Merged": "使用提供内存分配和释放抽象的语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Description_Merged": "使用可以动态检测内存管理问题的工具，例如valgrind。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "764",
        "Name": "Multiple Locks of a Critical Resource",
        "Description": "The product locks a critical resource more times than intended, leading to an unexpected state in the system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
                    "Description_Merged": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品对关键资源进行的锁定次数超过了预期，导致系统处于意外状态。",
        "Name_ZH": "多次锁定关键资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在锁定和解锁资源时，要确保代码中的所有控制路径，在其中资源被锁定一次或多次的情况下，对应的解锁次数也是完全一致的。如果软件获取了锁定然后确定无法执行预期行为，请确保在等待条件改善之前释放锁定。在再次尝试之前重新获取锁定。",
                    "Description_Merged": "在锁定和解锁资源时，要确保代码中的所有控制路径，在其中资源被锁定一次或多次的情况下，对应的解锁次数也是完全一致的。如果软件获取了锁定然后确定无法执行预期行为，请确保在等待条件改善之前释放锁定。在再次尝试之前重新获取锁定。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "765",
        "Name": "Multiple Unlocks of a Critical Resource",
        "Description": "The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
                    "Description_Merged": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品对关键资源进行的解锁次数超过了预期，导致系统处于意外状态。",
        "Name_ZH": "多次解锁关键资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在锁定和解锁资源时，要确保代码中的所有控制路径，在其中资源被锁定一次或多次的情况下，对应的解锁次数也是完全一致的。如果产品获取了锁定然后确定无法执行预期行为，请确保在等待条件改善之前释放锁定。在再次尝试之前重新获取锁定。",
                    "Description_Merged": "在锁定和解锁资源时，要确保代码中的所有控制路径，在其中资源被锁定一次或多次的情况下，对应的解锁次数也是完全一致的。如果产品获取了锁定然后确定无法执行预期行为，请确保在等待条件改善之前释放锁定。在再次尝试之前重新获取锁定。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "766",
        "Name": "Critical Data Element Declared Public",
        "Description": "The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.",
                    "Description_Merged": "Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品将一个关键变量、字段或成员声明为public，但预期的安全策略要求其为private。",
        "Name_ZH": "声明为公共的关键数据元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "尽可能将数据设为私有、静态和终态。这将确保您的代码通过早期实例化、防止访问和防止篡改来受到保护。",
                    "Description_Merged": "尽可能将数据设为私有、静态和终态。这将确保您的代码通过早期实例化、防止访问和防止篡改来受到保护。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "767",
        "Name": "Access to Critical Private Variable via Public Method",
        "Description": "The product defines a public method that reads or modifies a private variable.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.",
                    "Description_Merged": "Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品定义了一个公共方法，用于读取或修改私有变量。",
        "Name_ZH": "通过公共方法访问关键私有变量",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "适当使用类的访问器和修改器方法。在接受来自公共方法的数据并意图修改关键私有变量时，进行验证。同时确保在公共方法与关键数据交互时应用适当的访问控制。",
                    "Description_Merged": "适当使用类的访问器和修改器方法。在接受来自公共方法的数据并意图修改关键私有变量时，进行验证。同时确保在公共方法与关键数据交互时应用适当的访问控制。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "768",
        "Name": "Incorrect Short Circuit Evaluation",
        "Description": "The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.",
                    "Description_Merged": "Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品包含一个带有多个逻辑表达式的条件语句，在其中一个非首要表达式可能产生副作用的情况下。这可能导致在条件执行后程序处于意外状态，因为短路逻辑可能会阻止副作用的发生。",
        "Name_ZH": "错误的短路评估",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "减少条件语句中产生副作用的语句数量，有助于防止短路评估以意外方式改变控制流。",
                    "Description_Merged": "减少条件语句中产生副作用的语句数量，有助于防止短路评估以意外方式改变控制流。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "769",
        "Name": "DEPRECATED: Uncontrolled File Descriptor Consumption",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它是CWE-774的重复。所有内容已转移到CWE-774。",
        "Name_ZH": "已弃用：无控制的文件描述符消耗",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "770",
        "Name": "Allocation of Resources Without Limits or Throttling",
        "Description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.",
                    "Description_Merged": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.",
                    "Description_Merged": "Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
                    "Description_Merged": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness_Notes": "This will only be applicable to cases where user input can influence the size or frequency of resource allocations.",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Mitigation of resource exhaustion attacks requires that the target system either:",
                            "The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.",
                            "The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker."
                        ],
                        "ul": {
                            "li": [
                                "recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays",
                                "uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed."
                            ]
                        }
                    },
                    "Description_Merged": "Mitigation of resource exhaustion attacks requires that the target system either:\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\nThe second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.\nrecognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays\nuniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that protocols have specific limits of scale placed on them.",
                    "Description_Merged": "Ensure that protocols have specific limits of scale placed on them.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-38.1",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": [
                            "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.",
                            "Ensure that all failures in resource allocation place the system into a safe posture."
                        ]
                    },
                    "Description_Merged": "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.\nEnsure that all failures in resource allocation place the system into a safe posture.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品代表一个参与者在不限制可分配资源的大小或数量的情况下分配可重用资源或资源组，违反了该参与者的预期安全策略。",
        "Name_ZH": "资源分配无限制或限速",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "明确指定能力的最小和最大期望，并规定资源分配达到限制时的可接受行为。",
                    "Description_Merged": "明确指定能力的最小和最大期望，并规定资源分配达到限制时的可接受行为。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "限制非特权用户可访问的资源量。为资源设置每用户限制。允许系统管理员定义这些限制。注意避免CWE-410。",
                    "Description_Merged": "限制非特权用户可访问的资源量。为资源设置每用户限制。允许系统管理员定义这些限制。注意避免CWE-410。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在系统架构中设计限流机制。最好的保护是限制未经授权用户可能消耗的资源量。强大的身份验证和访问控制模型将有助于预防此类攻击的发生，并帮助管理员识别是谁进行了滥用。登录应用程序应尽可能受到拒绝服务攻击的保护。限制数据库访问，例如通过缓存结果集，有助于最小化资源消耗。为了进一步限制拒绝服务攻击的可能性，考虑跟踪从用户接收到的请求速率，并阻止超过定义的速率阈值的请求。",
                    "Description_Merged": "在系统架构中设计限流机制。最好的保护是限制未经授权用户可能消耗的资源量。强大的身份验证和访问控制模型将有助于预防此类攻击的发生，并帮助管理员识别是谁进行了滥用。登录应用程序应尽可能受到拒绝服务攻击的保护。限制数据库访问，例如通过缓存结果集，有助于最小化资源消耗。为了进一步限制拒绝服务攻击的可能性，考虑跟踪从用户接收到的请求速率，并阻止超过定义的速率阈值的请求。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness_Notes": "This will only be applicable to cases where user input can influence the size or frequency of resource allocations.",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "缓解资源耗尽攻击需要目标系统实施以下解决方案之一：",
                            "第一种解决方案本身就是一个问题，因为它可能允许攻击者阻止特定有效用户使用系统。如果攻击者冒充有效用户，他们可能能够阻止用户访问所讨论的服务器。",
                            "有效实施第二种解决方案可能很困难，即使正确执行也不能提供完全的解决方案。这只是需要攻击者投入更多的资源。"
                        ],
                        "ul": {
                            "li": [
                                "识别攻击并拒绝该用户在一定时间内进一步访问，通常是通过增加时间延迟来实现。",
                                "统一限制所有请求的速度，以使资源无法被快速消耗超过它们可以被释放的速度。"
                            ]
                        }
                    },
                    "Description_Merged": "缓解资源耗尽攻击需要目标系统实施以下解决方案之一：\n第一种解决方案本身就是一个问题，因为它可能允许攻击者阻止特定有效用户使用系统。如果攻击者冒充有效用户，他们可能能够阻止用户访问所讨论的服务器。\n有效实施第二种解决方案可能很困难，即使正确执行也不能提供完全的解决方案。这只是需要攻击者投入更多的资源。\n识别攻击并拒绝该用户在一定时间内进一步访问，通常是通过增加时间延迟来实现。\n统一限制所有请求的速度，以使资源无法被快速消耗超过它们可以被释放的速度。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保协议在规模上有具体的限制。",
                    "Description_Merged": "确保协议在规模上有具体的限制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-38.1",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": [
                            "如果程序必须失败，请确保它能够优雅地失败（失败关闭）。在低内存条件下，可能会有诱惑只是让程序在失败时表现不佳，但攻击者可能能够在软件完全退出之前控制它。或者，无控制的失败可能会导致其他下游组件的级联问题；例如，程序可以向下游进程发送信号，以便进程立即知道发生了问题，并有更好的恢复机会。",
                            "确保所有资源分配的失败能将系统置于安全状态。"
                        ]
                    },
                    "Description_Merged": "如果程序必须失败，请确保它能够优雅地失败（失败关闭）。在低内存条件下，可能会有诱惑只是让程序在失败时表现不佳，但攻击者可能能够在软件完全退出之前控制它。或者，无控制的失败可能会导致其他下游组件的级联问题；例如，程序可以向下游进程发送信号，以便进程立即知道发生了问题，并有更好的恢复机会。\n确保所有资源分配的失败能将系统置于安全状态。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "771",
        "Name": "Missing Reference to Active Allocated Resource",
        "Description": "The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品未正确维护对已分配资源的引用，导致无法回收该资源。",
        "Name_ZH": "缺少对活动分配资源的引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "772",
        "Name": "Missing Release of Resource after Effective Lifetime",
        "Description": "The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "Phase": "Implementation",
                    "Description": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
                    "Description_Merged": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品在资源的有效生命周期结束后未释放该资源，即在不再需要该资源之后。",
        "Name_ZH": "有效生命周期后未释放资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，Java、Ruby和Lisp等语言执行自动垃圾回收，释放已被取消分配的对象的内存。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，Java、Ruby和Lisp等语言执行自动垃圾回收，释放已被取消分配的对象的内存。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "Phase": "实施",
                    "Description": "良好的实践是在分配资源后负责释放所有资源，并在函数中一致地定义释放资源的方式和位置。如果您分配了在函数完成后要释放的资源，必须确保在包括错误条件在内的该函数的所有退出点释放资源。",
                    "Description_Merged": "良好的实践是在分配资源后负责释放所有资源，并在函数中一致地定义释放资源的方式和位置。如果您分配了在函数完成后要释放的资源，必须确保在包括错误条件在内的该函数的所有退出点释放资源。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "773",
        "Name": "Missing Reference to Active File Descriptor or Handle",
        "Description": "The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品未正确维护对文件描述符或句柄的引用，导致无法回收该文件描述符/句柄。",
        "Name_ZH": "缺少对活动文件描述符或句柄的引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "774",
        "Name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
        "Description": "The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品代表一个参与者分配文件描述符或句柄，而不限制可以分配多少个描述符，违反了该参与者的预期安全策略。",
        "Name_ZH": "文件描述符或句柄分配无限制或限速",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "775",
        "Name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
        "Description": "The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "Operation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Resource Limitation",
                    "Description": {
                        "p": [
                            "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
                            "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
                            "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
                        ]
                    },
                    "Description_Merged": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
                    "Phase_Merged": "Operation / Architecture and Design",
                    "Strategy_Merged": "Resource Limitation"
                }
            ]
        },
        "Description_ZH": "该产品在文件描述符或句柄的有效生命周期结束后未释放该文件描述符/句柄，即在不再需要该文件描述符/句柄之后。",
        "Name_ZH": "有效生命周期后未释放文件描述符或句柄",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-47",
                    "Phase": [
                        "操作",
                        "架构与设计"
                    ],
                    "Strategy": "资源限制",
                    "Description": {
                        "p": [
                            "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。",
                            "当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。",
                            "确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。"
                        ]
                    },
                    "Description_Merged": "使用操作系统或环境提供的资源限制设置。例如，在POSIX中管理系统资源时，可以使用setrlimit()来设置某些类型资源的限制，而getrlimit()可以确定有多少资源可用。然而，并非所有操作系统都提供这些函数。\n当当前级别接近应用程序定义的最大级别（参见CWE-770）时，限制对特权用户的进一步资源分配；或者，开始释放针对非特权用户的资源。尽管此缓解措施可能保护系统免受攻击，但不一定能阻止攻击者对其他用户造成不利影响。\n确保应用程序在资源不可用时执行适当的错误检查和错误处理（CWE-703）。",
                    "Phase_Merged": "操作 / 架构与设计",
                    "Strategy_Merged": "资源限制"
                }
            ]
        }
    },
    {
        "ID": "776",
        "Name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
        "Description": "The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Operation",
                    "Description": "If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.",
                    "Description_Merged": "If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
                    "Description_Merged": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用XML文档，并允许使用文档类型定义（DTD）定义其结构，但未正确控制实体递归定义的数量。",
        "Name_ZH": "DTD中递归实体引用的不正确限制（'XML实体扩展'）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "操作",
                    "Description": "如果可能，禁止使用DTD，或使用限制递归DTD实体扩展的XML解析器。",
                    "Description_Merged": "如果可能，禁止使用DTD，或使用限制递归DTD实体扩展的XML解析器。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "实施",
                    "Description": "在解析带有关联DTD的XML文件之前，扫描递归实体声明并停止解析可能导致问题的内容。",
                    "Description_Merged": "在解析带有关联DTD的XML文件之前，扫描递归实体声明并停止解析可能导致问题的内容。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "777",
        "Name": "Regular Expression without Anchors",
        "Description": "The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.",
                    "Description_Merged": "Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用正则表达式进行中和处理，但是正则表达式没有进行定位，可能会导致恶意或格式不正确的数据通过。",
        "Name_ZH": "没有锚点的正则表达式",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保理解正则表达式将匹配什么和不匹配什么。通过锚定表达式的开头和结尾，程序员可以严格限制允许匹配到的内容。如果使用的软件包默认只匹配一行，请确保必要时可以匹配多行输入。",
                    "Description_Merged": "确保理解正则表达式将匹配什么和不匹配什么。通过锚定表达式的开头和结尾，程序员可以严格限制允许匹配到的内容。如果使用的软件包默认只匹配一行，请确保必要时可以匹配多行输入。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "778",
        "Name": "Insufficient Logging",
        "Description": "When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use a centralized logging mechanism that supports multiple levels of detail.",
                    "Description_Merged": "Use a centralized logging mechanism that supports multiple levels of detail.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.",
                    "Description_Merged": "Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Operation",
                    "Description": "Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.",
                    "Description_Merged": "Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.",
                    "Phase_Merged": "Operation"
                },
                {
                    "Phase": "Operation",
                    "Description": "To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.",
                    "Description_Merged": "To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "当发生安全关键事件时，该产品要么不记录该事件，要么在记录日志时省略了重要细节。",
        "Name_ZH": "日志记录不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用支持多个详细级别的集中式日志记录机制。",
                    "Description_Merged": "使用支持多个详细级别的集中式日志记录机制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保所有与安全相关的成功和失败都可以记录。在存储数据于云端（例如AWS S3存储桶、Azure Blob、Google Cloud Storage等）时，使用提供商的控制来启用和捕获详细的日志信息。",
                    "Description_Merged": "确保所有与安全相关的成功和失败都可以记录。在存储数据于云端（例如AWS S3存储桶、Azure Blob、Google Cloud Storage等）时，使用提供商的控制来启用和捕获详细的日志信息。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "操作",
                    "Description": "确保在生产环境中适当设置日志记录级别。应记录足够的数据以使系统管理员能够检测攻击、诊断错误并从攻击中恢复。同时，记录过多的数据（CWE-779）可能会导致相同的问题，包括在使用云环境时出现意外费用。",
                    "Description_Merged": "确保在生产环境中适当设置日志记录级别。应记录足够的数据以使系统管理员能够检测攻击、诊断错误并从攻击中恢复。同时，记录过多的数据（CWE-779）可能会导致相同的问题，包括在使用云环境时出现意外费用。",
                    "Phase_Merged": "操作"
                },
                {
                    "Phase": "操作",
                    "Description": "使用Azure的门户，在“存储帐户”的名称下，找到“监视（经典）”部分，选择“诊断设置（经典）”以启用存储日志记录。对于各个属性（blob、file、table、queue），确保所需的日志数据状态设置正确。如果使用PowerShell，可以使用适当的-ServiceType、-LoggingOperations和-RetentionDays参数来调用Set-AzStorageServiceLoggingProperty命令。",
                    "Description_Merged": "使用Azure的门户，在“存储帐户”的名称下，找到“监视（经典）”部分，选择“诊断设置（经典）”以启用存储日志记录。对于各个属性（blob、file、table、queue），确保所需的日志数据状态设置正确。如果使用PowerShell，可以使用适当的-ServiceType、-LoggingOperations和-RetentionDays参数来调用Set-AzStorageServiceLoggingProperty命令。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "779",
        "Name": "Logging of Excessive Data",
        "Description": "The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events.",
                    "Description_Merged": "Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.",
                    "Description_Merged": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Adjust configurations appropriately when the product is transitioned from a debug state to production.",
                    "Description_Merged": "Adjust configurations appropriately when the product is transitioned from a debug state to production.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品记录了过多的信息，导致日志文件难以处理，可能会阻碍攻击后的恢复工作或取证分析。",
        "Name_ZH": "过度数据的日志记录",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "抑制大量重复的日志消息，并用定期摘要替换它们。例如，syslog可能包含一个条目，指示\"上次消息重复X次\"，当记录重复事件时。",
                    "Description_Merged": "抑制大量重复的日志消息，并用定期摘要替换它们。例如，syslog可能包含一个条目，指示\"上次消息重复X次\"，当记录重复事件时。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "支持管理员可控制的日志文件的最大大小。如果达到最大大小，应通知管理员。此外，考虑减少产品的功能。这可能导致对合法产品用户的拒绝服务，但可以防止产品对整个系统产生不利影响。",
                    "Description_Merged": "支持管理员可控制的日志文件的最大大小。如果达到最大大小，应通知管理员。此外，考虑减少产品的功能。这可能导致对合法产品用户的拒绝服务，但可以防止产品对整个系统产生不利影响。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在将产品从调试状态转换为生产状态时，适当调整配置。",
                    "Description_Merged": "在将产品从调试状态转换为生产状态时，适当调整配置。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "780",
        "Name": "Use of RSA Algorithm without OAEP",
        "Description": "The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了RSA算法，但没有使用最佳非对称加密填充（OAEP），这可能会削弱加密的安全性。",
        "Name_ZH": "在没有OAEP的情况下使用RSA算法",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "781",
        "Name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
        "Description": "The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.",
                    "Description_Merged": "If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
                    "Description_Merged": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.",
                    "Description_Merged": "If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品定义了一个使用METHOD_NEITHER进行I/O的IOCTL，但没有对提供的地址进行验证或者验证不正确。",
        "Name_ZH": "IOCTL中的不正确地址验证，使用METHOD_NEITHER I/O控制代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果对IOCTL需要METHOD_NEITHER，则确保在首次访问之前正确验证所有用户空间地址。ProbeForRead和ProbeForWrite例程可用于此任务。还要正确保护和管理用户提供的缓冲区，因为当使用METHOD_NEITHER时，I/O管理器不会执行此操作。请参阅参考资料。",
                    "Description_Merged": "如果对IOCTL需要METHOD_NEITHER，则确保在首次访问之前正确验证所有用户空间地址。ProbeForRead和ProbeForWrite例程可用于此任务。还要正确保护和管理用户提供的缓冲区，因为当使用METHOD_NEITHER时，I/O管理器不会执行此操作。请参阅参考资料。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果可能，避免在IOCTL中使用METHOD_NEITHER，并选择能够有效控制缓冲区大小的方法，例如METHOD_BUFFERED、METHOD_IN_DIRECT或METHOD_OUT_DIRECT。",
                    "Description_Merged": "如果可能，避免在IOCTL中使用METHOD_NEITHER，并选择能够有效控制缓冲区大小的方法，例如METHOD_BUFFERED、METHOD_IN_DIRECT或METHOD_OUT_DIRECT。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "如果IOCTL是只打算由可信用户访问的驱动程序的一部分，请为相关设备或设备命名空间使用适当的访问控制。请参阅参考资料。",
                    "Description_Merged": "如果IOCTL是只打算由可信用户访问的驱动程序的一部分，请为相关设备或设备命名空间使用适当的访问控制。请参阅参考资料。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "782",
        "Name": "Exposed IOCTL with Insufficient Access Control",
        "Description": "The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
                    "Description_Merged": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品实现了一个应该受限的IOCTL功能，但没有正确实施对该IOCTL的访问控制。",
        "Name_ZH": "缺少足够访问控制的暴露IOCTL",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在Windows环境中，为相关设备或设备命名空间使用适当的访问控制。请参阅参考资料。",
                    "Description_Merged": "在Windows环境中，为相关设备或设备命名空间使用适当的访问控制。请参阅参考资料。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "783",
        "Name": "Operator Precedence Logic Error",
        "Description": "The product uses an expression in which operator precedence causes incorrect logic to be used.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
                    "Description_Merged": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个表达式，操作符优先级导致了错误的逻辑。",
        "Name_ZH": "运算符优先级逻辑错误",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "定期使用括号包裹子表达式，尤其是在安全关键代码中。",
                    "Description_Merged": "定期使用括号包裹子表达式，尤其是在安全关键代码中。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "784",
        "Name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
        "Description": "The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid using cookie data for a security-related decision.",
                    "Description_Merged": "Avoid using cookie data for a security-related decision.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
                    "Description_Merged": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Add integrity checks to detect tampering.",
                    "Description_Merged": "Add integrity checks to detect tampering.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
                    "Description_Merged": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用了依赖于cookie的保护机制，但没有正确确保cookie对应的用户是有效的。",
        "Name_ZH": "在安全决策中依赖没有经过验证和完整性检查的Cookie",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "避免使用Cookie数据作为安全相关的决策依据。",
                    "Description_Merged": "避免使用Cookie数据作为安全相关的决策依据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果要将Cookie数据用于安全相关的决策，请对其进行彻底的输入验证（即服务器端验证）。",
                    "Description_Merged": "如果要将Cookie数据用于安全相关的决策，请对其进行彻底的输入验证（即服务器端验证）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "添加完整性检查以检测篡改。",
                    "Description_Merged": "添加完整性检查以检测篡改。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "保护关键cookie免受重放攻击，因为跨站脚本或其他攻击可能允许攻击者窃取通过完整性检查的强加密cookie。此缓解措施适用于在单个事务或会话期间应该有效的cookie。通过强制超时，您可以限制攻击的范围。作为完整性检查的一部分，使用一个对客户端不可见的不可预测的服务器端值。",
                    "Description_Merged": "保护关键cookie免受重放攻击，因为跨站脚本或其他攻击可能允许攻击者窃取通过完整性检查的强加密cookie。此缓解措施适用于在单个事务或会话期间应该有效的cookie。通过强制超时，您可以限制攻击的范围。作为完整性检查的一部分，使用一个对客户端不可见的不可预测的服务器端值。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "785",
        "Name": "Use of Path Manipulation Function without Maximum-sized Buffer",
        "Description": "The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.",
                    "Description_Merged": "Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品调用了一个用于规范化路径或文件名的函数，但提供的输出缓冲区比最大可能大小（如PATH_MAX）小。",
        "Name_ZH": "在使用路径操作函数时没有使用最大缓冲区大小",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "始终指定足够大的输出缓冲区来处理路径操作函数可能产生的最大大小结果。",
                    "Description_Merged": "始终指定足够大的输出缓冲区来处理路径操作函数可能产生的最大大小结果。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "786",
        "Name": "Access of Memory Location Before Start of Buffer",
        "Description": "The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用索引或指针读取或写入缓冲区时，引用了缓冲区开始之前的内存位置。",
        "Name_ZH": "在缓冲区开始之前访问内存位置",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "787",
        "Name": "Out-of-bounds Write",
        "Description": "The product writes data past the end, or before the beginning, of the intended buffer.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.",
                            "Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions."
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "Implementation",
                    "Description": {
                        "p": "Consider adhering to the following rules when allocating and managing an application's memory:",
                        "ul": {
                            "li": [
                                "Double check that the buffer is as large as specified.",
                                "When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.",
                                "Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.",
                                "If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."
                            ]
                        }
                    },
                    "Description_Merged": "Consider adhering to the following rules when allocating and managing an application's memory:\nDouble check that the buffer is as large as specified.\nWhen using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\nCheck buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\nIf necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "Implementation",
                    "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品在预期缓冲区结束之后或之前写入数据。",
        "Name_ZH": "越界写入",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。",
                            "需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。\n需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。"
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "实施",
                    "Description": {
                        "p": "在分配和管理应用程序内存时，请遵循以下规则：",
                        "ul": {
                            "li": [
                                "确保缓冲区的大小与指定的大小一致。",
                                "当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。",
                                "如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。",
                                "如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。"
                            ]
                        }
                    },
                    "Description_Merged": "在分配和管理应用程序内存时，请遵循以下规则：\n确保缓冲区的大小与指定的大小一致。\n当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。\n如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。\n如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-13",
                    "Phase": "实施",
                    "Description": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
                    "Description_Merged": "用支持长度参数的类似函数替换无界限的复制函数，例如将strcpy替换为strncpy。如果这些函数不可用，可以创建它们。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "788",
        "Name": "Access of Memory Location After End of Buffer",
        "Description": "The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用引用了缓冲区结束之后的内存位置的索引或指针读取或写入缓冲区。",
        "Name_ZH": "在缓冲区结束后访问内存位置",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "789",
        "Name": "Memory Allocation with Excessive Size Value",
        "Description": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.",
                    "Description_Merged": "Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": "Operation",
                    "Description": "Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
                    "Description_Merged": "Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "产品基于不可信的大型值分配内存，但未确保大小在预期范围内，导致可以分配任意数量的内存。",
        "Name_ZH": "内存分配超出大小的值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "对于影响内存分配量的任何值，应进行充分的输入验证。制定适当的策略处理超出限制的请求，并考虑支持配置选项，以便管理员在必要时可以扩展内存使用量。",
                    "Description_Merged": "对于影响内存分配量的任何值，应进行充分的输入验证。制定适当的策略处理超出限制的请求，并考虑支持配置选项，以便管理员在必要时可以扩展内存使用量。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": "操作",
                    "Description": "使用系统提供的内存资源限制来运行您的程序。这可能仍然会导致程序崩溃或退出，但对系统的影响将被最小化。",
                    "Description_Merged": "使用系统提供的内存资源限制来运行您的程序。这可能仍然会导致程序崩溃或退出，但对系统的影响将被最小化。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "790",
        "Name": "Improper Filtering of Special Elements",
        "Description": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前未过滤或错误地过滤特殊元素。",
        "Name_ZH": "特殊元素的不正确过滤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "791",
        "Name": "Incomplete Filtering of Special Elements",
        "Description": "The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前未完全过滤特殊元素。",
        "Name_ZH": "特殊元素的不完全过滤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "792",
        "Name": "Incomplete Filtering of One or More Instances of Special Elements",
        "Description": "The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前未完全过滤一个或多个特殊元素。",
        "Name_ZH": "一个或多个特殊元素的不完全过滤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "793",
        "Name": "Only Filtering One Instance of a Special Element",
        "Description": "The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前只过滤了一个特殊元素实例。",
        "Name_ZH": "只过滤一个特殊元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "794",
        "Name": "Incomplete Filtering of Multiple Instances of Special Elements",
        "Description": "The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前未过滤所有特殊元素实例。",
        "Name_ZH": "多个特殊元素的不完全过滤",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "795",
        "Name": "Only Filtering Special Elements at a Specified Location",
        "Description": "The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前只考虑了位于指定位置的特殊元素，从而忽略了可能存在的其他特殊元素。",
        "Name_ZH": "只在指定位置过滤特殊元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "796",
        "Name": "Only Filtering Special Elements Relative to a Marker",
        "Description": "The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品从上游组件接收数据，但在将其发送给下游组件之前只考虑了相对于标记位置的特殊元素（例如，“在字符串的开头/结尾；第二个参数”），从而忽略了可能存在的其他特殊元素。",
        "Name_ZH": "只相对于标记过滤特殊元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "797",
        "Name": "Only Filtering Special Elements at an Absolute Position",
        "Description": "The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品从上游组件接收数据，但仅考虑绝对位置上的特殊元素（如“字节号10”），因此可能会忽略发送给下游组件之前可能存在的其他特殊元素。",
        "Name_ZH": "只在绝对位置过滤特殊元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "798",
        "Name": "Use of Hard-coded Credentials",
        "Description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].",
                            "In Windows environments, the Encrypted File System (EFS) may provide some protection."
                        ]
                    },
                    "Description_Merged": "For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.",
                    "Description_Merged": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.",
                    "Description_Merged": "If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.",
                            "Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method."
                        ]
                    },
                    "Description_Merged": "For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "For front-end to back-end connections: Three solutions are possible, although none are complete.",
                        "ul": {
                            "li": [
                                "The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.",
                                "Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.",
                                "Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."
                            ]
                        }
                    },
                    "Description_Merged": "For front-end to back-end connections: Three solutions are possible, although none are complete.\nThe first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\nNext, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\nFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品包含硬编码的凭据，如密码或加密密钥，用于自身的入站身份验证、对外部组件的出站通信或内部数据的加密。",
        "Name_ZH": "使用硬编码凭据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于出站身份验证：将密码、密钥和其他凭据存储在一个受到强保护的加密配置文件或数据库中，该文件或数据库对于所有外部人员，包括同一系统上的其他本地用户，都是不可访问的。正确保护密钥（CWE-320）。如果无法使用加密来保护文件，则确保权限尽可能受到限制[REF-7]。",
                            "在Windows环境中，加密文件系统（EFS）可能提供一定的保护。"
                        ]
                    },
                    "Description_Merged": "对于出站身份验证：将密码、密钥和其他凭据存储在一个受到强保护的加密配置文件或数据库中，该文件或数据库对于所有外部人员，包括同一系统上的其他本地用户，都是不可访问的。正确保护密钥（CWE-320）。如果无法使用加密来保护文件，则确保权限尽可能受到限制[REF-7]。\n在Windows环境中，加密文件系统（EFS）可能提供一定的保护。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "对于入站身份验证：不要将默认的用户名和密码、密钥或其他身份验证凭据硬编码到代码中，而是使用“首次登录”模式，要求用户输入一个唯一的强密码或密钥。",
                    "Description_Merged": "对于入站身份验证：不要将默认的用户名和密码、密钥或其他身份验证凭据硬编码到代码中，而是使用“首次登录”模式，要求用户输入一个唯一的强密码或密钥。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "如果产品必须包含硬编码凭据或无法删除它们，则执行访问控制检查，并限制可以访问需要硬编码凭证的功能的实体。例如，某个功能可能只能通过系统控制台启用，而不能通过网络连接启用。",
                    "Description_Merged": "如果产品必须包含硬编码凭据或无法删除它们，则执行访问控制检查，并限制可以访问需要硬编码凭证的功能的实体。例如，某个功能可能只能通过系统控制台启用，而不能通过网络连接启用。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于使用密码进行入站身份验证：对密码应用强一向哈希函数，并将这些哈希值存储在一个带有适当访问控制的配置文件或数据库中。这样，即使文件/数据库被窃取，攻击者仍然需要尝试破解密码。在身份验证期间处理传入密码时，获取密码的哈希值并将其与保存的哈希值进行比较。",
                            "为每个生成的哈希值使用随机分配的盐。这增加了攻击者进行暴力破解攻击所需的计算量，可能限制了彩虹表攻击方法的有效性。"
                        ]
                    },
                    "Description_Merged": "对于使用密码进行入站身份验证：对密码应用强一向哈希函数，并将这些哈希值存储在一个带有适当访问控制的配置文件或数据库中。这样，即使文件/数据库被窃取，攻击者仍然需要尝试破解密码。在身份验证期间处理传入密码时，获取密码的哈希值并将其与保存的哈希值进行比较。\n为每个生成的哈希值使用随机分配的盐。这增加了攻击者进行暴力破解攻击所需的计算量，可能限制了彩虹表攻击方法的有效性。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "对于前端到后端的连接：有三种可能的解决方案，尽管都不完整。",
                        "ul": {
                            "li": [
                                "第一个建议涉及使用由系统管理员定期更改并必须在给定时间间隔内输入的生成密码或密钥。这些密码将保存在内存中，仅在指定的时间间隔内有效。",
                                "接下来，密码或密钥应在后端限制只执行前端有效的操作，而不是具有完全访问权限。",
                                "最后，发送的消息应该使用带有时间敏感值的标签和校验和进行标记，以防止重放攻击。"
                            ]
                        }
                    },
                    "Description_Merged": "对于前端到后端的连接：有三种可能的解决方案，尽管都不完整。\n第一个建议涉及使用由系统管理员定期更改并必须在给定时间间隔内输入的生成密码或密钥。这些密码将保存在内存中，仅在指定的时间间隔内有效。\n接下来，密码或密钥应在后端限制只执行前端有效的操作，而不是具有完全访问权限。\n最后，发送的消息应该使用带有时间敏感值的标签和校验和进行标记，以防止重放攻击。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "799",
        "Name": "Improper Control of Interaction Frequency",
        "Description": "The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品未能正确限制与参与者的交互次数或频率，如未限制传入请求的数量。",
        "Name_ZH": "交互频率控制不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "804",
        "Name": "Guessable CAPTCHA",
        "Description": "The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了CAPTCHA验证码，但该验证码可以被猜测或自动识别出来，而不是由人类参与。",
        "Name_ZH": "可猜测的验证码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "805",
        "Name": "Buffer Access with Incorrect Length Value",
        "Description": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "Requirements",
                    "Strategy": "Language Selection",
                    "Description": {
                        "p": [
                            "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.",
                            "Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe."
                        ]
                    },
                    "Description_Merged": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
                    "Phase_Merged": "Requirements",
                    "Strategy_Merged": "Language Selection"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions."
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "Implementation",
                    "Description": {
                        "p": "Consider adhering to the following rules when allocating and managing an application's memory:",
                        "ul": {
                            "li": [
                                "Double check that the buffer is as large as specified.",
                                "When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.",
                                "Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.",
                                "If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions."
                            ]
                        }
                    },
                    "Description_Merged": "Consider adhering to the following rules when allocating and managing an application's memory:\nDouble check that the buffer is as large as specified.\nWhen using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\nCheck buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\nIf necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                }
            ]
        },
        "Description_ZH": "该产品使用顺序操作来读取或写入缓冲区，但使用了错误的长度值，导致访问超出缓冲区范围的内存。",
        "Name_ZH": "使用不正确的长度值访问缓冲区",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-3",
                    "Phase": "需求",
                    "Strategy": "语言选择",
                    "Description": {
                        "p": [
                            "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。",
                            "例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。",
                            "需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。"
                        ]
                    },
                    "Description_Merged": "使用不允许出现此弱点或提供使避免此弱点更容易的结构的语言。\n例如，许多自行进行内存管理的编程语言，如Java和Perl，并不容易受到缓冲区溢出的影响。其他一些语言，如Ada和C#，通常提供溢出保护机制，但程序员可以关闭这种保护机制。\n需要注意的是，即使编程语言本身在理论上是安全的，但与本地代码交互的接口仍然可能受到溢出的影响。",
                    "Phase_Merged": "需求",
                    "Strategy_Merged": "语言选择"
                },
                {
                    "@_Mitigation_ID": "MIT-4.1",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。"
                        ]
                    },
                    "Effectiveness_Notes": "This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，Messier和Viega开发的Safe C String Library（SafeStr）[REF-57]，以及微软的Strsafe.h库[REF-56]，提供了更安全的溢出易受攻击的字符串处理函数版本。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-9",
                    "Phase": "实施",
                    "Description": {
                        "p": "在分配和管理应用程序内存时，请遵循以下规则：",
                        "ul": {
                            "li": [
                                "确保缓冲区的大小与指定的大小一致。",
                                "当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。",
                                "如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。",
                                "如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。"
                            ]
                        }
                    },
                    "Description_Merged": "在分配和管理应用程序内存时，请遵循以下规则：\n确保缓冲区的大小与指定的大小一致。\n当使用接受要复制的字节数的函数（如strncpy()）时，请注意，如果目标缓冲区的大小与源缓冲区的大小相等，它可能不会在字符串末尾添加NULL终止符。\n如果在循环中访问缓冲区，请检查缓冲区边界，并确保没有危险超出分配的空间进行写入。\n如果需要，在将输入字符串传递给复制和连接函数之前，将其截断为合理的长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "使用最低权限来运行代码，以便完成必要的任务[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，一次成功的攻击不会立即使攻击者能够访问产品的其他部分或其环境。例如，数据库应用程序在日常操作中很少需要以数据库管理员身份运行。",
                    "Description_Merged": "使用最低权限来运行代码，以便完成必要的任务[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，一次成功的攻击不会立即使攻击者能够访问产品的其他部分或其环境。例如，数据库应用程序在日常操作中很少需要以数据库管理员身份运行。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                }
            ]
        }
    },
    {
        "ID": "806",
        "Name": "Buffer Access Using Size of Source Buffer",
        "Description": "The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Description_Merged": "Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.",
                            "D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.\nD3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions",
                    "Description_Merged": "Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions",
                    "Phase_Merged": "Implementation"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "Operation",
                        "Build and Compilation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.",
                            "Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.",
                            "For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\nFor more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
                    "Phase_Merged": "Operation / Build and Compilation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "Operation",
                    "Strategy": "Environment Hardening",
                    "Description": {
                        "p": [
                            "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.",
                            "For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]."
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.\nFor more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": [
                        "Build and Compilation",
                        "Operation"
                    ],
                    "Description": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
                    "Description_Merged": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
                    "Phase_Merged": "Build and Compilation / Operation"
                }
            ]
        },
        "Description_ZH": "该产品在读取或写入目标缓冲区时使用了源缓冲区的大小，可能导致访问超出缓冲区范围的内存。",
        "Name_ZH": "使用源缓冲区的大小访问缓冲区",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用抽象库来抽象出风险API。例如，Viega的Safe C String Library（SafeStr）和Microsoft的Strsafe.h库。这并不是一个完整的解决方案，因为许多缓冲区溢出与字符串无关。",
                    "Description_Merged": "使用抽象库来抽象出风险API。例如，Viega的Safe C String Library（SafeStr）和Microsoft的Strsafe.h库。这并不是一个完整的解决方案，因为许多缓冲区溢出与字符串无关。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-10",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。",
                            "D3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": {
                        "p": "This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."
                    },
                    "Description_Merged": "可以使用某些编译器或编译器扩展提供的自动缓冲区溢出检测机制。例如：Microsoft Visual Studio的/GS标志，Fedora/Red Hat FORTIFY_SOURCE GCC标志，StackGuard和ProPolice等，它们提供了各种机制，包括基于canary的检测和范围/索引检查。\nD3FEND的D3-SFCV（Stack Frame Canary Validation）[REF-1334]详细讨论了基于canary的检测。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": "实施",
                    "Description": "在分配和管理应用程序内存时，程序员应遵循以下规则：仔细检查缓冲区是否和指定的大小一样大。在使用接受要复制的字节数的函数（如strncpy()）时，要注意，如果目标缓冲区的大小等于源缓冲区的大小，可能不会给字符串加上NULL终止符。如果在循环中调用此函数，请检查缓冲区边界，并确保没有危险超出分配的空间。在传递给复制和连接函数之前，将所有输入字符串截断为合理的长度。",
                    "Description_Merged": "在分配和管理应用程序内存时，程序员应遵循以下规则：仔细检查缓冲区是否和指定的大小一样大。在使用接受要复制的字节数的函数（如strncpy()）时，要注意，如果目标缓冲区的大小等于源缓冲区的大小，可能不会给字符串加上NULL终止符。如果在循环中调用此函数，请检查缓冲区边界，并确保没有危险超出分配的空间。在传递给复制和连接函数之前，将所有输入字符串截断为合理的长度。",
                    "Phase_Merged": "实施"
                },
                {
                    "@_Mitigation_ID": "MIT-11",
                    "Phase": [
                        "操作",
                        "构建和编译"
                    ],
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。",
                            "例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
                    "Description_Merged": "使用随机排列程序的可执行文件和库在内存中的位置的功能或扩展来运行或编译软件。由于这使得地址不可预测，可以防止攻击者可靠地跳转到可利用的代码。\n例如，Address Space Layout Randomization (ASLR) [REF-58] [REF-60] 和 Position-Independent Executables (PIE) [REF-64]。如果导入的模块的默认内存地址与其他模块冲突，则可以通过“重定位”（对于Windows）和“预链接”（对于Linux）的过程，使用随机生成的地址进行类似的重新排列。由于这需要在运行时重新定位库，因此无法将ASLR用于与预链接同时使用，这会破坏预链接的整个目的。\n有关这些技术的更多信息，请参阅D3FEND的D3-SAOR（Segment Address Offset Randomization）[REF-1335]。",
                    "Phase_Merged": "操作 / 构建和编译",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-12",
                    "Phase": "操作",
                    "Strategy": "环境加固",
                    "Description": {
                        "p": [
                            "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。",
                            "有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。"
                        ]
                    },
                    "Effectiveness": "Defense in Depth",
                    "Effectiveness_Notes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
                    "Description_Merged": "使用支持数据执行保护（使用硬件NX或XD位）或在软件中模拟此功能的等效技术的CPU和操作系统，例如PaX [REF-60] [REF-61]。这些技术确保执行的任何指令都位于代码段的内存地址中。\n有关这些技术的更多信息，请参阅D3FEND的D3-PSEP（Process Segment Execution Prevention）[REF-1336]。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": [
                        "构建和编译",
                        "操作"
                    ],
                    "Description": "迄今为止，编译器或操作系统级别的大多数缓冲区溢出问题的缓解技术只解决了其中的一部分，甚至很少提供完全的保护。实施增加攻击者工作量的策略是一个好的做法，例如让攻击者猜测每次程序执行时都会变化的未知值。",
                    "Description_Merged": "迄今为止，编译器或操作系统级别的大多数缓冲区溢出问题的缓解技术只解决了其中的一部分，甚至很少提供完全的保护。实施增加攻击者工作量的策略是一个好的做法，例如让攻击者猜测每次程序执行时都会变化的未知值。",
                    "Phase_Merged": "构建和编译 / 操作"
                }
            ]
        }
    },
    {
        "ID": "807",
        "Name": "Reliance on Untrusted Inputs in a Security Decision",
        "Description": "The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-14",
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Store state information and sensitive data on the server side only.",
                            "Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.",
                            "If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328)."
                        ]
                    },
                    "Description_Merged": "Store state information and sensitive data on the server side only.\nEnsure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.\nIf information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-4.2",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "With a stateless protocol such as HTTP, use a framework that maintains the state for you.",
                            "Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].",
                            "Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nWith a stateless protocol such as HTTP, use a framework that maintains the state for you.\nExamples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].\nBe careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "Operation",
                        "Implementation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Description_Merged": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
                    "Phase_Merged": "Operation / Implementation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                            "Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data."
                        ]
                    },
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\nIdentify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品使用依赖于输入存在或值的保护机制，但输入可以被不受信任的参与者以绕过保护机制的方式进行修改。",
        "Name_ZH": "在安全决策中依赖不可信的输入",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-14",
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "只在服务器端存储状态信息和敏感数据。",
                            "确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。",
                            "如果必须在客户端存储信息，请确保进行加密和完整性检查，或者在服务器端设置机制以检测篡改。可以使用消息认证码（MAC）算法，例如Hash Message Authentication Code（HMAC）[REF-529]。将其应用于需要公开的状态或敏感数据，可以确保数据的完整性，即数据未被修改。确保使用强大的哈希函数（CWE-328）。"
                        ]
                    },
                    "Description_Merged": "只在服务器端存储状态信息和敏感数据。\n确保系统明确而无歧义地跟踪自身状态和用户状态，并定义了合法状态转换的规则。不允许应用程序用户以任何方式直接影响状态，除非通过合法操作引起状态转换。\n如果必须在客户端存储信息，请确保进行加密和完整性检查，或者在服务器端设置机制以检测篡改。可以使用消息认证码（MAC）算法，例如Hash Message Authentication Code（HMAC）[REF-529]。将其应用于需要公开的状态或敏感数据，可以确保数据的完整性，即数据未被修改。确保使用强大的哈希函数（CWE-328）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-4.2",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "对于无状态协议（如HTTP），使用一个能够为您维护状态的框架。",
                            "例如，ASP.NET View State [REF-756]和OWASP ESAPI会话管理功能[REF-45]。",
                            "注意提供状态支持的语言特性，因为这些可能是为了方便程序员而提供的，可能没有考虑到安全性。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n对于无状态协议（如HTTP），使用一个能够为您维护状态的框架。\n例如，ASP.NET View State [REF-756]和OWASP ESAPI会话管理功能[REF-45]。\n注意提供状态支持的语言特性，因为这些可能是为了方便程序员而提供的，可能没有考虑到安全性。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-16",
                    "Phase": [
                        "操作",
                        "实施"
                    ],
                    "Strategy": "环境加固",
                    "Description": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Description_Merged": "在使用PHP时，配置应用程序不使用register_globals。在实施时，开发应用程序时不依赖于此功能，但要注意实施一个register_globals仿真，该仿真可能存在CWE-95、CWE-621和类似问题的弱点。",
                    "Phase_Merged": "操作 / 实施",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                            "识别所有用于安全决策的输入，并确定是否可以修改设计，以便您完全不必依赖提交的输入。例如，您可以将关键用户会话的重要信息保存在服务器端，而不是记录在外部数据中。"
                        ]
                    },
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。\n识别所有用于安全决策的输入，并确定是否可以修改设计，以便您完全不必依赖提交的输入。例如，您可以将关键用户会话的重要信息保存在服务器端，而不是记录在外部数据中。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "820",
        "Name": "Missing Synchronization",
        "Description": "The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品以并发方式使用共享资源，但未尝试同步对该资源的访问。",
        "Name_ZH": "缺少同步",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "821",
        "Name": "Incorrect Synchronization",
        "Description": "The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品以并发方式使用共享资源，但未正确同步对该资源的访问。",
        "Name_ZH": "不正确的同步",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "822",
        "Name": "Untrusted Pointer Dereference",
        "Description": "The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品从不受信任的来源获取一个值，将该值转换为指针，并对所得指针进行解引用。",
        "Name_ZH": "不可信的指针解引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "823",
        "Name": "Use of Out-of-range Pointer Offset",
        "Description": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品对有效指针进行指针算术运算，但使用的偏移量可能指向超出所期望的有效内存范围的指针。",
        "Name_ZH": "使用超出范围的指针偏移量",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "824",
        "Name": "Access of Uninitialized Pointer",
        "Description": "The product accesses or uses a pointer that has not been initialized.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品访问或使用一个未初始化的指针。",
        "Name_ZH": "访问未初始化的指针",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "825",
        "Name": "Expired Pointer Dereference",
        "Description": "The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Choose a language that provides automatic memory management.",
                    "Description_Merged": "Choose a language that provides automatic memory management.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
                    "Description_Merged": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品解引用一个包含了先前有效但现在无效的内存位置的指针。",
        "Name_ZH": "过期指针解引用",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "选择一种具有自动内存管理功能的编程语言。",
                    "Description_Merged": "选择一种具有自动内存管理功能的编程语言。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在释放指针时，请确保它们被释放后设置为NULL。然而，多个或复杂的数据结构的使用可能降低此策略的实用性。",
                    "Description_Merged": "在释放指针时，请确保它们被释放后设置为NULL。然而，多个或复杂的数据结构的使用可能降低此策略的实用性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "826",
        "Name": "Premature Release of Resource During Expected Lifetime",
        "Description": "The product releases a resource that is still intended to be used by itself or another actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品释放了一个仍然打算被自身或其他参与者使用的资源。",
        "Name_ZH": "在预期生命周期内过早释放资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "827",
        "Name": "Improper Control of Document Type Definition",
        "Description": "The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有限制对文档类型定义（DTD）的引用在所期望的控制范围内。这可能允许攻击者引用任意的DTD，可能导致产品暴露文件、消耗过多系统资源或代表攻击者执行任意的HTTP请求。",
        "Name_ZH": "不正确控制文档类型定义",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "828",
        "Name": "Signal Handler with Functionality that is not Asynchronous-Safe",
        "Description": "The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": {
                        "p": [
                            "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.",
                            "Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.\nNote: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
                    "Description_Merged": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品定义了一个包含非异步安全代码序列的信号处理函数，即功能不可重入，或可能被中断。",
        "Name_ZH": "信号处理程序功能不是异步安全的",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": {
                        "p": [
                            "消除在信号处理程序中使用非可重入功能。这包括用可重入调用替换所有非可重入库调用。",
                            "注意：这并不总是可能的，可能需要重写甚至重新设计产品的大部分。有时可重入安全的库替代方案可能不可用。有时，系统状态和信号处理程序之间的非可重入交互可能是设计需求。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "消除在信号处理程序中使用非可重入功能。这包括用可重入调用替换所有非可重入库调用。\n注意：这并不总是可能的，可能需要重写甚至重新设计产品的大部分。有时可重入安全的库替代方案可能不可用。有时，系统状态和信号处理程序之间的非可重入交互可能是设计需求。",
                    "Phase_Merged": "实施 / 架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在信号处理程序中必须利用非可重入功能时，确保适当地阻塞或屏蔽信号。这包括在信号处理程序本身内部阻塞其他也利用该功能的信号。同时，在产品的正常行为中访问或修改该功能时，也要阻塞所有依赖该功能的信号。",
                    "Description_Merged": "在信号处理程序中必须利用非可重入功能时，确保适当地阻塞或屏蔽信号。这包括在信号处理程序本身内部阻塞其他也利用该功能的信号。同时，在产品的正常行为中访问或修改该功能时，也要阻塞所有依赖该功能的信号。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "829",
        "Name": "Inclusion of Functionality from Untrusted Control Sphere",
        "Description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "Architecture and Design",
                    "Strategy": "Enforcement by Conversion",
                    "Description": {
                        "p": [
                            "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
                            "For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability."
                        ]
                    },
                    "Description_Merged": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "Architecture and Design",
                    "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Description_Merged": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Sandbox or Jail",
                    "Description": {
                        "p": [
                            "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
                            "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
                            "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
                            "Be careful to avoid CWE-243 and other weaknesses related to jails."
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nBe careful to avoid CWE-243 and other weaknesses related to jails.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Sandbox or Jail"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Description_Merged": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                            "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
                            "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.",
                            "This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."
                        ]
                    },
                    "Description_Merged": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": {
                        "p": [
                            "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                            "Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."
                        ]
                    },
                    "Description_Merged": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.",
                    "Phase_Merged": "Architecture and Design / Implementation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "Operation",
                    "Strategy": "Firewall",
                    "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
                    "Phase_Merged": "Operation",
                    "Strategy_Merged": "Firewall"
                }
            ]
        },
        "Description_ZH": "该产品从所期望的控制范围之外的源导入、要求或包含可执行功能（如库）。",
        "Name_ZH": "包含来自不受信任的控制领域的功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "@_Mitigation_ID": "MIT-21.1",
                    "Phase": "架构与设计",
                    "Strategy": "通过转换进行强制执行",
                    "Description": {
                        "p": [
                            "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。",
                            "例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。诸如ESAPI AccessReferenceMap [REF-45]的功能可以提供这种能力。"
                        ]
                    },
                    "Description_Merged": "当可接受的对象集（如文件名或URL）有限或已知时，创建从一组固定输入值（如数字ID）到实际文件名或URL的映射，并拒绝所有其他输入。\n例如，ID 1可以映射到\"inbox.txt\"，ID 2可以映射到\"profile.txt\"。诸如ESAPI AccessReferenceMap [REF-45]的功能可以提供这种能力。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "@_Mitigation_ID": "MIT-15",
                    "Phase": "架构与设计",
                    "Description": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Description_Merged": "对于在客户端执行的任何安全检查，请确保这些检查在服务器端进行复制，以避免CWE-602。攻击者可以通过在检查完成后修改值或更改客户端以完全删除客户端检查来绕过客户端检查。然后，这些修改后的值将提交给服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-22",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "沙箱或监狱",
                    "Description": {
                        "p": [
                            "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。",
                            "操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。",
                            "这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。",
                            "请注意避免CWE-243和与监狱相关的其他弱点。"
                        ]
                    },
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
                    "Description_Merged": "在执行过程和操作系统之间强制执行严格边界的\"jail\"或类似沙箱环境中运行代码。这可能有效限制可以在特定目录中访问的文件或软件可以执行的命令。\n操作系统级的示例包括Unix的chroot jail，AppArmor和SELinux。一般来说，托管代码可能会提供一些保护。例如，Java SecurityManager中的java.io.FilePermission允许软件对文件操作进行限制。\n这可能并非是可行的解决方案，它只限制对操作系统的影响；应用程序的其余部分仍可能受到威胁。\n请注意避免CWE-243和与监狱相关的其他弱点。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "沙箱或监狱"
                },
                {
                    "@_Mitigation_ID": "MIT-17",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Description_Merged": "以完成所需任务所需的最低权限运行代码[REF-76]。如果可能，创建具有有限权限的隔离账户，仅用于单个任务。这样，成功的攻击不会立即使攻击者能够访问软件或其环境的其他部分。例如，数据库应用程序通常不需要以数据库管理员身份运行，特别是在日常操作中。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "@_Mitigation_ID": "MIT-5.1",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                            "在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。",
                            "不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。\n在验证文件名时，使用严格的白名单，限制要使用的字符集。如果可行，仅允许文件名中包含一个\".\"字符，以避免像CWE-23这样的弱点，并排除目录分隔符如\"/\"以避免CWE-36。使用允许的文件扩展名列表，这有助于避免CWE-434。\n不要仅依赖于删除潜在危险字符的过滤机制。这相当于一个拒绝名单，可能是不完整的 (CWE-184)。例如，仅过滤\"/\"无法提供足够的保护，如果文件系统还支持使用\"\\\"作为目录分隔符的话。还可能出现另一种错误，即过滤应用方式仍然产生危险数据的情况 (CWE-182)。例如，如果在顺序方式下从\".../...//\"字符串中删除\"../\"序列，原始字符串中的两个\"../\"实例将被删除，但剩余的字符仍然形成\"../\"字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "@_Mitigation_ID": "MIT-34",
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。",
                            "这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。"
                        ]
                    },
                    "Description_Merged": "如果可能的话，将库文件、包含文件和实用程序文件存储在网页文档根目录之外。否则，将它们存储在一个单独的目录中，并使用Web服务器的访问控制功能防止攻击者直接请求它们。一种常见做法是在每个调用程序中定义一个固定的常量，然后在库文件/包含文件中检查该常量的存在性；如果常量不存在，则表示该文件是直接请求的，可以立即退出。\n这将大大降低攻击者绕过基础程序中的任何保护机制的可能性，同时也减少了攻击面。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-6",
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": {
                        "p": [
                            "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。",
                            "许多文件包含问题是因为程序员假设某些输入不能被修改，特别是对于cookie和URL组件。"
                        ]
                    },
                    "Description_Merged": "了解所有潜在的不受信任的输入可能进入软件的领域：参数或参数、Cookie、从网络读取的任何内容、环境变量、反向DNS查找、查询结果、请求头、URL组件、电子邮件、文件、文件名、数据库以及为应用程序提供数据的任何外部系统。请记住，此类输入可能是通过API调用间接获取的。\n许多文件包含问题是因为程序员假设某些输入不能被修改，特别是对于cookie和URL组件。",
                    "Phase_Merged": "架构与设计 / 实施",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "@_Mitigation_ID": "MIT-29",
                    "Phase": "操作",
                    "Strategy": "防火墙",
                    "Description": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
                    "Description_Merged": "使用应用程序防火墙，可以检测针对此漏洞的攻击。在代码无法修复的情况下（因为它由第三方控制），这可能是有益的，作为一种紧急预防措施，同时应用更全面的软件保证措施，或者提供防御层面。",
                    "Phase_Merged": "操作",
                    "Strategy_Merged": "防火墙"
                }
            ]
        }
    },
    {
        "ID": "830",
        "Name": "Inclusion of Web Functionality from an Untrusted Source",
        "Description": "The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品从另一个域中包含Web功能（如Web小部件），这使其在产品的域内运行，可能授予不受信任的源对产品的完全访问和控制权。",
        "Name_ZH": "包含来自不受信任来源的Web功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "831",
        "Name": "Signal Handler Function Associated with Multiple Signals",
        "Description": "The product defines a function that is used as a handler for more than one signal.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品定义了一个被用作多个信号处理程序的函数。",
        "Name_ZH": "与多个信号相关联的信号处理程序函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "832",
        "Name": "Unlock of a Resource that is not Locked",
        "Description": "The product attempts to unlock a resource that is not locked.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品尝试解锁一个未锁定的资源。",
        "Name_ZH": "解锁未加锁的资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "833",
        "Name": "Deadlock",
        "Description": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含多个线程或可执行段，它们互相等待释放必要的锁定，导致死锁。",
        "Name_ZH": "死锁",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "834",
        "Name": "Excessive Iteration",
        "Description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品执行迭代或循环时，没有充分限制循环执行的次数。",
        "Name_ZH": "过度迭代",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "835",
        "Name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
        "Description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个具有无法达到的退出条件的迭代或循环，即无限循环。",
        "Name_ZH": "循环具有不可达的退出条件（“无限循环”）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "836",
        "Name": "Use of Password Hash Instead of Password for Authentication",
        "Description": "The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将密码哈希记录在数据存储中，接收来自客户端的密码哈希，并将提供的哈希与从数据存储中获取的哈希进行比较。",
        "Name_ZH": "使用密码哈希而不是密码进行身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "837",
        "Name": "Improper Enforcement of a Single, Unique Action",
        "Description": "The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品要求参与者只能执行一次操作，或者只能具有一个唯一的操作，但该产品未强制执行或不正确地执行此限制。",
        "Name_ZH": "不正确执行单一且唯一的操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "838",
        "Name": "Inappropriate Encoding for Output Context",
        "Description": "The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Output Encoding",
                    "Description": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.",
                    "Description_Merged": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Output Encoding",
                    "Description": "Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.",
                    "Description_Merged": "Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Output Encoding"
                },
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.",
                            "Note that some template mechanisms provide built-in support for the appropriate encoding."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\nNote that some template mechanisms provide built-in support for the appropriate encoding.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                }
            ]
        },
        "Description_ZH": "该产品在生成输出给下游组件时使用或指定了编码，但指定的编码与下游组件所期望的编码不同。",
        "Name_ZH": "输出上下文的不适当编码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输出编码",
                    "Description": "使用上下文感知编码。也就是说，了解下游组件正在使用的编码，并确保使用该编码。如果可以指定编码，请这样做，而不是假设默认编码与下游组件假定的默认编码相同。",
                    "Description_Merged": "使用上下文感知编码。也就是说，了解下游组件正在使用的编码，并确保使用该编码。如果可以指定编码，请这样做，而不是假设默认编码与下游组件假定的默认编码相同。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "输出编码",
                    "Description": "在可能的情况下，使用提供控制和数据之间严格边界的通信协议或数据格式。如果这不可行，请确保协议或格式允许通信组件明确说明使用的编码/解码方法。一些模板框架提供内置支持。",
                    "Description_Merged": "在可能的情况下，使用提供控制和数据之间严格边界的通信协议或数据格式。如果这不可行，请确保协议或格式允许通信组件明确说明使用的编码/解码方法。一些模板框架提供内置支持。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "输出编码"
                },
                {
                    "@_Mitigation_ID": "MIT-4.3",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。",
                            "请注意，一些模板机制提供了适当编码的内置支持。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用ESAPI编码控制[REF-45]或类似的工具、库或框架。这些工具有助于程序员以较少容易出错的方式对输出进行编码。\n请注意，一些模板机制提供了适当编码的内置支持。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                }
            ]
        }
    },
    {
        "ID": "839",
        "Name": "Numeric Range Comparison Without Minimum Check",
        "Description": "The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.",
                    "Description_Merged": "If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.",
                    "Description_Merged": "If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品检查一个值以确保它小于或等于最大值，但它没有验证该值是否大于或等于最小值。",
        "Name_ZH": "无最小检查的数值范围比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "如果要使用的数字始终预期为正数，请将变量类型从有符号更改为无符号或size_t。",
                    "Description_Merged": "如果要使用的数字始终预期为正数，请将变量类型从有符号更改为无符号或size_t。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "如果要使用的数字基于规范可能具有负值（因此需要有符号值），但为了保持代码正确性，该数字应仅为正数，则应包含检查以确保该值为正数。",
                    "Description_Merged": "如果要使用的数字基于规范可能具有负值（因此需要有符号值），但为了保持代码正确性，该数字应仅为正数，则应包含检查以确保该值为正数。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "841",
        "Name": "Improper Enforcement of Behavioral Workflow",
        "Description": "The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品支持一个会话，其中一个参与者必须执行多个行为，但它未正确确保参与者按照所需的顺序执行这些行为。",
        "Name_ZH": "不正确执行行为工作流程",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "842",
        "Name": "Placement of User into Incorrect Group",
        "Description": "The product or the administrator places a user into an incorrect group.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品或管理员将用户放入了错误的组中。",
        "Name_ZH": "将用户放入错误的组",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "843",
        "Name": "Access of Resource Using Incompatible Type ('Type Confusion')",
        "Description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用一种类型来分配或初始化资源，如指针、对象或变量，但之后使用与原始类型不兼容的类型访问该资源。",
        "Name_ZH": "使用不兼容类型访问资源（“类型混淆”）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "862",
        "Name": "Missing Authorization",
        "Description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.",
                            "Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."
                        ]
                    },
                    "Description_Merged": "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
                    "Description_Merged": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.",
                            "One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."
                        ]
                    },
                    "Description_Merged": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "System Configuration",
                        "Installation"
                    ],
                    "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Description_Merged": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Phase_Merged": "System Configuration / Installation"
                }
            ]
        },
        "Description_ZH": "当一个参与者试图访问资源或执行操作时，该产品没有执行授权检查。",
        "Name_ZH": "缺少授权",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "将产品分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）[REF-229]在适当的边界处强制执行角色。",
                            "请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。"
                        ]
                    },
                    "Description_Merged": "将产品分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）[REF-229]在适当的边界处强制执行角色。\n请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保执行与业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问，仅允许特定的数据库用户访问，但每个记录可能只能由患者和患者的医生访问[REF-7]。",
                    "Description_Merged": "确保执行与业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问，仅允许特定的数据库用户访问，但每个记录可能只能由患者和患者的医生访问[REF-7]。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。",
                            "一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。"
                        ]
                    },
                    "Description_Merged": "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。\n一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "系统配置",
                        "安装"
                    ],
                    "Description": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Description_Merged": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Phase_Merged": "系统配置 / 安装"
                }
            ]
        }
    },
    {
        "ID": "863",
        "Name": "Incorrect Authorization",
        "Description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.",
                            "Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role."
                        ]
                    },
                    "Description_Merged": "Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
                    "Description_Merged": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": {
                        "p": [
                            "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
                            "For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]."
                        ]
                    },
                    "Description_Merged": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.",
                            "One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page."
                        ]
                    },
                    "Description_Merged": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "System Configuration",
                        "Installation"
                    ],
                    "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Description_Merged": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
                    "Phase_Merged": "System Configuration / Installation"
                }
            ]
        },
        "Description_ZH": "当一个参与者试图访问资源或执行操作时，该产品执行了授权检查，但没有正确执行检查。这使得攻击者能够绕过预期的访问限制。",
        "Name_ZH": "错误的授权",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "将产品分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）[REF-229]在适当的边界处强制执行角色。",
                            "请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。"
                        ]
                    },
                    "Description_Merged": "将产品分为匿名、普通、特权和管理区域。通过仔细映射角色与数据和功能来减少攻击面。使用基于角色的访问控制（RBAC）[REF-229]在适当的边界处强制执行角色。\n请注意，此方法可能无法保护免受水平授权的攻击，即它无法防止具有相同角色的用户互相攻击。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保执行与业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问，仅允许特定的数据库用户访问，但每个记录可能只能由患者和患者的医生访问[REF-7]。",
                    "Description_Merged": "确保执行与业务逻辑相关的访问控制检查。这些检查可能与应用于更通用资源（如文件、连接、进程、内存和数据库记录）的访问控制检查不同。例如，数据库可能会限制对医疗记录的访问，仅允许特定的数据库用户访问，但每个记录可能只能由患者和患者的医生访问[REF-7]。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-4.4",
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": {
                        "p": [
                            "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。",
                            "例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。"
                        ]
                    },
                    "Description_Merged": "使用经过验证的库或框架，它不允许发生这种漏洞，或者提供使此漏洞更容易避免的结构。\n例如，考虑使用授权框架，如JAAS授权框架[REF-233]和OWASP ESAPI访问控制功能[REF-45]。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。",
                            "一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。"
                        ]
                    },
                    "Description_Merged": "对于Web应用程序，请确保服务器端正确执行访问控制机制，且在每个页面上都能生效。用户不能通过简单地请求直接访问该页面来访问任何未经授权的功能或信息。\n一种方法是确保包含敏感信息的所有页面不被缓存，并且所有这些页面限制对由具有所需权限的用户关联的活动和经过身份验证的会话令牌的请求的访问。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "系统配置",
                        "安装"
                    ],
                    "Description": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Description_Merged": "利用操作系统和服务器环境的访问控制能力，并相应地定义访问控制列表。在定义这些ACL时使用“默认拒绝”策略。",
                    "Phase_Merged": "系统配置 / 安装"
                }
            ]
        }
    },
    {
        "ID": "908",
        "Name": "Use of Uninitialized Resource",
        "Description": "The product uses or accesses a resource that has not been initialized.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.",
                    "Description_Merged": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
                    "Description_Merged": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Description_Merged": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "Run or compile the product with settings that generate warnings about uninitialized variables or data.",
                    "Description_Merged": "Run or compile the product with settings that generate warnings about uninitialized variables or data.",
                    "Phase_Merged": "Build and Compilation"
                }
            ]
        },
        "Description_ZH": "该产品使用或访问了一个未初始化的资源。",
        "Name_ZH": "使用未初始化的资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在使用之前明确初始化资源。如果通过API函数或标准过程执行此操作，请遵循所有必需的步骤。",
                    "Description_Merged": "在使用之前明确初始化资源。如果通过API函数或标准过程执行此操作，请遵循所有必需的步骤。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "密切注意影响初始化的复杂条件，因为某些分支可能不执行初始化操作。",
                    "Description_Merged": "密切注意影响初始化的复杂条件，因为某些分支可能不执行初始化操作。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Description_Merged": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "使用会产生关于未初始化变量或数据的警告的设置来运行或编译产品。",
                    "Description_Merged": "使用会产生关于未初始化变量或数据的警告的设置来运行或编译产品。",
                    "Phase_Merged": "构建和编译"
                }
            ]
        }
    },
    {
        "ID": "909",
        "Name": "Missing Initialization of Resource",
        "Description": "The product does not initialize a critical resource.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.",
                    "Description_Merged": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
                    "Description_Merged": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Description_Merged": "Avoid race conditions (CWE-362) during initialization routines.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "Run or compile your product with settings that generate warnings about uninitialized variables or data.",
                    "Description_Merged": "Run or compile your product with settings that generate warnings about uninitialized variables or data.",
                    "Phase_Merged": "Build and Compilation"
                }
            ]
        },
        "Description_ZH": "该产品没有初始化一个关键资源。",
        "Name_ZH": "缺少资源的初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在使用之前明确初始化资源。如果是通过API函数或标准流程执行此操作，请遵循所有指定的步骤。",
                    "Description_Merged": "在使用之前明确初始化资源。如果是通过API函数或标准流程执行此操作，请遵循所有指定的步骤。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "密切注意影响初始化的复杂条件，因为某些分支可能不执行初始化操作。",
                    "Description_Merged": "密切注意影响初始化的复杂条件，因为某些分支可能不执行初始化操作。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Description_Merged": "避免在初始化过程中出现竞态条件（CWE-362）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "使用设置生成关于未初始化变量或数据的警告来运行或编译您的产品。",
                    "Description_Merged": "使用设置生成关于未初始化变量或数据的警告来运行或编译您的产品。",
                    "Phase_Merged": "构建和编译"
                }
            ]
        }
    },
    {
        "ID": "910",
        "Name": "Use of Expired File Descriptor",
        "Description": "The product uses or accesses a file descriptor after it has been closed.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在文件描述符关闭后仍然使用或访问它。",
        "Name_ZH": "使用过期文件描述符",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "911",
        "Name": "Improper Update of Reference Count",
        "Description": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用引用计数来管理资源，但没有更新或错误地更新引用计数。",
        "Name_ZH": "不正确更新引用计数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "912",
        "Name": "Hidden Functionality",
        "Description": "The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Installation",
                    "Description": "Always verify the integrity of the product that is being installed.",
                    "Description_Merged": "Always verify the integrity of the product that is being installed.",
                    "Phase_Merged": "Installation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
                    "Description_Merged": "Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品包含未记录、不属于规范、且对于产品的用户或管理员来说不明显可见的功能。",
        "Name_ZH": "隐藏功能",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "安装",
                    "Description": "始终验证正在安装的产品的完整性。",
                    "Description_Merged": "始终验证正在安装的产品的完整性。",
                    "Phase_Merged": "安装"
                },
                {
                    "Phase": "测试",
                    "Description": "使用实时测试进行代码覆盖率分析，然后仔细检查未覆盖的任何代码。",
                    "Description_Merged": "使用实时测试进行代码覆盖率分析，然后仔细检查未覆盖的任何代码。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "913",
        "Name": "Improper Control of Dynamically-Managed Code Resources",
        "Description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "For any externally-influenced input, check the input against an allowlist of acceptable values.",
                    "Description_Merged": "For any externally-influenced input, check the input against an allowlist of acceptable values.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Refactoring",
                    "Description": "Refactor the code so that it does not need to be dynamically managed.",
                    "Description_Merged": "Refactor the code so that it does not need to be dynamically managed.",
                    "Phase_Merged": "Implementation / Architecture and Design",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "该产品没有正确限制对动态管理的代码资源（如变量、对象、类、属性、函数或可执行指令或语句）的读取和写入。",
        "Name_ZH": "不正确控制动态管理的代码资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "对于任何受外部影响的输入，请将输入与可接受值的允许列表进行检查。",
                    "Description_Merged": "对于任何受外部影响的输入，请将输入与可接受值的允许列表进行检查。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Strategy": "重构",
                    "Description": "重构代码，使其不需要动态管理。",
                    "Description_Merged": "重构代码，使其不需要动态管理。",
                    "Phase_Merged": "实施 / 架构与设计",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "914",
        "Name": "Improper Control of Dynamically-Identified Variables",
        "Description": "The product does not properly restrict reading from or writing to dynamically-identified variables.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.",
                    "Description_Merged": "For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Refactoring",
                    "Description": "Refactor the code so that internal program variables do not need to be dynamically identified.",
                    "Description_Merged": "Refactor the code so that internal program variables do not need to be dynamically identified.",
                    "Phase_Merged": "Implementation / Architecture and Design",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "该产品没有正确限制对动态标识的变量的读取和写入。",
        "Name_ZH": "不正确控制动态识别的变量",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "对于任何受外部影响的输入，请将输入与允许修改的内部程序变量的允许列表进行检查。",
                    "Description_Merged": "对于任何受外部影响的输入，请将输入与允许修改的内部程序变量的允许列表进行检查。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Strategy": "重构",
                    "Description": "重构代码，使内部程序变量不需要动态标识。",
                    "Description_Merged": "重构代码，使内部程序变量不需要动态标识。",
                    "Phase_Merged": "实施 / 架构与设计",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "915",
        "Name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
        "Description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists.",
                            "For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment."
                        ]
                    },
                    "Description_Merged": "If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists.\nFor applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
                    "Description_Merged": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.",
                    "Description_Merged": "For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Refactoring",
                    "Description": "Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.",
                    "Description_Merged": "Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.",
                    "Phase_Merged": "Implementation / Architecture and Design",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "该产品从上游组件接收输入，指定要在对象中初始化或更新的多个属性、属性或字段，但没有正确控制哪些属性可以被修改。",
        "Name_ZH": "不正确控制动态确定的对象属性的修改",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "如果可用，使用语言或框架的功能，允许指定允许修改的属性或字段的允许列表。如果可能，优先使用允许列表而不是拒绝列表。",
                            "对于使用Ruby on Rails编写的应用程序，在每个可能用于批量赋值的类中使用attr_accessible（允许列表）或attr_protected（拒绝列表）宏。"
                        ]
                    },
                    "Description_Merged": "如果可用，使用语言或框架的功能，允许指定允许修改的属性或字段的允许列表。如果可能，优先使用允许列表而不是拒绝列表。\n对于使用Ruby on Rails编写的应用程序，在每个可能用于批量赋值的类中使用attr_accessible（允许列表）或attr_protected（拒绝列表）宏。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "如果可用，使用编程语言的签名/封装功能来确保反序列化数据未被污染。例如，可以使用基于哈希的消息认证码（HMAC）来确保数据未被修改。",
                    "Description_Merged": "如果可用，使用编程语言的签名/封装功能来确保反序列化数据未被污染。例如，可以使用基于哈希的消息认证码（HMAC）来确保数据未被修改。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "对于任何受外部影响的输入，请将输入与允许修改的内部对象属性或字段的允许列表进行检查。",
                    "Description_Merged": "对于任何受外部影响的输入，请将输入与允许修改的内部对象属性或字段的允许列表进行检查。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Strategy": "重构",
                    "Description": "重构代码，使对象属性或字段不需要动态标识，并且只公开用于预期属性的getter/setter功能。",
                    "Description_Merged": "重构代码，使对象属性或字段不需要动态标识，并且只公开用于预期属性的getter/setter功能。",
                    "Phase_Merged": "实施 / 架构与设计",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "916",
        "Name": "Use of Password Hash With Insufficient Computational Effort",
        "Description": "The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.",
                            "Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.",
                            "Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "Implementation",
                        "Architecture and Design"
                    ],
                    "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Description_Merged": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
                    "Phase_Merged": "Implementation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品为密码生成哈希值，但使用的方案不能提供足够的计算工作量，使得密码破解攻击变得不可行或昂贵。",
        "Name_ZH": "使用密码哈希时计算工作不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-51",
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。",
                            "一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。",
                            "需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "使用自适应哈希函数，可以配置以改变计算哈希所需的计算工作量，例如迭代次数（\"stretching\"）或所需的内存量。一些哈希函数自动执行盐值处理。这些函数可以显著增加针对暴力破解攻击的开销，与MD5等意图快速函数相比。例如，由于计算能力随着时间的推移变得更快更便宜，该技术可以重新配置以增加工作量，而无需完全替换正在使用的算法。\n一些具备这些期望特性的哈希函数包括bcrypt [REF-291]、scrypt [REF-292]和PBKDF2 [REF-293]。虽然目前对于哪个函数最有效仍存在争议，但它们都比使用带有很少计算开销的哈希函数的盐值更强大。\n需要注意的是，使用这些函数可能会影响性能，因此需要特别考虑以避免拒绝服务攻击。然而，它们的可配置性提供了对CPU和内存使用量更精细的控制，可以根据环境的需求进行调整。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-25",
                    "Phase": [
                        "实施",
                        "架构与设计"
                    ],
                    "Description": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Description_Merged": "在使用行业认可的技术时，请正确使用它们。不要为了节省资源而绕过耗费资源的步骤（CWE-325）。这些步骤通常对于防止常见攻击非常重要。",
                    "Phase_Merged": "实施 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "917",
        "Name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
        "Description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Avoid adding user-controlled data into an expression interpreter when possible.",
                    "Description_Merged": "Avoid adding user-controlled data into an expression interpreter when possible.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": "If user-controlled data must be added to an expression interpreter, one or more of the following should be performed:",
                        "ul": {
                            "li": [
                                "Validate that the user input will not evaluate as an expression",
                                "Encode the user input in a way that ensures it is not evaluated as an expression"
                            ]
                        }
                    },
                    "Description_Merged": "If user-controlled data must be added to an expression interpreter, one or more of the following should be performed:\nValidate that the user input will not evaluate as an expression\nEncode the user input in a way that ensures it is not evaluated as an expression",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "System Configuration",
                        "Operation"
                    ],
                    "Description": "The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\".",
                    "Description_Merged": "The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\".",
                    "Phase_Merged": "System Configuration / Operation"
                }
            ]
        },
        "Description_ZH": "该产品在诸如Java Server Page (JSP)的框架中构建表达式语言 (EL) 语句的全部或部分，使用上游组件的外部影响输入，但在执行之前未对可能修改预期的EL语句的特殊元素进行中和或错误中和。",
        "Name_ZH": "未适当中和表达式语言语句中使用的特殊元素（“表达式语言注入”）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "尽量避免将用户可控数据添加到表达式解释器中。",
                    "Description_Merged": "尽量避免将用户可控数据添加到表达式解释器中。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": "如果必须将用户可控数据添加到表达式解释器中，应执行以下一项或多项操作：",
                        "ul": {
                            "li": [
                                "验证用户输入不能作为表达式进行评估。",
                                "以确保用户输入不被作为表达式进行评估的方式对用户输入进行编码。"
                            ]
                        }
                    },
                    "Description_Merged": "如果必须将用户可控数据添加到表达式解释器中，应执行以下一项或多项操作：\n验证用户输入不能作为表达式进行评估。\n以确保用户输入不被作为表达式进行评估的方式对用户输入进行编码。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "系统配置",
                        "操作"
                    ],
                    "Description": "框架或工具可能允许开发人员禁用或停用EL表达式的处理，例如将JSP页面的isELIgnored属性设置为\"true\"。",
                    "Description_Merged": "框架或工具可能允许开发人员禁用或停用EL表达式的处理，例如将JSP页面的isELIgnored属性设置为\"true\"。",
                    "Phase_Merged": "系统配置 / 操作"
                }
            ]
        }
    },
    {
        "ID": "918",
        "Name": "Server-Side Request Forgery (SSRF)",
        "Description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "Web服务器从上游组件接收URL或类似请求并检索此URL的内容，但未充分确保请求被发送到预期的目标。",
        "Name_ZH": "服务器端请求伪造（SSRF）",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "920",
        "Name": "Improper Restriction of Power Consumption",
        "Description": "The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在一个能量是有限资源且无法自动补充的环境中运行，但未正确限制其操作消耗的能量量。",
        "Name_ZH": "不正确限制功耗",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "921",
        "Name": "Storage of Sensitive Data in a Mechanism without Access Control",
        "Description": "The product stores sensitive information in a file system or device that does not have built-in access control.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品将敏感信息存储在没有内建访问控制的文件系统或设备中。",
        "Name_ZH": "在没有访问控制的机制中存储敏感数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "922",
        "Name": "Insecure Storage of Sensitive Information",
        "Description": "The product stores sensitive information without properly limiting read or write access by unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在未适当限制未经授权的用户的读取或写入访问权限的情况下存储敏感信息。",
        "Name_ZH": "敏感信息的不安全存储",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "923",
        "Name": "Improper Restriction of Communication Channel to Intended Endpoints",
        "Description": "The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品建立了与权限或受保护操作的端点之间的通信通道，但未正确确保正在与正确的端点通信。",
        "Name_ZH": "不正确限制通信通道到预期端点",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "924",
        "Name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
        "Description": "The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品建立与端点的通信通道并接收来自该端点的消息，但未充分确保消息在传输过程中没有被修改。",
        "Name_ZH": "在通信通道中传输期间不正确执行消息完整性",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "925",
        "Name": "Improper Verification of Intent by Broadcast Receiver",
        "Description": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
                    "Description_Merged": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "Android应用程序使用一个接收Intent的广播接收器，但未正确验证Intent是否来自授权的来源。",
        "Name_ZH": "广播接收器不正确验证意图",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在执行Intent之前，检查Intent Action以确保其与预期的系统操作匹配。",
                    "Description_Merged": "在执行Intent之前，检查Intent Action以确保其与预期的系统操作匹配。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "926",
        "Name": "Improper Export of Android Application Components",
        "Description": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Build and Compilation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.",
                    "Description_Merged": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.",
                    "Phase_Merged": "Build and Compilation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": "Build and Compilation",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.",
                    "Description_Merged": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.",
                    "Phase_Merged": "Build and Compilation",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": [
                        "Build and Compilation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Limit Content Provider permissions (read/write) as appropriate.",
                    "Description_Merged": "Limit Content Provider permissions (read/write) as appropriate.",
                    "Phase_Merged": "Build and Compilation / Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": [
                        "Build and Compilation",
                        "Architecture and Design"
                    ],
                    "Strategy": "Separation of Privilege",
                    "Description": "Limit Content Provider permissions (read/write) as appropriate.",
                    "Description_Merged": "Limit Content Provider permissions (read/write) as appropriate.",
                    "Phase_Merged": "Build and Compilation / Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "Android应用程序导出一个组件供其他应用程序使用，但未正确限制可以启动该组件或访问其中包含的数据的应用程序。",
        "Name_ZH": "不正确导出Android应用程序组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "构建和编译",
                    "Strategy": "攻击面缩减",
                    "Description": "如果不需要被其他应用程序共享，可以在应用程序清单中明确标记组件为android:exported=\"false\"。",
                    "Description_Merged": "如果不需要被其他应用程序共享，可以在应用程序清单中明确标记组件为android:exported=\"false\"。",
                    "Phase_Merged": "构建和编译",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": "构建和编译",
                    "Strategy": "攻击面缩减",
                    "Description": "如果只打算在受您控制的相关应用程序之间使用导出的组件，请在xml清单中使用android:protectionLevel=\"signature\"来限制对由您签名的应用程序的访问。",
                    "Description_Merged": "如果只打算在受您控制的相关应用程序之间使用导出的组件，请在xml清单中使用android:protectionLevel=\"signature\"来限制对由您签名的应用程序的访问。",
                    "Phase_Merged": "构建和编译",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": [
                        "构建和编译",
                        "架构与设计"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "根据需要适当限制内容提供程序的权限（读/写）。",
                    "Description_Merged": "根据需要适当限制内容提供程序的权限（读/写）。",
                    "Phase_Merged": "构建和编译 / 架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": [
                        "构建和编译",
                        "架构与设计"
                    ],
                    "Strategy": "权限分离",
                    "Description": "根据需要适当限制内容提供程序的权限（读/写）。",
                    "Description_Merged": "根据需要适当限制内容提供程序的权限（读/写）。",
                    "Phase_Merged": "构建和编译 / 架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "927",
        "Name": "Use of Implicit Intent for Sensitive Communication",
        "Description": "The Android application uses an implicit intent for transmitting sensitive data to other applications.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.",
                    "Description_Merged": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该Android应用程序使用隐式意图将敏感数据传输给其他应用程序。",
        "Name_ZH": "使用隐式意图进行敏感通信",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "如果应用程序仅需要与自己的组件通信，则目标始终已知，可以使用显式Intent。",
                    "Description_Merged": "如果应用程序仅需要与自己的组件通信，则目标始终已知，可以使用显式Intent。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "939",
        "Name": "Improper Authorization in Handler for Custom URL Scheme",
        "Description": "The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.",
                            "When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate."
                        ]
                    },
                    "Description_Merged": "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品使用处理程序处理自定义URL方案，但未正确限制可以使用该方案调用处理程序的参与者。",
        "Name_ZH": "自定义URL Scheme处理程序中的授权不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "利用用户提示弹窗来授权潜在的有害行为，如修改数据或处理敏感信息。",
                            "在设计URL方案中的操作功能时，要考虑该操作是否应该对所有移动应用程序开放，或者是否适合使用允许列表来进行接口交互。"
                        ]
                    },
                    "Description_Merged": "利用用户提示弹窗来授权潜在的有害行为，如修改数据或处理敏感信息。\n在设计URL方案中的操作功能时，要考虑该操作是否应该对所有移动应用程序开放，或者是否适合使用允许列表来进行接口交互。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "940",
        "Name": "Improper Verification of Source of a Communication Channel",
        "Description": "The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.",
                            "When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate."
                        ]
                    },
                    "Description_Merged": "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品建立通信渠道以处理由参与者发起的传入请求，但未正确验证该请求是否来自预期的来源。",
        "Name_ZH": "未正确验证通信通道的来源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "使用一种可以验证源身份（如证书）和验证数据完整性的机制，以确保在传输过程中无法通过中间人攻击（AITM）修改数据。",
                            "在设计URL方案中的操作功能时，要考虑该操作是否应该对所有移动应用程序开放，或者是否适合使用允许列表来进行接口交互。"
                        ]
                    },
                    "Description_Merged": "使用一种可以验证源身份（如证书）和验证数据完整性的机制，以确保在传输过程中无法通过中间人攻击（AITM）修改数据。\n在设计URL方案中的操作功能时，要考虑该操作是否应该对所有移动应用程序开放，或者是否适合使用允许列表来进行接口交互。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "941",
        "Name": "Incorrectly Specified Destination in a Communication Channel",
        "Description": "The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品创建通信渠道以向参与者发起传出请求，但未正确指定参与者的预期目标。",
        "Name_ZH": "通信通道中目标指定不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "942",
        "Name": "Permissive Cross-domain Policy with Untrusted Domains",
        "Description": "The product uses a cross-domain policy file that includes domains that should not be trusted.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Attack Surface Reduction",
                    "Description": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
                    "Description_Merged": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Attack Surface Reduction"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Environment Hardening",
                    "Description": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
                    "Description_Merged": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Environment Hardening"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Operation"
                    ],
                    "Strategy": "Attack Surface Reduction",
                    "Description": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
                    "Description_Merged": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
                    "Phase_Merged": "Architecture and Design / Operation",
                    "Strategy_Merged": "Attack Surface Reduction"
                }
            ]
        },
        "Description_ZH": "该产品使用跨域策略文件，其中包括不应被信任的域。",
        "Name_ZH": "宽松的跨域策略与不受信任的域名",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "攻击面缩减",
                    "Description": "避免在跨域策略文件中使用通配符。任何与通配符表达式匹配的域将被隐式信任，并可以与目标服务器进行双向交互。",
                    "Description_Merged": "避免在跨域策略文件中使用通配符。任何与通配符表达式匹配的域将被隐式信任，并可以与目标服务器进行双向交互。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "攻击面缩减"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "环境加固",
                    "Description": "对于Flash，请修改crossdomain.xml文件，使用'master-only'或'none'等元策略选项，以减少攻击者在服务器上植入额外的跨域策略文件的可能性。",
                    "Description_Merged": "对于Flash，请修改crossdomain.xml文件，使用'master-only'或'none'等元策略选项，以减少攻击者在服务器上植入额外的跨域策略文件的可能性。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "环境加固"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "操作"
                    ],
                    "Strategy": "攻击面缩减",
                    "Description": "对于Flash，请修改crossdomain.xml文件，使用'master-only'或'none'等元策略选项，以减少攻击者在服务器上植入额外的跨域策略文件的可能性。",
                    "Description_Merged": "对于Flash，请修改crossdomain.xml文件，使用'master-only'或'none'等元策略选项，以减少攻击者在服务器上植入额外的跨域策略文件的可能性。",
                    "Phase_Merged": "架构与设计 / 操作",
                    "Strategy_Merged": "攻击面缩减"
                }
            ]
        }
    },
    {
        "ID": "943",
        "Name": "Improper Neutralization of Special Elements in Data Query Logic",
        "Description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品生成查询，用于访问或操作数据存储（例如数据库），但未中和或错误中和可以修改查询预期逻辑的特殊元素。",
        "Name_ZH": "数据查询逻辑中特殊元素未正确中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1004",
        "Name": "Sensitive Cookie Without 'HttpOnly' Flag",
        "Description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
                    "Description_Merged": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用Cookie存储敏感信息，但该Cookie未标记为HttpOnly。",
        "Name_ZH": "敏感Cookie未设置'HttpOnly'标志",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在设置敏感cookie的响应中使用HttpOnly标志。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
                    "Description_Merged": "在设置敏感cookie的响应中使用HttpOnly标志。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1007",
        "Name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
        "Description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.",
                            "Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages."
                        ]
                    },
                    "Description_Merged": "Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.\nDue to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.",
                            "Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder."
                        ]
                    },
                    "Description_Merged": "Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.\nCertain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品向用户显示信息或标识符，但显示机制未使用户能够区分视觉上相似或相同的字形（同形异义字），这可能导致用户误解字形并执行意外的不安全操作。",
        "Name_ZH": "对用户呈现的同形异义字符缺乏足够的视觉区分",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "使用一个能够在URL和状态栏中显示Punycode的浏览器，或者在URL中使用不同脚本的情况下为各个脚本进行颜色编码。",
                            "由于同形异义攻击的突出问题，一些浏览器现在通过使用Punycode来防范此类攻击。例如，Mozilla Firefox和Google Chrome在顶级域不限制域名中可以使用的字符或者标签混合不同语言脚本时，将显示IDN为Punycode。"
                        ]
                    },
                    "Description_Merged": "使用一个能够在URL和状态栏中显示Punycode的浏览器，或者在URL中使用不同脚本的情况下为各个脚本进行颜色编码。\n由于同形异义攻击的突出问题，一些浏览器现在通过使用Punycode来防范此类攻击。例如，Mozilla Firefox和Google Chrome在顶级域不限制域名中可以使用的字符或者标签混合不同语言脚本时，将显示IDN为Punycode。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "使用一个有严格过滤器并阻止字符集混合的邮件客户端，以防止混合字符集的邮件出现在用户的收件箱中。",
                            "某些邮件客户端（如Google的GMail）防止在电子邮件地址或电子邮件中的链接中使用非拉丁字符。这有助于通过标记这些邮件并将其重定向到用户的垃圾邮件文件夹来防范同形异义攻击。"
                        ]
                    },
                    "Description_Merged": "使用一个有严格过滤器并阻止字符集混合的邮件客户端，以防止混合字符集的邮件出现在用户的收件箱中。\n某些邮件客户端（如Google的GMail）防止在电子邮件地址或电子邮件中的链接中使用非拉丁字符。这有助于通过标记这些邮件并将其重定向到用户的垃圾邮件文件夹来防范同形异义攻击。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1021",
        "Name": "Improper Restriction of Rendered UI Layers or Frames",
        "Description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.",
                            "The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains."
                        ]
                    },
                    "Description_Merged": "The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.\nThe concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "A developer can use a \"frame-breaker\" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.",
                            "It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The \"frame-breaking\" script does not intuitively account for multiple nested frames that can be presented to the user."
                        ]
                    },
                    "Description_Merged": "A developer can use a \"frame-breaker\" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.\nIt is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The \"frame-breaking\" script does not intuitively account for multiple nested frames that can be presented to the user.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the \"frame-ancestors\" directive or the \"frame-src\" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.",
                    "Description_Merged": "This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the \"frame-ancestors\" directive or the \"frame-src\" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该Web应用程序未限制或不正确限制属于另一个应用程序或域的框架对象或UI层，这可能导致用户对用户正在与哪个界面进行交互感到困惑。",
        "Name_ZH": "渲染UI层或框架的限制不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "使用X-Frame-Options允许Web内容开发人员限制其应用程序在覆盖、框架或iFrame形式下的使用。开发人员可以指示哪些域名可以嵌入内容。",
                            "X-Frame-Options的概念已有详细文档，但该保护机制的实施正在进行中以填补其中的漏洞。有必要允许来自多个域的框架。"
                        ]
                    },
                    "Description_Merged": "使用X-Frame-Options允许Web内容开发人员限制其应用程序在覆盖、框架或iFrame形式下的使用。开发人员可以指示哪些域名可以嵌入内容。\nX-Frame-Options的概念已有详细文档，但该保护机制的实施正在进行中以填补其中的漏洞。有必要允许来自多个域的框架。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "开发人员可以在每个不应被嵌入的页面中使用“frame-breaker”脚本。这对于不支持上述X-Frame-Options安全功能的旧版浏览器非常有帮助。",
                            "还需要注意的是，这种策略已被绕过或规避。通过嵌套框架，不正确使用框架可能会在Web应用程序中持续存在。这个“frame-breaking”脚本不能直观地处理用户可能面对的多个嵌套框架。"
                        ]
                    },
                    "Description_Merged": "开发人员可以在每个不应被嵌入的页面中使用“frame-breaker”脚本。这对于不支持上述X-Frame-Options安全功能的旧版浏览器非常有帮助。\n还需要注意的是，这种策略已被绕过或规避。通过嵌套框架，不正确使用框架可能会在Web应用程序中持续存在。这个“frame-breaking”脚本不能直观地处理用户可能面对的多个嵌套框架。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "这种防御深度技术可用于防止Web应用程序中对框架的不正确使用。它通过使用声明性策略来优先加载数据的有效来源。根据所使用的内容安全策略的实现方式，开发人员应使用“frame-ancestors”指令或“frame-src”指令来减轻此弱点。两个指令都允许在允许嵌入内容时设置限制。",
                    "Description_Merged": "这种防御深度技术可用于防止Web应用程序中对框架的不正确使用。它通过使用声明性策略来优先加载数据的有效来源。根据所使用的内容安全策略的实现方式，开发人员应使用“frame-ancestors”指令或“frame-src”指令来减轻此弱点。两个指令都允许在允许嵌入内容时设置限制。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1022",
        "Name": "Use of Web Link to Untrusted Target with window.opener Access",
        "Description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Specify in the design that any linked external document must not be granted access to the location object of the calling page.",
                    "Description_Merged": "Specify in the design that any linked external document must not be granted access to the location object of the calling page.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\".",
                            "If opening the external document in a new window via javascript, then reset the opener by setting it equal to null."
                        ]
                    },
                    "Description_Merged": "When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\".\nIf opening the external document in a new window via javascript, then reset the opener by setting it equal to null.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": "Do not use \"_blank\" targets. However, this can affect the usability of the application."
                    },
                    "Description_Merged": "Do not use \"_blank\" targets. However, this can affect the usability of the application.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该Web应用程序生成指向其控制范围之外的不受信任的外部站点的链接，但未正确防止外部站点修改window.opener对象的安全关键属性，如location属性。",
        "Name_ZH": "使用Web链接访问存在风险的目标并具有window.opener访问权限",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在设计中指定任何链接的外部文档不得访问调用页面的location对象。",
                    "Description_Merged": "在设计中指定任何链接的外部文档不得访问调用页面的location对象。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "在使用&lt;a&gt;标签创建指向外部文档的链接时，例如\"_blank\"或具有名称的框架，请为rel属性提供值\"noopener noreferrer\"。",
                            "如果通过JavaScript在新窗口中打开外部文档，则通过将opener设置为null来重置它。"
                        ]
                    },
                    "Description_Merged": "在使用&lt;a&gt;标签创建指向外部文档的链接时，例如\"_blank\"或具有名称的框架，请为rel属性提供值\"noopener noreferrer\"。\n如果通过JavaScript在新窗口中打开外部文档，则通过将opener设置为null来重置它。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": "不要使用\"_blank\"作为目标。但这可能会影响应用程序的可用性。"
                    },
                    "Description_Merged": "不要使用\"_blank\"作为目标。但这可能会影响应用程序的可用性。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1023",
        "Name": "Incomplete Comparison with Missing Factors",
        "Description": "The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Description_Merged": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品在比较实体时，必须考虑每个实体的多个因素或特征，但比较过程中没有包括其中一个或多个因素。",
        "Name_ZH": "不完全比较缺少要素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Description_Merged": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1024",
        "Name": "Comparison of Incompatible Types",
        "Description": "The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Description_Merged": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "产品在比较两个实体时，这些实体是不同且不兼容的类型，不能保证在直接比较时提供正确结果。",
        "Name_ZH": "比较不兼容类型",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Description_Merged": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1025",
        "Name": "Comparison Using Wrong Factors",
        "Description": "The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Description_Merged": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "代码在比较两个实体时，检查的是实体的错误因素或特征，这可能导致不正确的结果和相关的弱点。",
        "Name_ZH": "使用错误要素进行比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Description_Merged": "在部署代码到生产环境之前，请对比较方案进行全面测试。进行正向测试和负向测试。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1037",
        "Name": "Processor Optimization Removal or Modification of Security-critical Code",
        "Description": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "开发人员将安全关键的保护机制构建到软件中，但处理器对程序的执行进行了优化，从而移除或修改了该机制。",
        "Name_ZH": "处理器优化移除或修改安全关键代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1038",
        "Name": "Insecure Automated Optimizations",
        "Description": "The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",
        "Likelihood_Of_Exploit": "Low",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了自动优化代码的机制，例如为了改善性能等特性，但优化可能会产生意外的副作用，可能违反了预期的安全假设。",
        "Name_ZH": "不安全的自动优化",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1039",
        "Name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations",
        "Description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用机器学习等自动化机制来识别复杂的数据输入（例如图像或音频）作为特定概念或类别，但它无法正确检测或处理已经被修改或构造成导致机制检测到不同、不正确概念的输入。",
        "Name_ZH": "自动识别机制不能足够检测或处理对抗性输入扰动",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1041",
        "Name": "Use of Redundant Code",
        "Description": "The product has multiple functions, methods, procedures, macros, etc. that contain the same code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Merge common functionality into a single function and then call that function from across the entire code base.",
                    "Description_Merged": "Merge common functionality into a single function and then call that function from across the entire code base.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品具有包含相同代码的多个函数、方法、过程、宏等。",
        "Name_ZH": "使用冗余代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将常见功能合并到一个单独的函数中，然后从整个代码库中调用该函数。",
                    "Description_Merged": "将常见功能合并到一个单独的函数中，然后从整个代码库中调用该函数。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1042",
        "Name": "Static Member Data Element outside of a Singleton Class Element",
        "Description": "The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含一个成员元素，声明为静态（但不是final），其中其父类元素不是单例类 - 即在Create操作的'to'关联中只能使用一次的类元素。",
        "Name_ZH": "静态成员数据元素在单例类元素之外",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1043",
        "Name": "Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",
        "Description": "The product uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了一个数据元素，它具有过多的非原始数据类型子元素，例如结构或聚合对象。",
        "Name_ZH": "数据元素聚合过多的非原始元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1044",
        "Name": "Architecture with Number of Horizontal Layers Outside of Expected Range",
        "Description": "The product's architecture contains too many - or too few - horizontal layers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的架构包含了过多或过少的水平层。",
        "Name_ZH": "具有超出预期范围的水平层数的架构",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1045",
        "Name": "Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",
        "Description": "A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个父类有一个虚析构方法，但是父类的一个子类没有虚析构。",
        "Name_ZH": "父类具有虚析构函数而子类没有虚析构函数",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1046",
        "Name": "Creation of Immutable Text Using String Concatenation",
        "Description": "The product creates an immutable text string using string concatenation operations.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用字符串连接操作创建一个不可变的文本字符串。",
        "Name_ZH": "使用字符串拼接创建不可变文本",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1047",
        "Name": "Modules with Circular Dependencies",
        "Description": "The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含多个模块，其中一个模块存在循环引用，即存在循环依赖。",
        "Name_ZH": "存在循环依赖的模块",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1048",
        "Name": "Invokable Control Element with Large Number of Outward Calls",
        "Description": "The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含可调用控制元素，其中包含对超出可调用上下文范围的其他应用程序对象的引用过多的情况，即扇出值过大。",
        "Name_ZH": "具有大量外部调用的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1049",
        "Name": "Excessive Data Query Operations in a Large Data Table",
        "Description": "The product performs a data query with a large number of joins and sub-queries on a large data table.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品对大型数据表执行具有大量连接和子查询的数据查询。",
        "Name_ZH": "大型数据表中过多的数据查询操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1050",
        "Name": "Excessive Platform Resource Consumption within a Loop",
        "Description": "The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品的循环体或循环条件包含直接或间接消耗平台资源的控制元素，例如消息传递、会话、锁或文件描述符。",
        "Name_ZH": "循环中对平台资源的过度消耗",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1051",
        "Name": "Initialization with Hard-Coded Network Resource Configuration Data",
        "Description": "The product initializes data using hard-coded values that act as network resource identifiers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用硬编码值初始化数据，这些值充当网络资源标识符。",
        "Name_ZH": "使用硬编码网络资源配置数据进行初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1052",
        "Name": "Excessive Use of Hard-Coded Literals in Initialization",
        "Description": "The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用硬编码的字面值初始化数据元素，该字面值不是简单的整数或静态常量元素。",
        "Name_ZH": "初始化中过多使用硬编码文字",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1053",
        "Name": "Missing Documentation for Design",
        "Description": "The product does not have documentation that represents how it is designed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品没有代表其设计的文档。",
        "Name_ZH": "缺少设计文档",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1054",
        "Name": "Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",
        "Description": "The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "在一个架构层次上的代码调用了位于比相邻层次更深层次的代码，即调用跳过了至少一层，并且被调用的代码不是可从任何水平层引用的垂直实用层的一部分。",
        "Name_ZH": "在不必要的深层水平上调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1055",
        "Name": "Multiple Inheritance from Concrete Classes",
        "Description": "The product contains a class with inheritance from more than one concrete class.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个从多个具体类继承的类。",
        "Name_ZH": "从具体类中多重继承",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1056",
        "Name": "Invokable Control Element with Variadic Parameters",
        "Description": "A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个有名的可调用或方法控制元素具有支持可变数量的参数或参数的签名。",
        "Name_ZH": "具有可变参数的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1057",
        "Name": "Data Access Operations Outside of Expected Data Manager Component",
        "Description": "The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用一个专用的、中央的数据管理器组件，符合设计需求，但其中包含执行数据访问操作的代码，该操作并未使用该数据管理器。",
        "Name_ZH": "在预期的数据管理器组件之外进行数据访问操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1058",
        "Name": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
        "Description": "The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含一个在多线程环境中运行但拥有不安全的非最终静态可存储或成员数据元素的函数或方法。",
        "Name_ZH": "在多线程上下文中具有非最终静态可存储或成员元素的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1059",
        "Name": "Insufficient Technical Documentation",
        "Description": "The product does not contain sufficient technical or engineering documentation (whether on paper or in electronic form) that contains descriptions of all the relevant software/hardware elements of the product, such as its usage, structure, architectural components, interfaces, design, implementation, configuration, operation, etc.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Documentation",
                        "Architecture and Design"
                    ],
                    "Description": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
                    "Description_Merged": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
                    "Phase_Merged": "Documentation / Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品没有足够的技术或工程文档（无论是纸质还是电子形式），其中包含产品的所有相关软件/硬件元素的描述，例如使用方法、结构、架构组件、接口、设计、实现、配置、操作等。",
        "Name_ZH": "技术文档不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "文档",
                        "架构与设计"
                    ],
                    "Description": "确保设计文档足够详细，以便进行制造后的验证。",
                    "Description_Merged": "确保设计文档足够详细，以便进行制造后的验证。",
                    "Phase_Merged": "文档 / 架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1060",
        "Name": "Excessive Number of Inefficient Server-Side Data Accesses",
        "Description": "The product performs too many data queries without using efficient data processing functionality such as stored procedures.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品执行过多的数据查询，但没有使用存储过程等高效的数据处理功能。",
        "Name_ZH": "服务器端过多低效的数据访问操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1061",
        "Name": "Insufficient Encapsulation",
        "Description": "The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码没有充分隐藏数据或方法的内部表示和实现细节，这可能允许外部组件或模块意外修改数据、调用意外功能或引入程序员不打算引入的依赖。",
        "Name_ZH": "封装不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1062",
        "Name": "Parent Class with References to Child Class",
        "Description": "The code has a parent class that contains references to a child class, its methods, or its members.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码中存在一个包含对子类、其方法或成员的引用的父类。",
        "Name_ZH": "父类引用子类",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1063",
        "Name": "Creation of Class Instance within a Static Code Block",
        "Description": "A static code block creates an instance of a class.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个静态代码块创建了一个类的实例。",
        "Name_ZH": "在静态代码块中创建类实例",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1064",
        "Name": "Invokable Control Element with Signature Containing an Excessive Number of Parameters",
        "Description": "The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个函数、子程序或方法，其签名具有不必要多的参数/参数。",
        "Name_ZH": "具有包含过多参数的签名的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1065",
        "Name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers",
        "Description": "The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用了应用服务器的部署组件，但是它也使用了低级功能/方法来管理资源，而不是使用应用服务器提供的API。",
        "Name_ZH": "在应用程序服务器上构建的组件中的运行时资源管理控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1066",
        "Name": "Missing Serialization Control Element",
        "Description": "The product contains a serializable data element that does not have an associated serialization method.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个可序列化的数据元素，但是它没有关联的序列化方法。",
        "Name_ZH": "缺失的序列化控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1067",
        "Name": "Excessive Execution of Sequential Searches of Data Resource",
        "Description": "The product contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品对配置了不使用索引的SQL表或视图进行了数据查询，可能导致顺序搜索。",
        "Name_ZH": "过度执行顺序搜索数据资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1068",
        "Name": "Inconsistency Between Implementation and Documented Design",
        "Description": "The implementation of the product is not consistent with the design as described within the relevant documentation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的实现与相关文档中描述的设计不一致。",
        "Name_ZH": "实现与文档化设计不一致",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1069",
        "Name": "Empty Exception Block",
        "Description": "An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "For every exception block add code that handles the specific exception in the way intended by the application.",
                    "Description_Merged": "For every exception block add code that handles the specific exception in the way intended by the application.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "可调用的代码块包含了一个异常处理块，但是该块没有任何代码，即为空。",
        "Name_ZH": "空的异常块",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "对于每个异常块，添加处理特定异常的代码，以符合应用程序的意图。",
                    "Description_Merged": "对于每个异常块，添加处理特定异常的代码，以符合应用程序的意图。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1070",
        "Name": "Serializable Data Element Containing non-Serializable Item Elements",
        "Description": "The product contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个可序列化的可存储数据元素，例如字段或成员，但是该数据元素包含了不可序列化的成员元素。",
        "Name_ZH": "包含非可序列化项元素的可序列化数据元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1071",
        "Name": "Empty Code Block",
        "Description": "The source code contains a block that does not contain any code, i.e., the block is empty.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码包含一个没有任何代码的代码块，即该块为空。",
        "Name_ZH": "空的代码块",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1072",
        "Name": "Data Resource Access without Use of Connection Pooling",
        "Description": "The product accesses a data resource through a database without using a connection pooling capability.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品通过数据库访问数据资源，但没有使用连接池功能。",
        "Name_ZH": "在没有使用连接池的情况下访问数据资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1073",
        "Name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
        "Description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品包含一个客户端，其中的函数或方法包含大量的数据访问/查询，这些查询通过数据管理器发送，即没有使用高效的数据库功能。",
        "Name_ZH": "非SQL可调用控制元素，有过多的数据资源访问",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1074",
        "Name": "Class with Excessively Deep Inheritance",
        "Description": "A class has an inheritance level that is too high, i.e., it has a large number of parent classes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个类的继承层级过高，即它有大量的父类。",
        "Name_ZH": "具有过深继承的类",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1075",
        "Name": "Unconditional Control Flow Transfer outside of Switch Block",
        "Description": "The product performs unconditional control transfer (such as a \"goto\") in code outside of a branching structure such as a switch block.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品在代码中执行了无条件的控制转移（例如\"goto\"），但不在分支结构（例如switch块）之内。",
        "Name_ZH": "无条件控制流传输到Switch块外部",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1076",
        "Name": "Insufficient Adherence to Expected Conventions",
        "Description": "The product's architecture, source code, design, documentation, or other artifact does not follow required conventions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品的架构、源代码、设计、文档或其他文物没有遵循所需的规范。",
        "Name_ZH": "没有充分遵守预期惯例",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1077",
        "Name": "Floating Point Comparison with Incorrect Operator",
        "Description": "The code performs a comparison such as an equality test between two float (floating point) values, but it uses comparison operators that do not account for the possibility of loss of precision.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该代码执行了两个浮点（浮点数）值之间的比较，但使用的比较运算符没有考虑到精度损失的可能性。",
        "Name_ZH": "使用了错误运算符进行浮点数比较",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1078",
        "Name": "Inappropriate Source Code Style or Formatting",
        "Description": "The source code does not follow desired style or formatting for indentation, white space, comments, etc.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码没有按照所需的缩进、空白、注释等格式进行排版。",
        "Name_ZH": "不适当的源代码风格或格式",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1079",
        "Name": "Parent Class without Virtual Destructor Method",
        "Description": "A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个父类包含一个或多个子类，但父类没有虚拟析构函数。",
        "Name_ZH": "没有虚拟析构方法的父类",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1080",
        "Name": "Source Code File with Excessive Number of Lines of Code",
        "Description": "A source code file has too many lines of code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个源代码文件有太多行代码。",
        "Name_ZH": "具有过多代码行数的源代码文件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1082",
        "Name": "Class Instance Self Destruction Control Element",
        "Description": "The code contains a class instance that calls the method or function to delete or destroy itself.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含一个调用自身删除或销毁方法或函数的类实例。",
        "Name_ZH": "类实例自毁控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1083",
        "Name": "Data Access from Outside Expected Data Manager Component",
        "Description": "The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品旨在通过特定的数据管理器组件（如关系型或非SQL数据库）管理数据访问，但包含了在不使用该组件的情况下执行数据访问操作的代码。",
        "Name_ZH": "从预期的数据管理器组件外部访问数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1084",
        "Name": "Invokable Control Element with Excessive File or Data Access Operations",
        "Description": "A function or method contains too many operations that utilize a data manager or file resource.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个函数或方法包含过多使用数据管理器或文件资源的操作。",
        "Name_ZH": "具有过多文件或数据访问操作的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1085",
        "Name": "Invokable Control Element with Excessive Volume of Commented-out Code",
        "Description": "A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个函数、方法、过程等在其体内包含了过多的被注释掉的代码。",
        "Name_ZH": "具有大量注释代码的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1086",
        "Name": "Class with Excessive Number of Child Classes",
        "Description": "A class contains an unnecessarily large number of children.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个类包含了过多的子类。",
        "Name_ZH": "具有过多子类的类",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1087",
        "Name": "Class with Virtual Method without a Virtual Destructor",
        "Description": "A class contains a virtual method, but the method does not have an associated virtual destructor.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个类包含了一个虚函数，但是该函数没有关联的虚析构函数。",
        "Name_ZH": "没有虚拟析构函数的虚拟方法的类",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1088",
        "Name": "Synchronous Access of Remote Resource without Timeout",
        "Description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码对一个远程资源进行同步调用，但是该调用没有设置超时时间，或者超时时间被设置为无限。",
        "Name_ZH": "同步访问远程资源而没有超时",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1089",
        "Name": "Large Data Table with Excessive Number of Indices",
        "Description": "The product uses a large data table that contains an excessively large number of indices.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了一个包含过多索引的大型数据表。",
        "Name_ZH": "具有过多索引的大型数据表",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1090",
        "Name": "Method Containing Access of a Member Element from Another Class",
        "Description": "A method for a class performs an operation that directly accesses a member element from another class.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "一个类的方法执行了一个直接访问另一个类成员元素的操作。",
        "Name_ZH": "在循环中访问另一个类的成员元素的方法",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1091",
        "Name": "Use of Object without Invoking Destructor Method",
        "Description": "The product contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品包含了一个访问对象的方法，但是没有调用该元素的关联finalize/destructor方法。",
        "Name_ZH": "在不调用析构方法的情况下使用对象",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1092",
        "Name": "Use of Same Invokable Control Element in Multiple Architectural Layers",
        "Description": "The product uses the same control element across multiple architectural layers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品在多个架构层上使用了相同的控制元素。",
        "Name_ZH": "在多个架构层中使用相同的可调用控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1093",
        "Name": "Excessively Complex Data Representation",
        "Description": "The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品对其数据结构或结构之间的内部关系使用了过于复杂的内部表示。",
        "Name_ZH": "过度复杂的数据表示",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1094",
        "Name": "Excessive Index Range Scan for a Data Resource",
        "Description": "The product contains an index range scan for a large data table, but the scan can cover a large number of rows.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品对一个大型数据表进行索引范围扫描，但是扫描可能覆盖了大量的行。",
        "Name_ZH": "对数据资源进行过度索引范围扫描",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1095",
        "Name": "Loop Condition Value Update within the Loop",
        "Description": "The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了一个循环，并且循环的控制流条件是基于在循环体内更新的一个值。",
        "Name_ZH": "循环内更新循环条件值",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1096",
        "Name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
        "Description": "The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品实现了单例设计模式，但没有使用适当的锁定或其他同步机制来确保只实例化一次单例类。",
        "Name_ZH": "创建单例类实例时没有正确锁定或同步",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1097",
        "Name": "Persistent Storable Data Element without Associated Comparison Control Element",
        "Description": "The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了一个可存储的数据元素，但没有所有必要的相关函数或方法来支持比较。",
        "Name_ZH": "没有关联比较控制元素的持久可存储数据元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1098",
        "Name": "Data Element containing Pointer Item without Proper Copy Control Element",
        "Description": "The code contains a data element with a pointer that does not have an associated copy or constructor method.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码中包含一个具有指针的数据元素，但没有相关的拷贝或构造方法。",
        "Name_ZH": "包含指针项的数据元素没有适当的复制控制元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1099",
        "Name": "Inconsistent Naming Conventions for Identifiers",
        "Description": "The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的代码、文档或其他产物在变量、可调用对象、相关的可调用对象组、I/O功能、数据类型、文件名或类似元素的命名约定上不一致。",
        "Name_ZH": "标识符的命名约定不一致",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1100",
        "Name": "Insufficient Isolation of System-Dependent Functions",
        "Description": "The product or code does not isolate system-dependent functionality into separate standalone modules.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品或代码没有将系统相关功能隔离到独立的模块中。",
        "Name_ZH": "系统相关功能的隔离不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1101",
        "Name": "Reliance on Runtime Component in Generated Code",
        "Description": "The product uses automatically-generated code that cannot be executed without a specific runtime support component.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了无法在没有特定运行支持组件的情况下执行的自动生成的代码。",
        "Name_ZH": "依赖于生成代码中的运行时组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1102",
        "Name": "Reliance on Machine-Dependent Data Representation",
        "Description": "The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码使用了依赖于底层数据表示或可能在不同处理器、物理机器、操作系统或其他物理组件之间变化的低级数据表示或构造。",
        "Name_ZH": "依赖于机器相关的数据表示",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1103",
        "Name": "Use of Platform-Dependent Third Party Components",
        "Description": "The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品依赖于第三方组件，在所有理想平台上都无法提供等效功能。",
        "Name_ZH": "使用平台相关的第三方组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1104",
        "Name": "Use of Unmaintained Third Party Components",
        "Description": "The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品依赖于不受原始开发者或可信代理的原始开发者持续支持或维护的第三方组件。",
        "Name_ZH": "使用不维护的第三方组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1105",
        "Name": "Insufficient Encapsulation of Machine-Dependent Functionality",
        "Description": "The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品或代码使用了机器相关功能，但没有充分封装或隔离这些功能与其他代码。",
        "Name_ZH": "机器相关功能的封装不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1106",
        "Name": "Insufficient Use of Symbolic Constants",
        "Description": "The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码使用了可能需要随时间变化或演化的字面常量，而不是使用符号常量。",
        "Name_ZH": "使用符号常量不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1107",
        "Name": "Insufficient Isolation of Symbolic Constant Definitions",
        "Description": "The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码使用了符号常量，但是没有将这些常量的定义充分地放置在更集中或隔离的位置。",
        "Name_ZH": "符号常量定义隔离不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1108",
        "Name": "Excessive Reliance on Global Variables",
        "Description": "The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码的结构过于依赖在代码的各个点上使用或设置全局变量，而不是在更窄、更局部的上下文中保留相关信息。",
        "Name_ZH": "过度依赖全局变量",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1109",
        "Name": "Use of Same Variable for Multiple Purposes",
        "Description": "The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含了一个可调用的、块状的或其他代码元素，其中同一个变量被用于控制多个不同的任务或存储多个数据实例。",
        "Name_ZH": "同一变量用于多个目的",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1110",
        "Name": "Incomplete Design Documentation",
        "Description": "The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的设计文档没有充分描述控制流、数据流、系统初始化、任务之间的关系、组件、原理或其他重要设计方面。",
        "Name_ZH": "设计文档不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1111",
        "Name": "Incomplete I/O Documentation",
        "Description": "The product's documentation does not adequately define inputs, outputs, or system/software interfaces.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的文档没有充分定义输入、输出或系统/软件接口。",
        "Name_ZH": "I/O文档不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1112",
        "Name": "Incomplete Documentation of Program Execution",
        "Description": "The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "文档没有完整定义所有用于控制或影响产品特定程序执行的机制。",
        "Name_ZH": "程序执行文档不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1113",
        "Name": "Inappropriate Comment Style",
        "Description": "The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码使用了不一致或不符合产品预期标准的注释样式或格式。",
        "Name_ZH": "不适当的注释风格",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1114",
        "Name": "Inappropriate Whitespace Style",
        "Description": "The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码包含的空白在整个代码中不一致，或者不符合产品的预期标准。",
        "Name_ZH": "不适当的空白风格",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1115",
        "Name": "Source Code Element without Standard Prologue",
        "Description": "The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码包含了诸如源文件等元素，这些元素没有一致地提供为该项目标准化的序言或头部。",
        "Name_ZH": "源代码元素缺乏标准序言",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1116",
        "Name": "Inaccurate Comments",
        "Description": "The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Verify that each comment accurately reflects what is intended to happen during execution of the code.",
                    "Description_Merged": "Verify that each comment accurately reflects what is intended to happen during execution of the code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "源代码中的注释未能准确描述或解释与注释相关联的代码部分的方面。",
        "Name_ZH": "注释不准确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "验证每个注释是否准确反映了代码执行期间的预期行为。",
                    "Description_Merged": "验证每个注释是否准确反映了代码执行期间的预期行为。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1117",
        "Name": "Callable with Insufficient Behavioral Summary",
        "Description": "The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码中包含一个函数或方法，其签名和/或相关联的内联文档未能足够描述可调用对象的输入、输出、副作用、假设或返回代码。",
        "Name_ZH": "调用行为摘要不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1118",
        "Name": "Insufficient Documentation of Error Handling Techniques",
        "Description": "The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "文档未能足够描述用于错误处理、异常处理或类似机制的技术。",
        "Name_ZH": "错误处理技术文档不完整",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1119",
        "Name": "Excessive Use of Unconditional Branching",
        "Description": "The code uses too many unconditional branches (such as \"goto\").",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码使用了太多无条件的分支语句（如“goto”）。",
        "Name_ZH": "过度使用无条件分支",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1120",
        "Name": "Excessive Code Complexity",
        "Description": "The code is too complex, as calculated using a well-defined, quantitative measure.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码过于复杂，根据一个明确定义的、定量的度量来计算。",
        "Name_ZH": "代码复杂度过高",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1121",
        "Name": "Excessive McCabe Cyclomatic Complexity",
        "Description": "The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含的McCabe圈复杂度超过了一个理想的最大值。",
        "Name_ZH": "McCabe圈复杂度过高",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1122",
        "Name": "Excessive Halstead Complexity",
        "Description": "The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码的结构使得Halstead复杂度度量超过了一个理想的最大值。",
        "Name_ZH": "Halstead复杂度过高",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1123",
        "Name": "Excessive Use of Self-Modifying Code",
        "Description": "The product uses too much self-modifying code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了过多的自修改代码。",
        "Name_ZH": "过度使用自修改代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1124",
        "Name": "Excessively Deep Nesting",
        "Description": "The code contains a callable or other code grouping in which the nesting / branching is too deep.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码包含了一个可调用对象或其他代码组合，其中嵌套/分支过深。",
        "Name_ZH": "嵌套过深",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1125",
        "Name": "Excessive Attack Surface",
        "Description": "The product has an attack surface whose quantitative measurement exceeds a desirable maximum.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品的攻击面积超过了一个理想的最大值的量化测量。",
        "Name_ZH": "攻击面过大",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1126",
        "Name": "Declaration of Variable with Unnecessarily Wide Scope",
        "Description": "The source code declares a variable in one scope, but the variable is only used within a narrower scope.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "源代码在一个范围内声明了一个变量，但该变量只在一个更窄的范围内使用。",
        "Name_ZH": "变量声明范围过宽",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1127",
        "Name": "Compilation with Insufficient Warnings or Errors",
        "Description": "The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "代码在编译时未启用足够的警告，这可能导致无法检测到细微的错误或质量问题。",
        "Name_ZH": "编译时警告或错误不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1164",
        "Name": "Irrelevant Code",
        "Description": "The product contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品包含的代码对执行来说并非必需，即不会产生状态变化，也不会对数据或控制流产生副作用，因此删除该代码对功能或正确性不会产生影响。",
        "Name_ZH": "无关的代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1173",
        "Name": "Improper Use of Validation Framework",
        "Description": "The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Properly use provided input validation frameworks.",
                    "Description_Merged": "Properly use provided input validation frameworks.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未使用或错误使用了源语言或独立库提供的输入验证框架。",
        "Name_ZH": "错误使用验证框架",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "正确使用提供的输入验证框架。",
                    "Description_Merged": "正确使用提供的输入验证框架。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1174",
        "Name": "ASP.NET Misconfiguration: Improper Model Validation",
        "Description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "ASP.NET 应用程序未使用或错误使用模型验证框架。",
        "Name_ZH": "ASP.NET配置错误：不正确的模型验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1176",
        "Name": "Inefficient CPU Computation",
        "Description": "The product performs CPU computations using algorithms that are not as efficient as they could be for the needs of the developer, i.e., the computations can be optimized further.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用的 CPU 计算算法不够高效，无法满足开发者的需求，即这些计算可以进一步进行优化。",
        "Name_ZH": "CPU计算效率低下",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1177",
        "Name": "Use of Prohibited Code",
        "Description": "The product uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品使用了被开发者或客户明确禁止的函数、库或第三方组件。",
        "Name_ZH": "使用禁止的代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1187",
        "Name": "DEPRECATED: Use of Uninitialized Resource",
        "Description": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它是 CWE-908 的重复内容。所有内容已被转移到 CWE-908。",
        "Name_ZH": "已弃用：使用未初始化的资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1188",
        "Name": "Insecure Default Initialization of Resource",
        "Description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "产品初始化或使用管理员可更改但不安全的默认资源。",
        "Name_ZH": "资源不安全的默认初始化",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1189",
        "Name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
        "Description": "The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": [
                            "When sharing resources, avoid mixing agents of varying trust levels.",
                            "Untrusted agents should not share resources with trusted agents."
                        ]
                    },
                    "Description_Merged": "When sharing resources, avoid mixing agents of varying trust levels.\nUntrusted agents should not share resources with trusted agents.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "SoC（System-On-a-Chip）未能正确隔离受信任和不受信任的代理之间的共享资源。",
        "Name_ZH": "系统级芯片(SoC)上共享资源隔离不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": [
                            "在共享资源时，避免混合不同信任级别的代理。",
                            "不信任的代理不应与受信任的代理共享资源。"
                        ]
                    },
                    "Description_Merged": "在共享资源时，避免混合不同信任级别的代理。\n不信任的代理不应与受信任的代理共享资源。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "1190",
        "Name": "DMA Device Enabled Too Early in Boot Phase",
        "Description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Utilize an IOMMU to orchestrate IO access from the start of the boot process.",
                    "Description_Merged": "Utilize an IOMMU to orchestrate IO access from the start of the boot process.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在建立安全配置设置之前启用了一个直接内存访问（DMA）能力设备，这使得攻击者可以从产品中提取数据或获取特权。",
        "Name_ZH": "引导阶段过早启用DMA设备",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在启动过程开始时，利用IOMMU来协调IO访问。",
                    "Description_Merged": "在启动过程开始时，利用IOMMU来协调IO访问。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1191",
        "Name": "On-Chip Debug and Test Interface With Improper Access Control",
        "Description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.",
                    "Effectiveness": "High",
                    "Description_Merged": "If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "芯片没有实施或没有正确执行访问控制，以检查用户是否被授权通过物理调试/测试接口访问内部寄存器和测试模式。",
        "Name_ZH": "带有不正确访问控制的芯片内调试和测试接口",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "如果可行，制造商应禁用JTAG接口或为JTAG接口实施身份验证和授权。如果添加身份验证逻辑，应该抵御定时攻击。存储在寄存器中的安全敏感数据（如密钥等）在进入调试模式时应该被清除。",
                    "Effectiveness": "High",
                    "Description_Merged": "如果可行，制造商应禁用JTAG接口或为JTAG接口实施身份验证和授权。如果添加身份验证逻辑，应该抵御定时攻击。存储在寄存器中的安全敏感数据（如密钥等）在进入调试模式时应该被清除。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "1192",
        "Name": "System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers",
        "Description": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": {
                        "p": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization."
                    },
                    "Description_Merged": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "系统级芯片（SoC）的每个组件都没有唯一的、不可变的标识符。",
        "Name_ZH": "使用没有唯一、不可变标识符的芯片系统(SoC)组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": {
                        "p": "在SoC中生成的每个标识都应该是唯一的且在硬件上不可改变的。对IP是否受信任的操作应该明确定义、实施、配置和测试。如果定义是通过策略实现的，则该策略应该是不可变的或受到明确的身份验证和授权保护。"
                    },
                    "Description_Merged": "在SoC中生成的每个标识都应该是唯一的且在硬件上不可改变的。对IP是否受信任的操作应该明确定义、实施、配置和测试。如果定义是通过策略实现的，则该策略应该是不可变的或受到明确的身份验证和授权保护。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "1193",
        "Name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
        "Description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware."
                    },
                    "Description_Merged": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品在启用内存和总线访问控制之前启用了包含不受信任固件的组件。",
        "Name_ZH": "在启用芯片访问控制之前启动不可信的执行核心",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "引导序列应在启用第三方硬件IP和使用不受信任固件的外设微控制器之前启用布线访问控制和内存保护。"
                    },
                    "Description_Merged": "引导序列应在启用第三方硬件IP和使用不受信任固件的外设微控制器之前启用布线访问控制和内存保护。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1204",
        "Name": "Generation of Weak Initialization Vector (IV)",
        "Description": "The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against.",
                            "NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178]."
                        ]
                    },
                    "Description_Merged": "Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against.\nNIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一种使用初始化向量（IV）的密码学基元，但产品没有生成足够不可预测或唯一的IV，违反了该基元的预期密码学要求。",
        "Name_ZH": "生成弱初始化向量(IV)",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "不同的密码模式对其初始向量（IV）有不同的要求。在选择和实现模式时，了解这些要求对于保持安全性保证至关重要。通常，生成一个随机的IV是最安全的，因为它既不可预测，又具有非常低的非唯一性几率。IVs不需要保密，所以如果生成重复IVs是一个问题，可以保留一个已使用IVs的列表，并进行检查。",
                            "NIST针对其认可的模式提供了关于IV生成的建议。这些建议包括当随机IVs不可行时的选项。对于CBC、CFB和OFB模式，请参考[REF-1175]；对于GCM模式，请参考[REF-1178]。"
                        ]
                    },
                    "Description_Merged": "不同的密码模式对其初始向量（IV）有不同的要求。在选择和实现模式时，了解这些要求对于保持安全性保证至关重要。通常，生成一个随机的IV是最安全的，因为它既不可预测，又具有非常低的非唯一性几率。IVs不需要保密，所以如果生成重复IVs是一个问题，可以保留一个已使用IVs的列表，并进行检查。\nNIST针对其认可的模式提供了关于IV生成的建议。这些建议包括当随机IVs不可行时的选项。对于CBC、CFB和OFB模式，请参考[REF-1175]；对于GCM模式，请参考[REF-1178]。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1209",
        "Name": "Failure to Disable Reserved Bits",
        "Description": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "Include a feature to disable reserved bits."
                    },
                    "Description_Merged": "Include a feature to disable reserved bits.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Integration",
                    "Description": {
                        "p": "Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted."
                    },
                    "Description_Merged": "Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "在硬件设计中，保留位在生产之前没有被禁用。通常，保留位用于将来的功能，并且不应在设计中支持任何功能逻辑。然而，设计人员可能会秘密地使用这些位来调试或在生产硬件中进一步开发新的功能。具有对这些位的访问权限的对手将尝试对其进行写入，以破坏硬件状态。",
        "Name_ZH": "未禁用保留位",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "包括一个禁用保留位的功能。"
                    },
                    "Description_Merged": "包括一个禁用保留位的功能。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "集成",
                    "Description": {
                        "p": "任何对这些保留位的写入都将被阻止（例如，被忽略、受到访问保护等），或者可以引发异常。"
                    },
                    "Description_Merged": "任何对这些保留位的写入都将被阻止（例如，被忽略、受到访问保护等），或者可以引发异常。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1220",
        "Name": "Insufficient Granularity of Access Control",
        "Description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses.",
                                "Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing."
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses.\nAccess-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "该产品通过策略或其他功能实施访问控制，以禁用或限制对系统中资产的访问（读取和/或写入）以防止来自不受信任代理的访问。然而，实施的访问控制缺乏必要的细粒度，导致控制策略过于宽泛，允许未经授权的代理访问安全敏感的资产。",
        "Name_ZH": "访问控制粒度不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "必须审查访问控制策略的设计不一致性和常见弱点。",
                                "必须在芯片前测试和芯片后测试中测试访问控制策略的定义和编程流程。"
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "必须审查访问控制策略的设计不一致性和常见弱点。\n必须在芯片前测试和芯片后测试中测试访问控制策略的定义和编程流程。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1221",
        "Name": "Incorrect Register Defaults or Module Parameters",
        "Description": "Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.",
                    "Description_Merged": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "The default values of these security sensitive settings need to be defined as part of the design review phase.",
                    "Description_Merged": "The default values of these security sensitive settings need to be defined as part of the design review phase.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Testing phase should use automated tools to test that values are configured per design specifications.",
                    "Description_Merged": "Testing phase should use automated tools to test that values are configured per design specifications.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "硬件描述语言代码错误地将寄存器默认值或硬件IP参数定义为不安全的值。",
        "Name_ZH": "寄存器默认值或模块参数不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在硬件设计过程中，必须审查所有系统参数和寄存器默认值，以识别安全敏感设置。",
                    "Description_Merged": "在硬件设计过程中，必须审查所有系统参数和寄存器默认值，以识别安全敏感设置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "这些安全敏感设置的默认值需要在设计审查阶段确定。",
                    "Description_Merged": "这些安全敏感设置的默认值需要在设计审查阶段确定。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "测试阶段应使用自动化工具测试值是否符合设计规范。",
                    "Description_Merged": "测试阶段应使用自动化工具测试值是否符合设计规范。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1222",
        "Name": "Insufficient Granularity of Address Regions Protected by Register Locks",
        "Description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": [
                            "The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks.",
                            "As an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models."
                        ]
                    },
                    "Description_Merged": "The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks.\nAs an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品定义了一个大的地址区域，由相同的寄存器锁控制位保护免受修改。这导致了一个冲突，即在引导过程中必须设置系统配置锁定位的安全要求与某些地址在操作过程中需要由软件可写的功能要求之间的冲突。",
        "Name_ZH": "寄存器锁保护的地址区域粒度不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": [
                            "在设计阶段，应与软件团队一起审查或测试受保护的锁定寄存器，以确保软件流程不会受到安全锁定的阻碍。",
                            "作为一种替代方案，硬件设计可以使用可编程安全访问控制配置，以便设备可信固件根据软件使用和安全模型配置和更改受保护的区域，而不是使用寄存器锁定控制位和固定的访问控制区域。"
                        ]
                    },
                    "Description_Merged": "在设计阶段，应与软件团队一起审查或测试受保护的锁定寄存器，以确保软件流程不会受到安全锁定的阻碍。\n作为一种替代方案，硬件设计可以使用可编程安全访问控制配置，以便设备可信固件根据软件使用和安全模型配置和更改受保护的区域，而不是使用寄存器锁定控制位和固定的访问控制区域。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1223",
        "Name": "Race Condition for Write-Once Attributes",
        "Description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
                    "Description_Merged": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
                    "Description_Merged": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "在硬件设计中，一个只写寄存器由一个不受信任的软件组件在可信软件组件之前进行了编程，导致了一个竞态条件问题。",
        "Name_ZH": "写入一次属性的竞态条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在硬件设计过程中，必须评估所有只写一次或粘性字段的正确配置。",
                    "Description_Merged": "在硬件设计过程中，必须评估所有只写一次或粘性字段的正确配置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "测试阶段应使用自动化工具测试值是否不可重编程，并且只写一次字段在写入零时是否锁定。",
                    "Description_Merged": "测试阶段应使用自动化工具测试值是否不可重编程，并且只写一次字段在写入零时是否锁定。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1224",
        "Name": "Improper Restriction of Write-Once Bit Fields",
        "Description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
                    "Description_Merged": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
                    "Description_Merged": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "硬件设计控制寄存器的\"粘性位\"或一次写入位字段的实现存在问题，使得软件可以重新编程。",
        "Name_ZH": "不正确限制只写位字段",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在硬件设计过程中，必须评估所有只写一次或粘性字段的正确配置。",
                    "Description_Merged": "在硬件设计过程中，必须评估所有只写一次或粘性字段的正确配置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "测试阶段应使用自动化工具测试值是否不可重编程，并且只写一次字段在写入零时是否锁定。",
                    "Description_Merged": "测试阶段应使用自动化工具测试值是否不可重编程，并且只写一次字段在写入零时是否锁定。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1229",
        "Name": "Creation of Emergent Resource",
        "Description": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品管理资源或以间接方式创建新的、独立的资源，攻击者可以违反预期策略使用该资源。",
        "Name_ZH": "紧急资源的创建",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1230",
        "Name": "Exposure of Sensitive Information Through Metadata",
        "Description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品阻止对包含敏感信息的资源的直接访问，但对从原始敏感信息派生的元数据的访问限制不足。",
        "Name_ZH": "通过元数据泄露敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1231",
        "Name": "Improper Prevention of Lock Bit Modification",
        "Description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Security lock bit protections must be reviewed for design inconsistency and common weaknesses.",
                                "Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing."
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\nSecurity lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "该产品使用可信的锁定位来限制对寄存器、地址区域或其他资源的访问，但在设置后，产品无法阻止锁定位的值被修改。",
        "Name_ZH": "不正确防止锁位修改",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "必须审查安全锁定位的保护，以确保设计一致性和常见弱点。",
                                "安全锁定编程流程和锁定属性必须在前硅和后硅测试中进行测试。"
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "必须审查安全锁定位的保护，以确保设计一致性和常见弱点。\n安全锁定编程流程和锁定属性必须在前硅和后硅测试中进行测试。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1232",
        "Name": "Improper Lock Behavior After Power State Transition",
        "Description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Security Lock bit protections should be reviewed for behavior across supported power state transitions.",
                                "Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions."
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Security Lock bit protections should be reviewed for behavior across supported power state transitions.\nSecurity lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "寄存器锁定位保护在设置位后禁止对系统配置进行更改。但在电源状态转换（例如进入和从低功耗睡眠模式唤醒）后，一些受保护的寄存器或锁定位变得可编程，导致系统配置可更改。",
        "Name_ZH": "电源状态转换后的不正确锁行为",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "应该审查安全锁定位的保护，以了解在支持的电源状态转换中的行为。",
                                "安全锁定编程流程和锁定属性应在前硅和后硅测试中进行测试，包括跨电源转换的测试。"
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "应该审查安全锁定位的保护，以了解在支持的电源状态转换中的行为。\n安全锁定编程流程和锁定属性应在前硅和后硅测试中进行测试，包括跨电源转换的测试。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1233",
        "Name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
        "Description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Security lock bit protections must be reviewed for design inconsistency and common weaknesses.",
                                "Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing."
                            ]
                        }
                    },
                    "Description_Merged": "Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\nSecurity lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "该产品使用寄存器锁定位保护机制，但无法确保锁定位防止对系统寄存器或执行对重要硬件系统配置进行更改的控制的修改。",
        "Name_ZH": "缺少锁位保护的安全敏感硬件控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "必须审查安全锁定位的保护，以确保设计一致性和常见弱点。",
                                "安全锁定编程流程和锁定属性必须在前硅和后硅测试中进行测试。"
                            ]
                        }
                    },
                    "Description_Merged": "必须审查安全锁定位的保护，以确保设计一致性和常见弱点。\n安全锁定编程流程和锁定属性必须在前硅和后硅测试中进行测试。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1234",
        "Name": "Hardware Internal or Debug Modes Allow Override of Locks",
        "Description": "System configuration protection may be bypassed during debug mode.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Security Lock bit protections should be reviewed for any bypass/override modes supported.",
                                "Any supported override modes either should be removed or protected using authenticated debug modes.",
                                "Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing."
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Security Lock bit protections should be reviewed for any bypass/override modes supported.\nAny supported override modes either should be removed or protected using authenticated debug modes.\nSecurity lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "在调试模式下，系统配置保护可能被绕过。",
        "Name_ZH": "硬件内部或调试模式允许对锁的覆盖",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "应该审查安全锁定位的保护，以了解是否支持任何旁路/覆盖模式。",
                                "任何支持的覆盖模式都应该被移除或使用经过身份验证的调试模式进行保护。",
                                "安全锁定编程流程和锁定属性应在前硅和后硅测试中进行测试。"
                            ]
                        }
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "应该审查安全锁定位的保护，以了解是否支持任何旁路/覆盖模式。\n任何支持的覆盖模式都应该被移除或使用经过身份验证的调试模式进行保护。\n安全锁定编程流程和锁定属性应在前硅和后硅测试中进行测试。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1235",
        "Name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
        "Description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.",
                    "Description_Merged": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "代码使用装箱基元，可能导致对性能关键操作的效率低下。",
        "Name_ZH": "不正确使用自动装箱和拆箱进行性能关键操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将使用封装的基本类型的情况限制在一定范围内，例如在调用具有类型参数的方法时。在使用之前检查封装的基本类型的使用情况。使用SparseArrays或ArrayMap而不是HashMap，以避免性能开销。",
                    "Description_Merged": "将使用封装的基本类型的情况限制在一定范围内，例如在调用具有类型参数的方法时。在使用之前检查封装的基本类型的使用情况。使用SparseArrays或ArrayMap而不是HashMap，以避免性能开销。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1236",
        "Name": "Improper Neutralization of Formula Elements in a CSV File",
        "Description": "The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Unfortunately, there is no perfect solution, since different spreadsheet products act differently.",
                    "Description_Merged": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "It is not clear how effective this mitigation is with other spreadsheet software.",
                    "Description_Merged": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely.",
                    "Description_Merged": "Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品将用户提供的信息保存到逗号分隔值（CSV）文件中，但未对可能被电子表格产品打开时解释为命令的特殊元素进行中和或错误中和。",
        "Name_ZH": "CSV文件中公式元素的不正确中和",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在生成CSV输出时，请确保在存储结果CSV之前有效地转义或删除所有数据中的公式敏感元字符。危险字符包括'='（等号），'+'（加号），'-'（减号）和'@'（at符号）。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Unfortunately, there is no perfect solution, since different spreadsheet products act differently.",
                    "Description_Merged": "在生成CSV输出时，请确保在存储结果CSV之前有效地转义或删除所有数据中的公式敏感元字符。危险字符包括'='（等号），'+'（加号），'-'（减号）和'@'（at符号）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "如果字段以公式字符开头，请在其前面加上'（单引号），以防止Excel执行该公式。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "It is not clear how effective this mitigation is with other spreadsheet software.",
                    "Description_Merged": "如果字段以公式字符开头，请在其前面加上'（单引号），以防止Excel执行该公式。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "某些电子表格软件的实现可能会禁止在文件未经信任或当前用户未创建的情况下执行公式。",
                    "Effectiveness": "Limited",
                    "Effectiveness_Notes": "This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely.",
                    "Description_Merged": "某些电子表格软件的实现可能会禁止在文件未经信任或当前用户未创建的情况下执行公式。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1239",
        "Name": "Improper Zeroization of Hardware Register",
        "Description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
                    "Effectiveness_Notes": "Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data.  For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055].",
                    "Description_Merged": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "当硬件块的用户更改时，硬件产品未能正确清除内置寄存器中的敏感信息。",
        "Name_ZH": "硬件寄存器的不正确清零",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "每个可能包含敏感信息的寄存器必须有一个策略来规定何时以及如何清除信息，并澄清硬件逻辑或IP用户是否负责在适当时候启动零化过程。",
                    "Effectiveness_Notes": "Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data.  For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055].",
                    "Description_Merged": "每个可能包含敏感信息的寄存器必须有一个策略来规定何时以及如何清除信息，并澄清硬件逻辑或IP用户是否负责在适当时候启动零化过程。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1240",
        "Name": "Use of a Cryptographic Primitive with a Risky Implementation",
        "Description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-55",
                    "Phase": "Requirements",
                    "Description": "Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
                    "Effectiveness": "High",
                    "Description_Merged": "Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
                    "Effectiveness": "High",
                    "Description_Merged": "Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-54",
                    "Phase": "Architecture and Design",
                    "Description": "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "@_Mitigation_ID": "MIT-52",
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not use a checksum as a substitute for a cryptographically generated hash.",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "Do not use a checksum as a substitute for a cryptographically generated hash.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Libraries or Frameworks",
                    "Description": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.",
                    "Effectiveness": "High",
                    "Description_Merged": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Libraries or Frameworks"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "为满足对加密原语的需求，该产品采用了非标准、未经验证或不符合规范的加密实现。",
        "Name_ZH": "使用具有风险实现的加密原语",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-55",
                    "Phase": "需求",
                    "Description": "要求遵守可信方提供的最强建议，并要求合规必须保持最新，因为建议会随时间演变。例如，美国政府系统要求FIPS 140-3认证，该认证取代了FIPS 140-2 [REF-1192] [REF-1226]。",
                    "Effectiveness": "High",
                    "Description_Merged": "要求遵守可信方提供的最强建议，并要求合规必须保持最新，因为建议会随时间演变。例如，美国政府系统要求FIPS 140-3认证，该认证取代了FIPS 140-2 [REF-1192] [REF-1226]。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "确保架构/设计使用可信方提供的最强加密原语和算法。例如，美国政府系统要求FIPS 140-3认证，该认证取代了FIPS 140-2 [REF-1192] [REF-1226]。",
                    "Effectiveness": "High",
                    "Description_Merged": "确保架构/设计使用可信方提供的最强加密原语和算法。例如，美国政府系统要求FIPS 140-3认证，该认证取代了FIPS 140-2 [REF-1192] [REF-1226]。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-54",
                    "Phase": "架构与设计",
                    "Description": "不要开发自定义或私有的加密算法。它们很可能会受到密码学家已经了解的攻击。与所有加密机制一样，源代码应可供分析。如果算法在攻击者了解其工作原理后可能被破坏，那么它尤其脆弱。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "不要开发自定义或私有的加密算法。它们很可能会受到密码学家已经了解的攻击。与所有加密机制一样，源代码应可供分析。如果算法在攻击者了解其工作原理后可能被破坏，那么它尤其脆弱。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "尽量不要以新颖的方式或使用新的操作模式使用加密算法，即使你“知道”它是安全的。例如，使用SHA-2链式链接创建一次性密码本进行加密可能听起来是个好主意，但不应这样做。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "尽量不要以新颖的方式或使用新的操作模式使用加密算法，即使你“知道”它是安全的。例如，使用SHA-2链式链接创建一次性密码本进行加密可能听起来是个好主意，但不应这样做。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "@_Mitigation_ID": "MIT-52",
                    "Phase": "架构与设计",
                    "Description": "确保设计能够在下一代中将一个加密原语或算法替换为另一个（\"密码学灵活性\"）。在可能的情况下，使用包装器使接口统一。这将使升级到更强的算法更加容易。这对于硬件尤为重要，因为与软件相比，快速升级硬件更加困难；设计硬件时应以可替换的块级为基础。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "确保设计能够在下一代中将一个加密原语或算法替换为另一个（\"密码学灵活性\"）。在可能的情况下，使用包装器使接口统一。这将使升级到更强的算法更加容易。这对于硬件尤为重要，因为与软件相比，快速升级硬件更加困难；设计硬件时应以可替换的块级为基础。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "不要使用过时或不符合规范的加密算法。一些曾经被认为需要计算时间长达数十亿年的旧算法，现在可以在几天或几小时内破解。包括MD4、MD5、SHA1、DES和其他曾经被认为强大的算法 [REF-267]。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "不要使用过时或不符合规范的加密算法。一些曾经被认为需要计算时间长达数十亿年的旧算法，现在可以在几天或几小时内破解。包括MD4、MD5、SHA1、DES和其他曾经被认为强大的算法 [REF-267]。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "不要使用线性反馈移位寄存器（LFSR）或其他传统方法作为可接受和标准随机数生成器的替代方案。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "不要使用线性反馈移位寄存器（LFSR）或其他传统方法作为可接受和标准随机数生成器的替代方案。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "不要使用校验和作为加密生成的哈希的替代方案。",
                    "Effectiveness": "Discouraged Common Practice",
                    "Description_Merged": "不要使用校验和作为加密生成的哈希的替代方案。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Strategy": "库或框架",
                    "Description": "使用经过验证的加密库或框架。行业标准的实现将节省开发时间，并且更有可能避免在实施加密算法时出现的错误。然而，库/框架在实施过程中可能被错误使用。",
                    "Effectiveness": "High",
                    "Description_Merged": "使用经过验证的加密库或框架。行业标准的实现将节省开发时间，并且更有可能避免在实施加密算法时出现的错误。然而，库/框架在实施过程中可能被错误使用。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "库或框架"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在使用行业认可的技术时，确保正确使用。不要为了省事而跳过资源密集型的步骤（CWE-325）。这些步骤通常对于防范常见攻击至关重要。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "在使用行业认可的技术时，确保正确使用。不要为了省事而跳过资源密集型的步骤（CWE-325）。这些步骤通常对于防范常见攻击至关重要。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "不要将密钥存储在可被不可信代理访问的区域。仔细管理和保护加密密钥（参见CWE-320）。如果密钥可以被猜测或窃取，那么加密算法的强度就无关紧要。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "不要将密钥存储在可被不可信代理访问的区域。仔细管理和保护加密密钥（参见CWE-320）。如果密钥可以被猜测或窃取，那么加密算法的强度就无关紧要。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1241",
        "Name": "Use of Predictable Algorithm in Random Number Generator",
        "Description": "The device uses an algorithm that is predictable and generates a pseudo-random number.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "A true random number generator should be specified for cryptographic algorithms.",
                    "Description_Merged": "A true random number generator should be specified for cryptographic algorithms.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "A true random number generator should be implemented for cryptographic algorithms.",
                    "Description_Merged": "A true random number generator should be implemented for cryptographic algorithms.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该设备使用的算法是可预测的，并生成伪随机数。",
        "Name_ZH": "在随机数生成器中使用可预测的算法",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对于加密算法，应指定真正的随机数生成器。",
                    "Description_Merged": "对于加密算法，应指定真正的随机数生成器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对于加密算法，应实施真正的随机数生成器。",
                    "Description_Merged": "对于加密算法，应实施真正的随机数生成器。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1242",
        "Name": "Inclusion of Undocumented Features or Chicken Bits",
        "Description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented."
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该设备包含了鸡肋位或未记录的功能，可能为未经授权的人员提供入口点。",
        "Name_ZH": "包含未记录的功能或零位",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "强烈不建议在发布产品中使用\"chicken bits\"。如果确实使用，请确保在生产设备中将其禁用。应记录设备的所有接口。"
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "强烈不建议在发布产品中使用\"chicken bits\"。如果确实使用，请确保在生产设备中将其禁用。应记录设备的所有接口。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1243",
        "Name": "Sensitive Non-Volatile Information Not Protected During Debug",
        "Description": "Access to security-sensitive information stored in fuses is not limited during debug.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "Disable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode."
                    },
                    "Description_Merged": "Disable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "在调试期间，对存储在熔丝中的安全敏感信息的访问未受限制。",
        "Name_ZH": "在调试期间未保护敏感的非易失性信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "在调试模式下，禁止直接访问存储在保险丝中的安全敏感信息，也禁止从临时存储位置反映出这些信息。"
                    },
                    "Description_Merged": "在调试模式下，禁止直接访问存储在保险丝中的安全敏感信息，也禁止从临时存储位置反映出这些信息。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1244",
        "Name": "Internal Asset Exposed to Unsafe Debug Access Level or State",
        "Description": "The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents."
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
                    "Effectiveness": "Limited",
                    "Description_Merged": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.",
                    "Effectiveness": "Limited",
                    "Description_Merged": "Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用物理调试或测试接口支持多个访问级别，但将错误的调试访问级别分配给内部资产，从而为不受信任的调试代理提供了意外访问权。",
        "Name_ZH": "内部资产暴露于不安全的调试访问级别或状态",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "对于通过调试/测试接口可访问的安全敏感资产，只允许可信赖的代理。"
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "对于通过调试/测试接口可访问的安全敏感资产，只允许可信赖的代理。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在关键区域应用遮蔽[REF-1219]或屏蔽技术。",
                    "Effectiveness": "Limited",
                    "Description_Merged": "在关键区域应用遮蔽[REF-1219]或屏蔽技术。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "为设备添加屏蔽或防篡改保护，增加访问调试/测试接口的难度和成本。",
                    "Effectiveness": "Limited",
                    "Description_Merged": "为设备添加屏蔽或防篡改保护，增加访问调试/测试接口的难度和成本。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1245",
        "Name": "Improper Finite State Machines (FSMs) in Hardware Logic",
        "Description": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
                    "Effectiveness": "High",
                    "Description_Merged": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "硬件逻辑中存在故障的有限状态机（FSM）允许攻击者将系统置于未定义状态，以导致拒绝服务（DoS）或在受害者系统上获得特权。",
        "Name_ZH": "硬件逻辑中的不正确有限状态机（FSMs）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "定义所有可能的状态，并通过默认语句处理所有未使用的状态。确保系统默认处于安全状态。",
                    "Effectiveness": "High",
                    "Description_Merged": "定义所有可能的状态，并通过默认语句处理所有未使用的状态。确保系统默认处于安全状态。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1246",
        "Name": "Improper Write Handling in Limited-write Non-Volatile Memories",
        "Description": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Testing"
                    ],
                    "Description": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
                    "Effectiveness": "High",
                    "Description_Merged": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
                    "Phase_Merged": "Architecture and Design / Implementation / Testing"
                }
            ]
        },
        "Description_ZH": "该产品未实现或错误实现了有限写入非易失性存储器中的磨损平衡操作。",
        "Name_ZH": "有限写非易失性存储器中的不正确写处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "测试"
                    ],
                    "Description": "包括安全的磨损平衡算法，并确保其无法被绕过。",
                    "Effectiveness": "High",
                    "Description_Merged": "包括安全的磨损平衡算法，并确保其无法被绕过。",
                    "Phase_Merged": "架构与设计 / 实施 / 测试"
                }
            ]
        }
    },
    {
        "ID": "1247",
        "Name": "Improper Protection Against Voltage and Clock Glitches",
        "Description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks."
                    },
                    "Description_Merged": "At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该设备未包含或包含了错误实现的电路或传感器，无法检测和抵御电压和时钟故障，并保护设备上包含的敏感信息或软件。",
        "Name_ZH": "不正确保护电压和时钟抖动",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "在电路级别上，使用可调谐复制电路（TRCs）或特殊的触发器如Razor触发器有助于减轻毛刺攻击。在SoC或平台基础上，可以实施级别传感器来检测毛刺。在安全敏感代码中实施冗余（例如，在执行检查时）也有助于减轻毛刺攻击。"
                    },
                    "Description_Merged": "在电路级别上，使用可调谐复制电路（TRCs）或特殊的触发器如Razor触发器有助于减轻毛刺攻击。在SoC或平台基础上，可以实施级别传感器来检测毛刺。在安全敏感代码中实施冗余（例如，在执行检查时）也有助于减轻毛刺攻击。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1248",
        "Name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
        "Description": "The security-sensitive hardware module contains semiconductor defects.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": {
                        "p": "While semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free."
                    },
                    "Description_Merged": "While semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Operation",
                    "Description": {
                        "p": "Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important."
                    },
                    "Description_Merged": "Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "安全敏感的硬件模块存在半导体缺陷。",
        "Name_ZH": "具有安全敏感影响的硅片缺陷",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": {
                        "p": "尽管半导体制造公司实施了多种机制来持续改进半导体制造过程以确保减少缺陷，但某些缺陷只能在制造后修复。对硅芯片进行制造后测试是至关重要的。必须使用卡住0或卡住1的故障模型来开发制造后的测试用例并实现良好的覆盖率。一旦完成硅封装，必须进行广泛的硅封装后测试，以确保实现安全功能的硬件逻辑没有缺陷。"
                    },
                    "Description_Merged": "尽管半导体制造公司实施了多种机制来持续改进半导体制造过程以确保减少缺陷，但某些缺陷只能在制造后修复。对硅芯片进行制造后测试是至关重要的。必须使用卡住0或卡住1的故障模型来开发制造后的测试用例并实现良好的覆盖率。一旦完成硅封装，必须进行广泛的硅封装后测试，以确保实现安全功能的硬件逻辑没有缺陷。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "操作",
                    "Description": {
                        "p": "将硬件操作在设备规格之外，如极高温度、电压等，会加速半导体的退化并导致缺陷。当这些缺陷在安全关键的硬件模块中显现为故障时，会导致安全保证受到威胁。因此，将设备操作在规格范围内非常重要。"
                    },
                    "Description_Merged": "将硬件操作在设备规格之外，如极高温度、电压等，会加速半导体的退化并导致缺陷。当这些缺陷在安全关键的硬件模块中显现为故障时，会导致安全保证受到威胁。因此，将设备操作在规格范围内非常重要。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "1249",
        "Name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
        "Description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data."
                    },
                    "Description_Merged": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品提供了一个应用程序供管理员管理底层操作系统的某些部分，但该应用程序未准确识别出OS中存在的所有相关实体或资源；即，应用程序对OS状态的模型与实际状态不一致。",
        "Name_ZH": "应用级管理工具与底层操作系统视图不一致",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "确保管理员工具定期刷新其对底层操作系统的模型，并注意与预期具有相同数据的配置文件或其他数据源之间的任何不一致性。"
                    },
                    "Description_Merged": "确保管理员工具定期刷新其对底层操作系统的模型，并注意与预期具有相同数据的配置文件或其他数据源之间的任何不一致性。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1250",
        "Name": "Improper Preservation of Consistency Between Independent Representations of Shared State",
        "Description": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品拥有或支持多个分布式组件或子系统，每个组件或子系统都需要保留自己的共享数据（如状态或缓存）的本地副本，但该产品未能确保所有本地副本始终保持一致。",
        "Name_ZH": "未正确保持共享状态的独立表示之间的一致性",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1251",
        "Name": "Mirrored Regions with Different Values",
        "Description": "The product's architecture mirrors regions without ensuring that their contents always stay in sync.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are:",
                        "ul": {
                            "li": [
                                "Make this out-of-sync time period as small as possible, and",
                                "Make the update process as robust as possible."
                            ]
                        }
                    },
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are:\nMake this out-of-sync time period as small as possible, and\nMake the update process as robust as possible.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该产品的架构在不确保其内容始终同步的情况下，反映了区域。",
        "Name_ZH": "镜像区域具有不同的值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "每当存在多个物理上不同的副本可能会发生变化，并且更新它们的过程不是瞬时和原子的时候，无法断言原始和影子副本始终同步 - 总会存在一段时间它们不同步的情况。为了减轻相关风险，建议基本上是：",
                        "ul": {
                            "li": [
                                "将这个不同步的时间段尽量减小，并且",
                                "尽量使更新过程更加健壮。"
                            ]
                        }
                    },
                    "Effectiveness": "Moderate",
                    "Description_Merged": "每当存在多个物理上不同的副本可能会发生变化，并且更新它们的过程不是瞬时和原子的时候，无法断言原始和影子副本始终同步 - 总会存在一段时间它们不同步的情况。为了减轻相关风险，建议基本上是：\n将这个不同步的时间段尽量减小，并且\n尽量使更新过程更加健壮。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1252",
        "Name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
        "Description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit)."
                    },
                    "Description_Merged": "Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Integration",
                    "Description": {
                        "p": "If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation."
                    },
                    "Description_Merged": "If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "CPU未配置为在内存上提供写和执行操作的独占硬件支持。这使得攻击者可以从内存中执行数据。",
        "Name_ZH": "CPU硬件未配置以支持写和执行操作的互斥性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "实现一个专用位，可供操作系统利用，标记数据区域为非可执行。如果CPU中没有这样的位，实现内存管理单元（MMU）/内存保护单元（MPU）。"
                    },
                    "Description_Merged": "实现一个专用位，可供操作系统利用，标记数据区域为非可执行。如果CPU中没有这样的位，实现内存管理单元（MMU）/内存保护单元（MPU）。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "集成",
                    "Description": {
                        "p": "如果没有可用的MMU/MPU，则需要在SoC互联中实现防火墙，以模拟写排他操作。"
                    },
                    "Description_Merged": "如果没有可用的MMU/MPU，则需要在SoC互联中实现防火墙，以模拟写排他操作。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1253",
        "Name": "Incorrect Selection of Fuse Values",
        "Description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
                    "Description_Merged": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "将系统设置为安全状态的逻辑级别依赖于未烧毁的保险丝。攻击者只需烧断保险丝就可以将系统设置为不安全状态。",
        "Name_ZH": "选择保险丝值不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "逻辑设计应确保烧毁的保险丝不会使产品进入可以被攻击者利用的不安全状态。",
                    "Description_Merged": "逻辑设计应确保烧毁的保险丝不会使产品进入可以被攻击者利用的不安全状态。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1254",
        "Name": "Incorrect Comparison Logic Granularity",
        "Description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": "The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks."
                    },
                    "Description_Merged": "The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品的比较逻辑是通过一系列步骤执行而非一次性跨整个字符串进行的。如果在其中一步出现比较逻辑错误，操作可能会受到定时攻击的影响，从而导致进程被恶意拦截。",
        "Name_ZH": "比较逻辑粒度不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": {
                        "p": "硬件设计师应确保实现比较逻辑，以便在一个操作中进行比较，而不是分为较小的块进行比较。"
                    },
                    "Description_Merged": "硬件设计师应确保实现比较逻辑，以便在一个操作中进行比较，而不是分为较小的块进行比较。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1255",
        "Name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks",
        "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.",
                    "Description_Merged": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.",
                    "Description_Merged": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.",
                    "Description_Merged": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.",
                    "Description_Merged": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Integration",
                    "Description": "During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use.",
                    "Description_Merged": "During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "在安全令牌评估期间，可以监视设备的实时功耗，并利用获取的信息来确定参考令牌的价值。",
        "Name_ZH": "比较逻辑容易受到功率侧信道攻击",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "设计阶段必须考虑对安全令牌进行每次检查以及检查好令牌与坏令牌期间所消耗的功率量。另一种选择是一次性检查，其中在检查之前递增重试计数器。",
                    "Description_Merged": "设计阶段必须考虑对安全令牌进行每次检查以及检查好令牌与坏令牌期间所消耗的功率量。另一种选择是一次性检查，其中在检查之前递增重试计数器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "另一种潜在的缓解措施是并行移位秘密数据（见下面的示例2）。请注意，总线越宽，结果越有效。",
                    "Description_Merged": "另一种潜在的缓解措施是并行移位秘密数据（见下面的示例2）。请注意，总线越宽，结果越有效。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "另一个潜在的缓解措施是在每个加密操作中添加随机数据，然后在之后将其减去。这种方法非常有效，但在性能、面积和功耗上代价高昂。它还需要一个随机数生成器。",
                    "Description_Merged": "另一个潜在的缓解措施是在每个加密操作中添加随机数据，然后在之后将其减去。这种方法非常有效，但在性能、面积和功耗上代价高昂。它还需要一个随机数生成器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果架构无法防止攻击，则使用过滤组件可能会降低实施攻击的能力，但必须考虑过滤元件的物理移除。",
                    "Description_Merged": "如果架构无法防止攻击，则使用过滤组件可能会降低实施攻击的能力，但必须考虑过滤元件的物理移除。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "集成",
                    "Description": "在集成过程中，避免长时间使用单个秘钥（例如频繁更新密钥）。这限制了被泄露的数据量，但也增加了使用的复杂性。",
                    "Description_Merged": "在集成过程中，避免长时间使用单个秘钥（例如频繁更新密钥）。这限制了被泄露的数据量，但也增加了使用的复杂性。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1256",
        "Name": "Improper Restriction of Software Interfaces to Hardware Features",
        "Description": "The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage."
                    },
                    "Description_Merged": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品提供了可由软件控制的设备功能，如电源和时钟管理，但未正确限制可能导致修改硬件内存或寄存器位，或能够观察物理侧信道的功能。",
        "Name_ZH": "不正确限制软件接口对硬件功能的访问",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": "确保适当的访问控制机制保护可由软件控制的更改物理操作条件的软件功能，例如时钟频率和电压。"
                    },
                    "Description_Merged": "确保适当的访问控制机制保护可由软件控制的更改物理操作条件的软件功能，例如时钟频率和电压。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1257",
        "Name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
        "Description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.",
                    "Description_Merged": "The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
                    "Description_Merged": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "在硬件设计中，别名或镜像内存区域的读写权限可能由硬件实施不一致。可能的结果是，不受信任的代理被阻止访问一个内存区域，但却可以访问相应的别名内存区域。",
        "Name_ZH": "应用于镜像或别名内存区域的不正确访问控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "应该对主要内存区域与任何镜像或别名内存区域之间的访问权限一致性进行检查。如果不同的内存保护单元（MPU）保护着别名区域，它们的保护范围定义和策略应该进行同步。",
                    "Description_Merged": "应该对主要内存区域与任何镜像或别名内存区域之间的访问权限一致性进行检查。如果不同的内存保护单元（MPU）保护着别名区域，它们的保护范围定义和策略应该进行同步。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "允许启用内存别名或更改映射内存区域大小的控制应该只能由可信软件组件进行编程。",
                    "Description_Merged": "允许启用内存别名或更改映射内存区域大小的控制应该只能由可信软件组件进行编程。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1258",
        "Name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
        "Description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared."
                    },
                    "Description_Merged": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "当进入调试模式时，硬件未完全清除安全敏感值，如密钥和在加密操作中的中间值。",
        "Name_ZH": "由于未清除的调试信息导致敏感系统信息的泄露",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "在启用调试模式时，必须清除所有包含敏感资产的寄存器。"
                    },
                    "Description_Merged": "在启用调试模式时，必须清除所有包含敏感资产的寄存器。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1259",
        "Name": "Improper Restriction of Security Token Assignment",
        "Description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Security Token assignment review checks for design inconsistency and common weaknesses.",
                                "Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing."
                            ]
                        }
                    },
                    "Description_Merged": "Security Token assignment review checks for design inconsistency and common weaknesses.\nSecurity-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "SoC实施了安全令牌机制，以区分事务来源实体的允许或禁止的操作，但安全令牌的保护不当。",
        "Name_ZH": "不正确限制安全令牌分配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "对安全令牌分配进行审查检查设计不一致性和常见弱点。",
                                "安全令牌的定义和编程流程在硅前和硅后测试中进行测试。"
                            ]
                        }
                    },
                    "Description_Merged": "对安全令牌分配进行审查检查设计不一致性和常见弱点。\n安全令牌的定义和编程流程在硅前和硅后测试中进行测试。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1260",
        "Name": "Improper Handling of Overlap Between Protected Memory Ranges",
        "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software."
                    },
                    "Description_Merged": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": [
                            "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.",
                            "For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software.",
                            "Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses.",
                            "The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.\nFor example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software.\nHardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses.\nThe memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品允许地址区域重叠，可能导致绕过预期的内存保护。",
        "Name_ZH": "对受保护内存范围的重叠处理不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "确保内存区域按照预期进行隔离，并且硬件使用访问控制（读/写）策略来保护特权软件。"
                    },
                    "Description_Merged": "确保内存区域按照预期进行隔离，并且硬件使用访问控制（读/写）策略来保护特权软件。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": [
                            "对于所有可编程的内存保护区域，内存保护单元（MPU）设计可以定义一个优先级方案。",
                            "例如：如果可以编程三个内存区域（Region_0、Region_1和Region_2），设计可以强制执行一个优先级方案，即如果系统地址位于多个区域内，则具有最低ID的区域优先，并应用该区域的访问控制策略。在某些MPU设计中，优先级方案也可以由可信软件进行编程。",
                            "硬件逻辑或可信固件还可以检查区域定义，并阻止具有重叠地址的内存区域的编程。",
                            "内存访问控制检查过滤器还可以设计为将策略过滤器应用于所有重叠范围，即如果地址位于Region_0和Region_1之间，则只有当Region_0和Region_1的策略都允许访问时，才允许访问该地址。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "对于所有可编程的内存保护区域，内存保护单元（MPU）设计可以定义一个优先级方案。\n例如：如果可以编程三个内存区域（Region_0、Region_1和Region_2），设计可以强制执行一个优先级方案，即如果系统地址位于多个区域内，则具有最低ID的区域优先，并应用该区域的访问控制策略。在某些MPU设计中，优先级方案也可以由可信软件进行编程。\n硬件逻辑或可信固件还可以检查区域定义，并阻止具有重叠地址的内存区域的编程。\n内存访问控制检查过滤器还可以设计为将策略过滤器应用于所有重叠范围，即如果地址位于Region_0和Region_1之间，则只有当Region_0和Region_1的策略都允许访问时，才允许访问该地址。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1261",
        "Name": "Improper Handling of Single Event Upsets",
        "Description": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Implement triple-modular redundancy around security-sensitive modules."
                    },
                    "Description_Merged": "Implement triple-modular redundancy around security-sensitive modules.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving."
                    },
                    "Description_Merged": "SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "硬件逻辑在发生单事件干扰（SEUs）时没有有效处理。",
        "Name_ZH": "单事件翻转的不正确处理",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "在安全敏感模块周围实施三模块冗余。"
                    },
                    "Description_Merged": "在安全敏感模块周围实施三模块冗余。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "SEU主要影响SRAM。对于存储安全关键数据的SRAM，应实施错误纠正码（ECC）和地址交错。"
                    },
                    "Description_Merged": "SEU主要影响SRAM。对于存储安全关键数据的SRAM，应实施错误纠正码（ECC）和地址交错。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1262",
        "Name": "Improper Access Control for Register Interface",
        "Description": "The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design proper policies for hardware register access from software.",
                    "Description_Merged": "Design proper policies for hardware register access from software.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that access control policies for register access are implemented in accordance with the specified design.",
                    "Description_Merged": "Ensure that access control policies for register access are implemented in accordance with the specified design.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用作为软件与硬件功能之间接口的内存映射I/O寄存器，但对这些寄存器的访问控制不恰当。",
        "Name_ZH": "寄存器接口的不正确访问控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "为软件的硬件寄存器访问设计适当的策略。",
                    "Description_Merged": "为软件的硬件寄存器访问设计适当的策略。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保按照指定的设计实施寄存器访问的访问控制策略。",
                    "Description_Merged": "确保按照指定的设计实施寄存器访问的访问控制策略。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1263",
        "Name": "Improper Physical Access Control",
        "Description": "The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.",
                    "Description_Merged": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.",
                    "Description_Merged": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Manufacturing",
                    "Description": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
                    "Description_Merged": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
                    "Phase_Merged": "Manufacturing"
                }
            ]
        },
        "Description_ZH": "该产品设计时限制了对某些信息的访问，但对于未经授权的人员在物理上访问这些区域时保护不足。",
        "Name_ZH": "不正确的物理访问控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "具体的保护要求强烈依赖于上下文因素，包括与产品保护机制被破坏相关的可接受风险水平。设计人员可以采用抗篡改措施，以防止或检测产品被篡改。",
                    "Description_Merged": "具体的保护要求强烈依赖于上下文因素，包括与产品保护机制被破坏相关的可接受风险水平。设计人员可以采用抗篡改措施，以防止或检测产品被篡改。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "生命周期的测试阶段应建立一种方法，以确定保护机制是否足以防止未经授权的访问。",
                    "Description_Merged": "生命周期的测试阶段应建立一种方法，以确定保护机制是否足以防止未经授权的访问。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "制造",
                    "Description": "确保在制造和分发时所有保护机制都被充分激活。",
                    "Description_Merged": "确保在制造和分发时所有保护机制都被充分激活。",
                    "Phase_Merged": "制造"
                }
            ]
        }
    },
    {
        "ID": "1264",
        "Name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
        "Description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows."
                    },
                    "Description_Merged": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在错误处理和安全检查的硬件逻辑中，在安全检查完成之前可能错误地转发数据。",
        "Name_ZH": "控制和数据通道之间的硬件逻辑不安全的去同步",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "彻底验证数据路由逻辑，以确保任何错误处理或安全检查能够有效阻止非法数据流动。"
                    },
                    "Description_Merged": "彻底验证数据路由逻辑，以确保任何错误处理或安全检查能够有效阻止非法数据流动。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1265",
        "Name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
        "Description": "During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.",
                    "Effectiveness": "High",
                    "Description_Merged": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
                    "Effectiveness": "High",
                    "Description_Merged": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在执行非可重入代码时，该产品执行了一个调用，无意中产生了非可重入代码的嵌套调用。",
        "Name_ZH": "通过嵌套调用意外重新进入不可重入代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在设计一个系统以响应事件执行不可信代码时，考虑将不可信的事件处理程序异步执行（异步消息传递），而不是在每次事件触发时同步执行。不可信代码应在线程的消息循环的下一次迭代开始时执行。通过这种方式，对不可重入代码的调用是严格序列化的，以确保每个操作在下一个操作开始之前完全完成。必须特别注意所有可能导致脚本执行的类型转换的地方。在操作的最开始执行所有所需的强制转换可以帮助减少操作在意外的时机执行的机会。",
                    "Effectiveness": "High",
                    "Description_Merged": "在设计一个系统以响应事件执行不可信代码时，考虑将不可信的事件处理程序异步执行（异步消息传递），而不是在每次事件触发时同步执行。不可信代码应在线程的消息循环的下一次迭代开始时执行。通过这种方式，对不可重入代码的调用是严格序列化的，以确保每个操作在下一个操作开始之前完全完成。必须特别注意所有可能导致脚本执行的类型转换的地方。在操作的最开始执行所有所需的强制转换可以帮助减少操作在意外的时机执行的机会。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保所讨论的代码（例如，函数或类）是可重入的，不要使用非局部数据，不要修改自身的代码，也不要调用其他不可重入的代码。",
                    "Effectiveness": "High",
                    "Description_Merged": "确保所讨论的代码（例如，函数或类）是可重入的，不要使用非局部数据，不要修改自身的代码，也不要调用其他不可重入的代码。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1266",
        "Name": "Improper Scrubbing of Sensitive Data from Decommissioned Device",
        "Description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data."
                    },
                    "Description_Merged": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Policy",
                    "Description": {
                        "p": "The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility."
                    },
                    "Description_Merged": "The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.",
                    "Phase_Merged": "Policy"
                },
                {
                    "Phase": "Implementation",
                    "Description": {
                        "p": "If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system."
                    },
                    "Description_Merged": "If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品在产品被废弃时未能正确提供一个能够移除敏感数据的能力。擦除能力可能缺失、不足或不正确。",
        "Name_ZH": "未正确擦除废弃设备中的敏感数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "在设计阶段应包含彻底清除产品中数据的功能。试图在现有架构之上添加此功能可能导致敏感信息/数据无法完全删除。"
                    },
                    "Description_Merged": "在设计阶段应包含彻底清除产品中数据的功能。试图在现有架构之上添加此功能可能导致敏感信息/数据无法完全删除。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "策略",
                    "Description": {
                        "p": "制造商应描述敏感数据存储的位置以及其删除的政策和程序。这些信息可以在管理员指南或易变性声明中传达。"
                    },
                    "Description_Merged": "制造商应描述敏感数据存储的位置以及其删除的政策和程序。这些信息可以在管理员指南或易变性声明中传达。",
                    "Phase_Merged": "策略"
                },
                {
                    "Phase": "实施",
                    "Description": {
                        "p": "如果没有内置清除敏感数据的功能，制造商可能需要提供一个实用程序，以从管理员无法访问的存储位置清除敏感数据。其中一个例子是当敏感数据存储在系统未提供用户/管理员界面的EEPROM上时。"
                    },
                    "Description_Merged": "如果没有内置清除敏感数据的功能，制造商可能需要提供一个实用程序，以从管理员无法访问的存储位置清除敏感数据。其中一个例子是当敏感数据存储在系统未提供用户/管理员界面的EEPROM上时。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1267",
        "Name": "Policy Uses Obsolete Encoding",
        "Description": "The product uses an obsolete encoding mechanism to implement access controls.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "p": [
                            "Security Token Decoders should be reviewed for design inconsistency and common weaknesses.",
                            "Access and programming flows should be tested in both pre-silicon and post-silicon testing."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Security Token Decoders should be reviewed for design inconsistency and common weaknesses.\nAccess and programming flows should be tested in both pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用过时的编码机制来实现访问控制。",
        "Name_ZH": "策略使用过时的编码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "p": [
                            "应对安全令牌解码器进行设计一致性和常见弱点的审查。",
                            "访问和编程流程应在前硅和后硅测试中进行测试。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "应对安全令牌解码器进行设计一致性和常见弱点的审查。\n访问和编程流程应在前硅和后硅测试中进行测试。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1268",
        "Name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents",
        "Description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
                    "Description_Merged": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品对于特定资源的硬件强制访问控制没有正确考虑控制策略和写入策略之间的权限差异。",
        "Name_ZH": "策略权限在控制和数据代理之间不一致分配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在前硅和后硅测试中必须充分测试访问控制策略定义和编程流程。",
                    "Description_Merged": "在前硅和后硅测试中必须充分测试访问控制策略定义和编程流程。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1269",
        "Name": "Product Released in Non-Release Configuration",
        "Description": "The product released to market is released in pre-production or manufacturing configuration.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Description_Merged": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Integration",
                    "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Description_Merged": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Phase_Merged": "Integration"
                },
                {
                    "Phase": "Manufacturing",
                    "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Description_Merged": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
                    "Phase_Merged": "Manufacturing"
                }
            ]
        },
        "Description_ZH": "发布到市场的产品以预生产或制造配置发布。",
        "Name_ZH": "以非发布配置发布的产品",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Description_Merged": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "集成",
                    "Description": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Description_Merged": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Phase_Merged": "集成"
                },
                {
                    "Phase": "制造",
                    "Description": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Description_Merged": "确保存在一个标记来指示制造完成阶段，并且该制造完成标记在制造完成阶段进行更新（即，制造完成保险丝被烧断）。",
                    "Phase_Merged": "制造"
                }
            ]
        }
    },
    {
        "ID": "1270",
        "Name": "Generation of Incorrect Security Tokens",
        "Description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses.",
                                "Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing."
                            ]
                        }
                    },
                    "Description_Merged": "Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses.\nSecurity-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品实现了安全令牌机制，用于区分实体发起的交易中允许或禁止的操作。然而，系统生成的安全令牌有误。",
        "Name_ZH": "生成错误的安全令牌",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "应对安全令牌生成进行设计一致性和常见弱点的审查。",
                                "在硅前和硅后测试中应该对安全令牌的定义和编程流程进行测试。"
                            ]
                        }
                    },
                    "Description_Merged": "应对安全令牌生成进行设计一致性和常见弱点的审查。\n在硅前和硅后测试中应该对安全令牌的定义和编程流程进行测试。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1271",
        "Name": "Uninitialized Value on Reset for Registers Holding Security Settings",
        "Description": "Security-critical logic is not set to a known value on reset.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.",
                    "Description_Merged": "Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "All registers holding security-critical information should be set to a specific value on reset.",
                    "Description_Merged": "All registers holding security-critical information should be set to a specific value on reset.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "安全关键逻辑在重置时未设置为已知值。",
        "Name_ZH": "在保存安全设置的寄存器重置时未初始化的值",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "应进行设计检查，以识别用于安全关键功能的未初始化的触发器。",
                    "Description_Merged": "应进行设计检查，以识别用于安全关键功能的未初始化的触发器。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "在复位时，应将保存安全关键信息的所有寄存器设置为特定值。",
                    "Description_Merged": "在复位时，应将保存安全关键信息的所有寄存器设置为特定值。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1272",
        "Name": "Sensitive Information Uncleared Before Debug/Power State Transition",
        "Description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "During state transitions, information not needed in the next state should be removed before the transition to the next state.",
                    "Description_Merged": "During state transitions, information not needed in the next state should be removed before the transition to the next state.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品执行了电源或调试状态转换，但未清除因信息访问限制更改而不再可访问的敏感信息。",
        "Name_ZH": "在调试/电源状态转换之前未清除敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在状态转换期间，在进入下一个状态之前应删除不需要的信息。",
                    "Description_Merged": "在状态转换期间，在进入下一个状态之前应删除不需要的信息。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1273",
        "Name": "Device Unlock Credential Sharing",
        "Description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Integration",
                    "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.",
                    "Description_Merged": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.",
                    "Phase_Merged": "Integration"
                },
                {
                    "Phase": "Manufacturing",
                    "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.",
                    "Description_Merged": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.",
                    "Phase_Merged": "Manufacturing"
                }
            ]
        },
        "Description_ZH": "解锁设备所需的凭证在多个方之间共享，可能会暴露敏感信息。",
        "Name_ZH": "设备解锁凭证共享",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "集成",
                    "Description": "确保解锁凭据仅与最少数量的参与方共享，并保持绝密。为了降低凭据泄露的风险，如果可能的话，凭据应与特定的部件相关。",
                    "Description_Merged": "确保解锁凭据仅与最少数量的参与方共享，并保持绝密。为了降低凭据泄露的风险，如果可能的话，凭据应与特定的部件相关。",
                    "Phase_Merged": "集成"
                },
                {
                    "Phase": "制造",
                    "Description": "确保解锁凭据仅与最少数量的参与方共享，并保持绝密。为了降低凭据泄露的风险，如果可能的话，凭据应与特定的部件相关。",
                    "Description_Merged": "确保解锁凭据仅与最少数量的参与方共享，并保持绝密。为了降低凭据泄露的风险，如果可能的话，凭据应与特定的部件相关。",
                    "Phase_Merged": "制造"
                }
            ]
        }
    },
    {
        "ID": "1274",
        "Name": "Improper Access Control for Volatile Memory Containing Boot Code",
        "Description": "The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.",
                    "Description_Merged": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Testing",
                    "Description": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code.",
                    "Description_Merged": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "该产品进行了安全引导过程，将非易失性存储器（NVM）中的引导加载程序代码转移到易失性存储器（VM）中，但对易失性存储器缺乏足够的访问控制或其他保护措施。",
        "Name_ZH": "不正确的访问控制，涉及包含引导代码的易失性内存",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保易失性内存保护的设计足够防止被对手或不可信代码修改。",
                    "Description_Merged": "确保易失性内存保护的设计足够防止被对手或不可信代码修改。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "测试",
                    "Description": "测试易失性内存保护，确保其免受修改或不可信代码的影响。",
                    "Description_Merged": "测试易失性内存保护，确保其免受修改或不可信代码的影响。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1275",
        "Name": "Sensitive Cookie with Improper SameSite Attribute",
        "Description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",
        "Likelihood_Of_Exploit": "Medium",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
                    "Description_Merged": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "敏感 cookie 的 SameSite 属性未设置，或者使用了不安全的值。",
        "Name_ZH": "带有不正确SameSite属性的敏感Cookie",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "将敏感cookie的SameSite属性设置为'Lax'或'Strict'。这会指示浏览器仅将该cookie应用于同域请求，从而在防范CSRF攻击方面提供了多重防御。当使用'Lax'值时，还会通过HTTP GET、HEAD、OPTIONS和TRACE方法发送跨顶级域名导航的cookie，但不会发送其他更可能引起状态突变副作用的HTTP方法。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
                    "Description_Merged": "将敏感cookie的SameSite属性设置为'Lax'或'Strict'。这会指示浏览器仅将该cookie应用于同域请求，从而在防范CSRF攻击方面提供了多重防御。当使用'Lax'值时，还会通过HTTP GET、HEAD、OPTIONS和TRACE方法发送跨顶级域名导航的cookie，但不会发送其他更可能引起状态突变副作用的HTTP方法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1276",
        "Name": "Hardware Child Block Incorrectly Connected to Parent System",
        "Description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.",
                    "Description_Merged": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "硬件 IP 和父系统设计之间的信号连接不正确，存在安全风险。",
        "Name_ZH": "硬件子模块错误连接到父系统",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "可以使用系统级验证来确保组件连接正确，并且设计安全要求不会因各种IP块之间的交互而被违反。",
                    "Description_Merged": "可以使用系统级验证来确保组件连接正确，并且设计安全要求不会因各种IP块之间的交互而被违反。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1277",
        "Name": "Firmware Not Updateable",
        "Description": "The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.",
                    "Description_Merged": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
                    "Description_Merged": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement the necessary functionality to allow the firmware to be updated.",
                    "Description_Merged": "Implement the necessary functionality to allow the firmware to be updated.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未提供用户更新或修补固件以解决可能存在的漏洞或弱点的能力。",
        "Name_ZH": "固件无法更新",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "在规定要求时，应包括固件更新的能力。包括完整性检查和身份验证，以确保不可信的固件无法安装。",
                    "Description_Merged": "在规定要求时，应包括固件更新的能力。包括完整性检查和身份验证，以确保不可信的固件无法安装。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计该设备以允许固件的更新。确保设计中明确指定了如何分发更新，并确保其完整性和身份验证。",
                    "Description_Merged": "设计该设备以允许固件的更新。确保设计中明确指定了如何分发更新，并确保其完整性和身份验证。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "实现必要的功能，以允许固件的更新。",
                    "Description_Merged": "实现必要的功能，以允许固件的更新。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1278",
        "Name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
        "Description": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.",
                    "Description_Merged": "The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "攻击者可以通过使用扫描电子显微镜等技术，捕获和分析集成电路图像来恢复存储在硬件中的信息。",
        "Name_ZH": "缺少防止使用集成电路（IC）成像技术进行硬件逆向工程的保护",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "通过IC逆向工程提取秘密的成本应该超过被提取秘密的潜在价值。威胁模型和秘密的价值应用于选择用于保护这些秘密的技术。例如，IC伪装和混淆、防篡改包装、主动屏蔽和物理篡改检测信息擦除。",
                    "Description_Merged": "通过IC逆向工程提取秘密的成本应该超过被提取秘密的潜在价值。威胁模型和秘密的价值应用于选择用于保护这些秘密的技术。例如，IC伪装和混淆、防篡改包装、主动屏蔽和物理篡改检测信息擦除。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1279",
        "Name": "Cryptographic Operations are run Before Supporting Units are Ready",
        "Description": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Best practices should be used to design cryptographic systems.",
                    "Description_Merged": "Best practices should be used to design cryptographic systems.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
                    "Description_Merged": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "执行加密操作时，未确保支持输入准备好提供有效数据可能会危及加密结果。",
        "Name_ZH": "在支持单元准备好之前运行加密操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "应使用最佳实践来设计加密系统。",
                    "Description_Merged": "应使用最佳实践来设计加密系统。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "持续确保加密输入提供有效信息是确保加密输出安全的必要条件。",
                    "Description_Merged": "持续确保加密输入提供有效信息是确保加密输出安全的必要条件。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1280",
        "Name": "Access Control Check Implemented After Asset is Accessed",
        "Description": "A product's hardware-based access control check occurs after the asset has been accessed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
                    "Description_Merged": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "在资产被访问之后，产品的基于硬件的访问控制检查发生。",
        "Name_ZH": "在访问资产后实施访问控制检查",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "首先实施访问控制检查。只有在代理人被授权的情况下才应给予资产访问权限。",
                    "Description_Merged": "首先实施访问控制检查。只有在代理人被授权的情况下才应给予资产访问权限。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1281",
        "Name": "Sequence of Processor Instructions Leads to Unexpected Behavior",
        "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Testing",
                    "Description": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.",
                    "Description_Merged": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.",
                    "Phase_Merged": "Testing"
                },
                {
                    "Phase": "Patching and Maintenance",
                    "Description": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior. See [REF-1108].",
                    "Description_Merged": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior. See [REF-1108].",
                    "Phase_Merged": "Patching and Maintenance"
                }
            ]
        },
        "Description_ZH": "特定的处理器指令组合会导致不良行为，比如锁定处理器直到进行硬重置。",
        "Name_ZH": "处理器指令序列导致意外行为",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "测试",
                    "Description": "实施严格的测试策略，其中包括随机化以探索在正常工作负载中不太可能出现的指令序列，以识别停机和自燃指令序列。",
                    "Description_Merged": "实施严格的测试策略，其中包括随机化以探索在正常工作负载中不太可能出现的指令序列，以识别停机和自燃指令序列。",
                    "Phase_Merged": "测试"
                },
                {
                    "Phase": "补丁和维护",
                    "Description": "修补操作系统以避免运行停机和自燃类型的指令序列，或者减轻由意外行为造成的损害。参见[REF-1108]。",
                    "Description_Merged": "修补操作系统以避免运行停机和自燃类型的指令序列，或者减轻由意外行为造成的损害。参见[REF-1108]。",
                    "Phase_Merged": "补丁和维护"
                }
            ]
        }
    },
    {
        "ID": "1282",
        "Name": "Assumed-Immutable Data is Stored in Writable Memory",
        "Description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "All immutable code or data should be programmed into ROM or write-once memory.",
                    "Description_Merged": "All immutable code or data should be programmed into ROM or write-once memory.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "不可变数据，例如第一阶段引导程序、设备标识符和\"只写一次\"的配置设置被存储在可重编程或可在现场更新的可写内存中。",
        "Name_ZH": "不变数据存储在可写内存中",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "所有不可变的代码或数据应编程到ROM或一次写入的存储器中。",
                    "Description_Merged": "所有不可变的代码或数据应编程到ROM或一次写入的存储器中。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1283",
        "Name": "Mutable Attestation or Measurement Reporting Data",
        "Description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "p": "Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent."
                    },
                    "Description_Merged": "Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "用于验证引导流程的认证或测量报告数据的寄存器内容可以被对手修改。",
        "Name_ZH": "可变的证明或测量报告数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "p": "测量数据应存储在只读寄存器中，或以其他方式具有访问控制，以防止受不可信代理的修改。"
                    },
                    "Description_Merged": "测量数据应存储在只读寄存器中，或以其他方式具有访问控制，以防止受不可信代理的修改。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1284",
        "Name": "Improper Validation of Specified Quantity in Input",
        "Description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收预期指定数量（如大小或长度）的输入，但未验证或错误验证数量是否具有所需属性。",
        "Name_ZH": "对输入中指定数量的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1285",
        "Name": "Improper Validation of Specified Index, Position, or Offset in Input",
        "Description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收预期指定可索引资源（如缓冲区或文件）的索引、位置或偏移量的输入，但未验证或错误验证指定的索引/位置/偏移量是否具有所需属性。",
        "Name_ZH": "对输入中指定索引、位置或偏移的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1286",
        "Name": "Improper Validation of Syntactic Correctness of Input",
        "Description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收预期符合特定语法的输入，但未验证或错误验证输入是否符合语法。",
        "Name_ZH": "对输入的语法正确性的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1287",
        "Name": "Improper Validation of Specified Type of Input",
        "Description": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收预期为特定类型的输入，但未验证或错误验证输入是否实际上是预期的类型。",
        "Name_ZH": "对输入中指定类型的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1288",
        "Name": "Improper Validation of Consistency within Input",
        "Description": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收包含多个元素或字段且这些元素或字段必须相互一致的复杂输入，但未验证或错误验证输入是否实际上是一致的。",
        "Name_ZH": "对输入中一致性的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1289",
        "Name": "Improper Validation of Unsafe Equivalence in Input",
        "Description": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": {
                        "p": [
                            "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
                            "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
                            "Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "产品接收用作资源标识符或其他类型引用的输入值，但未验证或错误验证输入是否等同于潜在不安全的值。",
        "Name_ZH": "对输入中不安全等价性的不正确验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "@_Mitigation_ID": "MIT-5",
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": {
                        "p": [
                            "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。",
                            "在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。",
                            "不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。"
                        ]
                    },
                    "Effectiveness": "High",
                    "Description_Merged": "假设所有输入均是恶意的。使用“接受已知良好”输入验证策略，即使用严格符合规范的可接受输入列表。拒绝任何不严格符合规范的输入，或将其转换为符合规范的内容。\n在执行输入验证时，考虑所有可能相关的属性，包括长度、输入类型、可接受值的完整范围、缺少或多余的输入、语法、相关字段之间的一致性以及符合业务规则。作为业务规则逻辑的示例，“boat”在语法上是有效的，因为它只包含字母数字字符，但如果期望输入只包含像“red”或“blue”这样的颜色，则它是无效的。\n不要仅仅依赖于查找恶意或格式错误的输入。这很可能会漏掉至少一个不受欢迎的输入，特别是如果代码的环境发生变化。这将给攻击者足够的空间来绕过预期的验证。然而，拒绝列表可以用于检测潜在攻击或确定哪些输入是如此格式错误以至于应该被直接拒绝的。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1290",
        "Name": "Incorrect Decoding of Security Identifiers",
        "Description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Security identifier decoders must be reviewed for design consistency and common weaknesses.",
                    "Description_Merged": "Security identifier decoders must be reviewed for design consistency and common weaknesses.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
                    "Description_Merged": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品实现了一个解码机制，用于将某些总线事务信号解码为安全标识符。如果解码实现不正确，那么不受信任的代理人现在可以未经授权访问资产。",
        "Name_ZH": "安全标识符的解码不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "安全标识符解码器必须经过设计一致性和常见弱点的审查。",
                    "Description_Merged": "安全标识符解码器必须经过设计一致性和常见弱点的审查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在前硅和后硅测试中必须测试访问和编程流程，以检查此漏洞。",
                    "Description_Merged": "在前硅和后硅测试中必须测试访问和编程流程，以检查此漏洞。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1291",
        "Name": "Public Key Re-Use for Signing both Debug and Production Code",
        "Description": "The same public key is used for signing both debug and production code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Use different keys for Production and Debug",
                    "Description_Merged": "Use different keys for Production and Debug",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "相同的公钥用于对调试和生产代码进行签名。",
        "Name_ZH": "公钥在调试和生产代码上重复使用签名",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "在生产和调试中使用不同的密钥。",
                    "Description_Merged": "在生产和调试中使用不同的密钥。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1292",
        "Name": "Incorrect Conversion of Security Identifiers",
        "Description": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses.",
                    "Description_Merged": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing.",
                    "Description_Merged": "Access and programming flows must be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品实现了一个转换机制，用于将某些总线事务信号映射到安全标识符。然而，如果转换实现不正确，不受信任的代理人可以未经授权访问资产。",
        "Name_ZH": "安全标识符的转换不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "安全标识符解码器必须经过设计不一致性和常见弱点的审查。",
                    "Description_Merged": "安全标识符解码器必须经过设计不一致性和常见弱点的审查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "必须在前硅和后硅测试中测试访问和编程流程。",
                    "Description_Merged": "必须在前硅和后硅测试中测试访问和编程流程。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1293",
        "Name": "Missing Source Correlation of Multiple Independent Data",
        "Description": "The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources.",
                    "Description_Merged": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures.",
                    "Description_Merged": "Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品依赖于一个数据源，无法检测到对手是否已经入侵了数据源。",
        "Name_ZH": "多个独立数据的源关联丢失",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "设计系统使用一种实用的拜占庭容错方法，从多个源请求信息以验证数据并报告潜在的受损信息来源。",
                    "Description_Merged": "设计系统使用一种实用的拜占庭容错方法，从多个源请求信息以验证数据并报告潜在的受损信息来源。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "实施",
                    "Description": "请求数据时未使用实用的拜占庭容错方法。缺乏报告潜在受损的信息来源的地方。依赖非独立的信息来源进行完整性检查。未报告少数回应事故响应程序的信息来源。",
                    "Description_Merged": "请求数据时未使用实用的拜占庭容错方法。缺乏报告潜在受损的信息来源的地方。依赖非独立的信息来源进行完整性检查。未报告少数回应事故响应程序的信息来源。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1294",
        "Name": "Insecure Security Identifier Mechanism",
        "Description": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.",
                    "Description_Merged": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing.",
                    "Description_Merged": "Access and programming flows must be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "片上系统（SoC）实现了一个安全标识符机制，用于区分当事务来自实体时所允许或禁止的操作。然而，安全标识符没有正确实现。",
        "Name_ZH": "不安全的安全标识符机制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "安全标识符解码器必须经过设计不一致性和常见弱点的审查。",
                    "Description_Merged": "安全标识符解码器必须经过设计不一致性和常见弱点的审查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "必须在前硅和后硅测试中测试访问和编程流程。",
                    "Description_Merged": "必须在前硅和后硅测试中测试访问和编程流程。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1295",
        "Name": "Debug Messages Revealing Unnecessary Information",
        "Description": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
                    "Description_Merged": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品未能充分防止在调试信息中泄露不必要且可能敏感的系统信息。",
        "Name_ZH": "调试信息泄露不必要的信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保调试消息在调试过程中不透露任何不必要的信息，以满足预期的响应。",
                    "Description_Merged": "确保调试消息在调试过程中不透露任何不必要的信息，以满足预期的响应。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1296",
        "Name": "Incorrect Chaining or Granularity of Debug Components",
        "Description": "The product's debug components contain incorrect chaining or granularity of debug components.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
                    "Description_Merged": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品的调试组件包含了错误的调试组件链或粒度。",
        "Name_ZH": "调试组件的链接或粒度不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保调试组件正确连接，并在不同的认证级别上保持其粒度。",
                    "Description_Merged": "确保调试组件正确连接，并在不同的认证级别上保持其粒度。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1297",
        "Name": "Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
        "Description": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "ul": {
                            "li": [
                                "Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an \"unlock device\" request comes, it only unlocks that specific part and not all the parts for that product line.",
                                "Ensure that the product's non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT.",
                                "Arrange to secure all communication between an OSAT facility and the chipmaker."
                            ]
                        }
                    },
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an \"unlock device\" request comes, it only unlocks that specific part and not all the parts for that product line.\nEnsure that the product's non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT.\nArrange to secure all communication between an OSAT facility and the chipmaker.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "产品未能充分保护设备上的机密信息，使其不被外包的半导体装配和测试（OSAT）供应商访问。",
        "Name_ZH": "操作系统和OSAT供应商可以访问设备上的未受保护的机密信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "ul": {
                            "li": [
                                "确保当OSAT供应商被允许访问预生产和退货零件所需的测试接口时，该供应商只提取最小的必要信息。此外，在产品架构中，当出现“解锁设备”请求时，只解锁特定的零件，而不是所有该产品线的零件。",
                                "确保在将产品交给OSAT之前，对产品的非易失性存储器（NVM）进行清除，以清除所有机密信息和秘密。",
                                "安排保护OSAT工厂和芯片制造商之间所有通信的安全性。"
                            ]
                        }
                    },
                    "Effectiveness": "Moderate",
                    "Description_Merged": "确保当OSAT供应商被允许访问预生产和退货零件所需的测试接口时，该供应商只提取最小的必要信息。此外，在产品架构中，当出现“解锁设备”请求时，只解锁特定的零件，而不是所有该产品线的零件。\n确保在将产品交给OSAT之前，对产品的非易失性存储器（NVM）进行清除，以清除所有机密信息和秘密。\n安排保护OSAT工厂和芯片制造商之间所有通信的安全性。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1298",
        "Name": "Hardware Logic Contains Race Conditions",
        "Description": "A race condition in the hardware logic results in undermining security guarantees of the system.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.",
                    "Description_Merged": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents.",
                    "Description_Merged": "Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "硬件逻辑中的竞态条件破坏了系统的安全保证。",
        "Name_ZH": "硬件逻辑包含竞态条件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "采用设计实践，鼓励设计人员识别和消除竞态条件，例如卡诺图，可以减少竞态条件的发生。",
                    "Description_Merged": "采用设计实践，鼓励设计人员识别和消除竞态条件，例如卡诺图，可以减少竞态条件的发生。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "可以在安全关键路径上实施逻辑冗余以防止竞态条件。为了避免亚稳态，通常最好将默认状态设置为安全状态，即不向不受信任的代理商提供访问权限。",
                    "Description_Merged": "可以在安全关键路径上实施逻辑冗余以防止竞态条件。为了避免亚稳态，通常最好将默认状态设置为安全状态，即不向不受信任的代理商提供访问权限。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1299",
        "Name": "Missing Protection Mechanism for Alternate Hardware Interface",
        "Description": "The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Protect assets from accesses against all potential interfaces and alternate paths.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "对访问控制保护资产的备用路径（例如未受保护的阴影寄存器和其他外部面向的无保护接口）缺乏保护措施，允许攻击者绕过仅针对主路径执行的现有保护措施来访问资产。",
        "Name_ZH": "备用硬件接口缺少保护机制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "保护资产免受对所有潜在接口和备用路径的访问。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1300",
        "Name": "Improper Protection of Physical Side Channels",
        "Description": "The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
                    "Description_Merged": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.",
                    "Description_Merged": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该设备不包含足够的保护机制，以防止物理侧信道泄露敏感信息，原因是物理可观察现象（如功耗变化、电磁辐射或声学辐射）中的模式。",
        "Name_ZH": "不正确保护物理侧信道",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对加密算法的实现应用模糊化或掩码技术。",
                    "Description_Merged": "对加密算法的实现应用模糊化或掩码技术。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "为设备添加屏蔽或防篡改保护，增加侧信道测量的难度。",
                    "Description_Merged": "为设备添加屏蔽或防篡改保护，增加侧信道测量的难度。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1301",
        "Name": "Insufficient or Incomplete Data Removal within Hardware Component",
        "Description": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
                    "Description_Merged": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Alter the method of erasure, add protection of media, or destroy the media to protect the data.",
                    "Description_Merged": "Alter the method of erasure, add protection of media, or destroy the media to protect the data.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品的数据删除过程无法完全删除硬件组件中的所有数据和潜在敏感信息。",
        "Name_ZH": "硬件组件内部存在不足或不完整的数据清除",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对加密算法的实现应用模糊化或掩码技术。",
                    "Description_Merged": "对加密算法的实现应用模糊化或掩码技术。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "改变擦除方法，添加媒体保护，或销毁媒体以保护数据。",
                    "Description_Merged": "改变擦除方法，添加媒体保护，或销毁媒体以保护数据。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1302",
        "Name": "Missing Security Identifier",
        "Description": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Transaction details must be reviewed for design inconsistency and common weaknesses.",
                    "Description_Merged": "Transaction details must be reviewed for design inconsistency and common weaknesses.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
                    "Description_Merged": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "产品实现了一种安全标识符机制，用于区分事务源自实体时允许或禁止的操作。但是某个事务发送时没有安全标识符。",
        "Name_ZH": "缺少安全标识符",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "必须对交易详细信息进行审查，以查找设计不一致性和常见弱点。",
                    "Description_Merged": "必须对交易详细信息进行审查，以查找设计不一致性和常见弱点。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "必须在硅前和硅后测试中对安全标识符的定义和编程流程进行测试。",
                    "Description_Merged": "必须在硅前和硅后测试中对安全标识符的定义和编程流程进行测试。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1303",
        "Name": "Non-Transparent Sharing of Microarchitectural Resources",
        "Description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
                    "Description_Merged": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Requirements",
                    "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
                    "Description_Merged": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
                    "Phase_Merged": "Requirements"
                }
            ]
        },
        "Description_ZH": "硬件结构在执行上下文之间共享（如缓存和分支预测器），可能会违反上下文之间预期的架构隔离。",
        "Name_ZH": "微架构资源的非透明共享",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "可以使用硬件和软件混合的缓和技术来解决微架构隐蔽通道问题。这些技术包括分区缓存、新的屏障和刷新指令，以及禁用高分辨率性能计数器和定时器。",
                    "Description_Merged": "可以使用硬件和软件混合的缓和技术来解决微架构隐蔽通道问题。这些技术包括分区缓存、新的屏障和刷新指令，以及禁用高分辨率性能计数器和定时器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "需求",
                    "Description": "可以使用硬件和软件混合的缓和技术来解决微架构隐蔽通道问题。这些技术包括分区缓存、新的屏障和刷新指令，以及禁用高分辨率性能计数器和定时器。",
                    "Description_Merged": "可以使用硬件和软件混合的缓和技术来解决微架构隐蔽通道问题。这些技术包括分区缓存、新的屏障和刷新指令，以及禁用高分辨率性能计数器和定时器。",
                    "Phase_Merged": "需求"
                }
            ]
        }
    },
    {
        "ID": "1304",
        "Name": "Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
        "Description": "The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration.",
                    "Description_Merged": "Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Integration",
                    "Description": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
                    "Description_Merged": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
                    "Phase_Merged": "Integration"
                },
                {
                    "Phase": "Integration",
                    "Description": "Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP's configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP.",
                    "Description_Merged": "Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP's configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "产品执行了一次电源保留/恢复操作，但未确保在操作开始和结束之间维护和/或验证配置状态的完整性。",
        "Name_ZH": "在电源节能/恢复操作期间未正确保留硬件配置状态的完整性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在IP内部，通过加入对配置状态的完整性检查，使用加密散列算法。该散列值可以在IP内部受到保护，例如存储在永不断电的内部寄存器中。在关机之前，IP对配置进行散列计算，并将其保存在这些持久寄存器中。在恢复时，IP对保存的配置进行散列计算，并将其与保存的散列值进行比较。如果不匹配，则IP不应信任该配置。",
                    "Description_Merged": "在IP内部，通过加入对配置状态的完整性检查，使用加密散列算法。该散列值可以在IP内部受到保护，例如存储在永不断电的内部寄存器中。在关机之前，IP对配置进行散列计算，并将其保存在这些持久寄存器中。在恢复时，IP对保存的配置进行散列计算，并将其与保存的散列值进行比较。如果不匹配，则IP不应信任该配置。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "集成",
                    "Description": "在IP外部，通过一个可信代理对配置状态进行完整性检查。在关机之前，可信代理对配置进行散列计算，并将散列值保存在持久存储中。在恢复时，IP请求可信代理验证其当前配置。如果配置散列值无效，则IP不应信任该配置。",
                    "Description_Merged": "在IP外部，通过一个可信代理对配置状态进行完整性检查。在关机之前，可信代理对配置进行散列计算，并将散列值保存在持久存储中。在恢复时，IP请求可信代理验证其当前配置。如果配置散列值无效，则IP不应信任该配置。",
                    "Phase_Merged": "集成"
                },
                {
                    "Phase": "集成",
                    "Description": "在IP外部，加入一个受保护的环境，防止未经授权的代理对配置状态进行不可检测的修改。在关机之前，可信代理将IP的配置状态保存在仅其具有特权的受保护位置中。在恢复时，可信代理将保存的状态加载到IP中。",
                    "Description_Merged": "在IP外部，加入一个受保护的环境，防止未经授权的代理对配置状态进行不可检测的修改。在关机之前，可信代理将IP的配置状态保存在仅其具有特权的受保护位置中。在恢复时，可信代理将保存的状态加载到IP中。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1310",
        "Name": "Missing Ability to Patch ROM Code",
        "Description": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Secure patch support to allow ROM code to be patched on the next boot.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"",
                    "Description_Merged": "Secure patch support to allow ROM code to be patched on the next boot.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"",
                    "Description_Merged": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "缺少修补ROM代码的能力可能会使系统或片上系统（SoC）处于脆弱状态。",
        "Name_ZH": "无法修补ROM代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "支持安全的补丁支持，允许在下次启动时对ROM代码进行补丁。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"",
                    "Description_Merged": "支持安全的补丁支持，允许在下次启动时对ROM代码进行补丁。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "支持通过硬件熔断器在现场或制造过程中进行编程的补丁。这个功能可以用于在设备出货后进行有限的设备补丁，或者用于下一批次的硅芯片制造，而无需更改整个设备的ROM。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"",
                    "Description_Merged": "支持通过硬件熔断器在现场或制造过程中进行编程的补丁。这个功能可以用于在设备出货后进行有限的设备补丁，或者用于下一批次的硅芯片制造，而无需更改整个设备的ROM。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1311",
        "Name": "Improper Translation of Security Attributes by Fabric Bridge",
        "Description": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.",
                    "Description_Merged": "The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.",
                    "Description_Merged": "Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "当将一个织物协议转换为另一个时，桥梁错误地将安全属性从可信转换为不可信或从不可信转换为可信。",
        "Name_ZH": "织物桥不正确翻译安全属性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "翻译必须使信号映射，以使不可信任的代理无法映射到可信任的代理，反之亦然。",
                    "Description_Merged": "翻译必须使信号映射，以使不可信任的代理无法映射到可信任的代理，反之亦然。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "确保翻译使信号映射，以使不可信任的代理无法映射到可信任的代理，反之亦然。",
                    "Description_Merged": "确保翻译使信号映射，以使不可信任的代理无法映射到可信任的代理，反之亦然。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1312",
        "Name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
        "Description": "The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
                    "Description_Merged": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
                    "Description_Merged": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "芯片中的防火墙保护主要寻址区域，但不保护任何镜像内存或内存映射IO（MMIO）区域。",
        "Name_ZH": "芯片上织物防火墙中镜像区域缺少保护",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "Fabric防火墙应该对镜像区域应用与原始区域相同的保护措施。",
                    "Description_Merged": "Fabric防火墙应该对镜像区域应用与原始区域相同的保护措施。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "Fabric防火墙应该对镜像区域应用与原始区域相同的保护措施。",
                    "Description_Merged": "Fabric防火墙应该对镜像区域应用与原始区域相同的保护措施。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1313",
        "Name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
        "Description": "During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Description_Merged": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Description_Merged": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Integration",
                    "Description": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Description_Merged": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "在运行时，硬件允许激活测试或调试逻辑（功能），从而改变硬件的状态。这个功能可以改变系统的预期行为，并允许对手窃取和篡改敏感数据。",
        "Name_ZH": "硬件允许在运行时激活测试或调试逻辑",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Description_Merged": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Description_Merged": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "集成",
                    "Description": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Description_Merged": "限制硬件在何时可以激活测试或调试功能。例如，在正常操作模式下，不允许激活允许访问这些功能的特权模式。配置硬件只能在启动或配置阶段等时机进入测试或调试模式。结果是在正常运行时禁用这些测试/调试功能和相关模式。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1314",
        "Name": "Missing Write Protection for Parametric Data Values",
        "Description": "The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.",
                    "Effectiveness": "High",
                    "Description_Merged": "Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "该设备未对传感器参数数据值进行写保护，导致不可信软件可以操纵表面结果，并可能损坏硬件或导致操作故障。",
        "Name_ZH": "对参数数据值缺少写保护",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "传感器模块的访问控制应确保只允许可信软件更改阈值限制和传感器参数数据。",
                    "Effectiveness": "High",
                    "Description_Merged": "传感器模块的访问控制应确保只允许可信软件更改阈值限制和传感器参数数据。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1315",
        "Name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
        "Description": "The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Description_Merged": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Description_Merged": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Description_Merged": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
                    "Phase_Merged": "System Configuration"
                }
            ]
        },
        "Description_ZH": "总线控制器使得终端设备中的位能够允许响应设备控制总线上的事务。",
        "Name_ZH": "在终端设备中不正确设置总线控制能力",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Description_Merged": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Description_Merged": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "系统配置",
                    "Description": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Description_Merged": "对于响应设备，必须默认将总线控制能力的寄存器位设置为0。在安全引导流程中不应设置该位。同时，对该寄存器的写操作必须进行访问保护，以防止恶意修改以获取总线控制能力。",
                    "Phase_Merged": "系统配置"
                }
            ]
        }
    },
    {
        "ID": "1316",
        "Name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
        "Description": "The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.",
                    "Description_Merged": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.",
                    "Description_Merged": "Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Testing",
                    "Description": "Validate mitigation actions with robust testing.",
                    "Description_Merged": "Validate mitigation actions with robust testing.",
                    "Phase_Merged": "Testing"
                }
            ]
        },
        "Description_ZH": "芯片上的总线地址映射存在受保护区域和非受保护区域的重叠，使得攻击者可以绕过对受保护区域重叠部分的访问控制。",
        "Name_ZH": "允许对受保护和未受保护范围进行未经授权的重叠编程的地址映射",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在设计芯片的地址映射时，确保受保护和不受保护的范围相互隔离且不重叠。在设计过程中，确保在寄存器传输级别（RTL）中硬编码的范围不重叠。",
                    "Description_Merged": "在设计芯片的地址映射时，确保受保护和不受保护的范围相互隔离且不重叠。在设计过程中，确保在寄存器传输级别（RTL）中硬编码的范围不重叠。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "固件配置的范围不应重叠。如果由于诸如寄存器数量有限的限制而必须重叠，则确保重叠部分没有任何资产。",
                    "Description_Merged": "固件配置的范围不应重叠。如果由于诸如寄存器数量有限的限制而必须重叠，则确保重叠部分没有任何资产。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "测试",
                    "Description": "通过强大的测试来验证缓解措施的有效性。",
                    "Description_Merged": "通过强大的测试来验证缓解措施的有效性。",
                    "Phase_Merged": "测试"
                }
            ]
        }
    },
    {
        "ID": "1317",
        "Name": "Improper Access Control in Fabric Bridge",
        "Description": "The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
                    "Description_Merged": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
                    "Description_Merged": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个总线桥来在两个知识产权（IP）块之间进行事务，但该桥没有正确执行这些IP块之间的预期特权、身份或其他访问控制检查。",
        "Name_ZH": "在织物桥中存在不正确的访问控制",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保设计中包含对上游和下游事务的桥接访问控制检查。",
                    "Description_Merged": "确保设计中包含对上游和下游事务的桥接访问控制检查。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "对上游和下游事务在桥接中实施访问控制检查。",
                    "Description_Merged": "对上游和下游事务在桥接中实施访问控制检查。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1318",
        "Name": "Missing Support for Security Features in On-chip Fabrics or Buses",
        "Description": "On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric. Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features.",
                    "Description_Merged": "If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric. Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "芯片上的总线或总线没有支持或配置支持特权分离或其他安全特性，例如访问控制。",
        "Name_ZH": "芯片内织物或总线缺少安全功能支持",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "如果总线不支持安全特性，在桥接或任何位于主控和总线之间的组件中实施安全检查。或者，将所有没有安全资产的总线从组件连接到一个不支持安全特性的总线上，并将具有安全资产的外设连接到支持安全特性的另一个总线上。",
                    "Description_Merged": "如果总线不支持安全特性，在桥接或任何位于主控和总线之间的组件中实施安全检查。或者，将所有没有安全资产的总线从组件连接到一个不支持安全特性的总线上，并将具有安全资产的外设连接到支持安全特性的另一个总线上。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1319",
        "Name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
        "Description": "The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "1. Redundancy - By replicating critical operations and comparing the two outputs can help indicate whether a fault has been injected.",
                                "2. Error detection and correction codes - Gay, Mael, et al. proposed a new scheme that not only detects faults injected by a malicious adversary but also automatically corrects single nibble/byte errors introduced by low-multiplicity faults.",
                                "3. Fail by default coding - When checking conditions (switch or if) check all possible cases and fail by default because the default case in a switch (or the else part of a cascaded if-else-if construct) is used for dealing with the last possible (and valid) value without checking. This is prone to fault injection because this alternative is easily selected as a result of potential data manipulation [REF-1141].",
                                "4. Random Behavior - adding random delays before critical operations, so that timing is not predictable.",
                                "5. Program Flow Integrity Protection - The program flow can be secured by integrating run-time checking aiming at detecting control flow inconsistencies. One such example is tagging the source code to indicate the points not to be bypassed [REF-1147].",
                                "6. Sensors - Usage of sensors can detect variations in voltage and current.",
                                "7. Shields - physical barriers to protect the chips from malicious manipulation."
                            ]
                        }
                    },
                    "Description_Merged": "1. Redundancy - By replicating critical operations and comparing the two outputs can help indicate whether a fault has been injected.\n2. Error detection and correction codes - Gay, Mael, et al. proposed a new scheme that not only detects faults injected by a malicious adversary but also automatically corrects single nibble/byte errors introduced by low-multiplicity faults.\n3. Fail by default coding - When checking conditions (switch or if) check all possible cases and fail by default because the default case in a switch (or the else part of a cascaded if-else-if construct) is used for dealing with the last possible (and valid) value without checking. This is prone to fault injection because this alternative is easily selected as a result of potential data manipulation [REF-1141].\n4. Random Behavior - adding random delays before critical operations, so that timing is not predictable.\n5. Program Flow Integrity Protection - The program flow can be secured by integrating run-time checking aiming at detecting control flow inconsistencies. One such example is tagging the source code to indicate the points not to be bypassed [REF-1147].\n6. Sensors - Usage of sensors can detect variations in voltage and current.\n7. Shields - physical barriers to protect the chips from malicious manipulation.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该设备容易受到电磁故障注入攻击，导致设备内部信息泄漏或绕过安全机制。",
        "Name_ZH": "未恰当保护免受电磁故障注入（EM-FI）的攻击",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": {
                        "ul": {
                            "li": [
                                "1. 冗余性 - 通过复制关键操作并比较两个输出，可以帮助指示是否注入了故障。",
                                "2. 错误检测和纠正码 - Gay, Mael等人提出了一种新的方案，不仅可以检测恶意对手注入的故障，还可以自动纠正由低重复度故障引入的单个nibble/字节错误。",
                                "3. 默认失败编码 - 在检查条件（switch或if）时，检查所有可能的情况并默认失败，因为在switch语句的默认情况（或级联if-else-if结构的else部分）中被用于处理最后可能的（且有效的）值而无需检查。这容易受到故障注入的影响，因为由于潜在数据操纵的结果，这种选择很容易被选中[REF-1141]。",
                                "4. 随机行为 - 在关键操作之前添加随机延迟，以使时序不可预测。",
                                "5. 程序流完整性保护 - 可通过集成运行时检查来保护程序流，以便检测控制流的不一致。一个例子是通过标记源代码来指示不得绕过的点[REF-1147]。",
                                "6. 传感器 - 使用传感器可以检测电压和电流的变化。",
                                "7. 防护罩 - 用于保护芯片免受恶意操作的物理屏障。"
                            ]
                        }
                    },
                    "Description_Merged": "1. 冗余性 - 通过复制关键操作并比较两个输出，可以帮助指示是否注入了故障。\n2. 错误检测和纠正码 - Gay, Mael等人提出了一种新的方案，不仅可以检测恶意对手注入的故障，还可以自动纠正由低重复度故障引入的单个nibble/字节错误。\n3. 默认失败编码 - 在检查条件（switch或if）时，检查所有可能的情况并默认失败，因为在switch语句的默认情况（或级联if-else-if结构的else部分）中被用于处理最后可能的（且有效的）值而无需检查。这容易受到故障注入的影响，因为由于潜在数据操纵的结果，这种选择很容易被选中[REF-1141]。\n4. 随机行为 - 在关键操作之前添加随机延迟，以使时序不可预测。\n5. 程序流完整性保护 - 可通过集成运行时检查来保护程序流，以便检测控制流的不一致。一个例子是通过标记源代码来指示不得绕过的点[REF-1147]。\n6. 传感器 - 使用传感器可以检测电压和电流的变化。\n7. 防护罩 - 用于保护芯片免受恶意操作的物理屏障。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1320",
        "Name": "Improper Protection for Outbound Error Messages and Alert Signals",
        "Description": "Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
                    "Description_Merged": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "不受信任的代理可以禁用有关超过限制的信号条件或处理此类警报的响应机制。",
        "Name_ZH": "未适当保护出站错误消息和警报信号",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "由关键事件生成的警报信号应受到不可信代理的访问保护。只有硬件或可信的固件模块才能够更改警报配置。",
                    "Description_Merged": "由关键事件生成的警报信号应受到不可信代理的访问保护。只有硬件或可信的固件模块才能够更改警报配置。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1321",
        "Name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
        "Description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this can mitigate this weakness completely, other methods are recommended when possible, especially in components used by upstream software (\"libraries\").",
                    "Description_Merged": "By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
                    "Effectiveness": "High",
                    "Description_Merged": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "When handling untrusted objects, validating using a schema can be used.",
                    "Effectiveness": "Limited",
                    "Description_Merged": "When handling untrusted objects, validating using a schema can be used.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.",
                    "Effectiveness": "High",
                    "Description_Merged": "By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品接收来自上游组件的输入，该输入指定了要在对象中初始化或更新的属性，但它没有正确控制对对象原型属性的修改。",
        "Name_ZH": "不正确控制对象原型属性的修改（“原型污染”）",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "通过首先冻结对象原型（例如，Object.freeze(Object.prototype)），可以防止修改原型。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "While this can mitigate this weakness completely, other methods are recommended when possible, especially in components used by upstream software (\"libraries\").",
                    "Description_Merged": "通过首先冻结对象原型（例如，Object.freeze(Object.prototype)），可以防止修改原型。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "通过阻止解析为对象原型的属性的修改，例如proto或prototype，可以减轻此弱点。",
                    "Effectiveness": "High",
                    "Description_Merged": "通过阻止解析为对象原型的属性的修改，例如proto或prototype，可以减轻此弱点。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "在处理不可信对象时，可以使用模式验证来进行验证。",
                    "Effectiveness": "Limited",
                    "Description_Merged": "在处理不可信对象时，可以使用模式验证来进行验证。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Description": "通过使用没有原型的对象（通过Object.create(null)），通过访问特殊属性来添加对象原型属性将变为不可能，从而减轻此漏洞。",
                    "Effectiveness": "High",
                    "Description_Merged": "通过使用没有原型的对象（通过Object.create(null)），通过访问特殊属性来添加对象原型属性将变为不可能，从而减轻此漏洞。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "在大多数情况下，可以使用Map来代替对象。如果使用Map方法而不是对象属性，则无法访问对象原型或修改它。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "在大多数情况下，可以使用Map来代替对象。如果使用Map方法而不是对象属性，则无法访问对象原型或修改它。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1322",
        "Name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
        "Description": "The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Generally speaking, blocking calls should be replaced with non-blocking alternatives that can be used asynchronously. Expensive computations should be passed off to worker threads, although the correct approach depends on the framework being used.",
                    "Description_Merged": "Generally speaking, blocking calls should be replaced with non-blocking alternatives that can be used asynchronously. Expensive computations should be passed off to worker threads, although the correct approach depends on the framework being used.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
                    "Description_Merged": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用了一个依赖于单线程处理的非阻塞模型，用于可扩展性等功能，但其中包含可能在调用时阻塞的代码。",
        "Name_ZH": "在单线程、非阻塞的上下文中使用阻塞代码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "一般来说，应该用非阻塞的替代方法来替代阻塞调用，以便可以异步使用。昂贵的计算应该交给工作线程处理，但正确的方法取决于使用的框架。",
                    "Description_Merged": "一般来说，应该用非阻塞的替代方法来替代阻塞调用，以便可以异步使用。昂贵的计算应该交给工作线程处理，但正确的方法取决于使用的框架。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "对于昂贵的计算，考虑将其分解为多个小的计算。请参考所使用框架的文档以获取指导。",
                    "Description_Merged": "对于昂贵的计算，考虑将其分解为多个小的计算。请参考所使用框架的文档以获取指导。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1323",
        "Name": "Improper Management of Sensitive Trace Data",
        "Description": "Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace.",
                    "Description_Merged": "Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "从系统芯片（SoC）上的几个来源收集的跟踪数据存储在未受保护的位置或传输给不受信任的代理。",
        "Name_ZH": "未适当管理敏感跟踪数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "标记跟踪以指示需要访问该跟踪的所有者和调试特权级别（设计师、OEM或终端用户）。",
                    "Description_Merged": "标记跟踪以指示需要访问该跟踪的所有者和调试特权级别（设计师、OEM或终端用户）。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1324",
        "Name": "DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface",
        "Description": "This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "此条目已被废弃，因为它的抽象级别低于CWE所支持的级别。所有相关内容已整合到CWE-319中。",
        "Name_ZH": "不推荐使用：物理探测JTAG接口可以访问敏感信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1325",
        "Name": "Improperly Controlled Sequential Memory Allocation",
        "Description": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.",
                    "Description_Merged": "Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Operation",
                    "Description": "Run the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
                    "Description_Merged": "Run the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
                    "Phase_Merged": "Operation"
                }
            ]
        },
        "Description_ZH": "该产品管理一组对象或资源，并为每个对象执行单独的内存分配，但没有正确限制所有组合对象消耗的总内存量。",
        "Name_ZH": "未适当控制的顺序内存分配",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "确保正确跟踪同一类型对象的多个分配 - 可能跨多个会话、请求或消息。为超过限制的请求定义适当的处理策略，并考虑支持配置选项，以便管理员可以根据需要扩展内存使用量。",
                    "Description_Merged": "确保正确跟踪同一类型对象的多个分配 - 可能跨多个会话、请求或消息。为超过限制的请求定义适当的处理策略，并考虑支持配置选项，以便管理员可以根据需要扩展内存使用量。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "操作",
                    "Description": "使用系统提供的内存资源限制运行程序。这可能会导致程序崩溃或退出，但对系统的影响将最小化。",
                    "Description_Merged": "使用系统提供的内存资源限制运行程序。这可能会导致程序崩溃或退出，但对系统的影响将最小化。",
                    "Phase_Merged": "操作"
                }
            ]
        }
    },
    {
        "ID": "1326",
        "Name": "Missing Immutable Root of Trust in Hardware",
        "Description": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.",
                    "Description_Merged": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.",
                    "Description_Merged": "During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "硬件中缺少不可变的根信任，导致可以绕过安全启动或执行不受信任或对抗性的引导代码。",
        "Name_ZH": "硬件缺少不可变的根信任",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在架构系统时，应指定RoT用于存储在不允许进一步编程/写入的内存中。",
                    "Description_Merged": "在架构系统时，应指定RoT用于存储在不允许进一步编程/写入的内存中。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在实施和测试期间，应证明RoT内存位置不允许进一步编程/写入。",
                    "Description_Merged": "在实施和测试期间，应证明RoT内存位置不允许进一步编程/写入。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1327",
        "Name": "Binding to an Unrestricted IP Address",
        "Description": "The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "System Configuration",
                    "Description": "Assign IP addresses that are not 0.0.0.0.",
                    "Effectiveness": "High",
                    "Description_Merged": "Assign IP addresses that are not 0.0.0.0.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "Phase": "System Configuration",
                    "Strategy": "Firewall",
                    "Description": "Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
                    "Effectiveness": "High",
                    "Description_Merged": "Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
                    "Phase_Merged": "System Configuration",
                    "Strategy_Merged": "Firewall"
                }
            ]
        },
        "Description_ZH": "该产品为数据库服务器、云服务/实例或任何远程通信的计算资源分配地址0.0.0.0。",
        "Name_ZH": "绑定到不受限制的IP地址",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "系统配置",
                    "Description": "分配非0.0.0.0的IP地址。",
                    "Effectiveness": "High",
                    "Description_Merged": "分配非0.0.0.0的IP地址。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "Phase": "系统配置",
                    "Strategy": "防火墙",
                    "Description": "不需要的连接到配置的服务器可以通过防火墙或其他数据包过滤措施拒绝。",
                    "Effectiveness": "High",
                    "Description_Merged": "不需要的连接到配置的服务器可以通过防火墙或其他数据包过滤措施拒绝。",
                    "Phase_Merged": "系统配置",
                    "Strategy_Merged": "防火墙"
                }
            ]
        }
    },
    {
        "ID": "1328",
        "Name": "Security Version Number Mutable to Older Versions",
        "Description": "Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
                    "Description_Merged": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
                    "Description_Merged": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "硬件中的安全版本号是可变的，导致可以回退（回滚）引导固件到存在漏洞的代码版本。",
        "Name_ZH": "安全版本号可变为旧版本",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "在系统架构中，应将安全版本数据指定为存储在只读寄存器或具有访问控制以防止不受信任代理修改的寄存器。",
                    "Description_Merged": "在系统架构中，应将安全版本数据指定为存储在只读寄存器或具有访问控制以防止不受信任代理修改的寄存器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "在实施和测试过程中，应验证安全版本数据是否为只读，并验证访问控制。",
                    "Description_Merged": "在实施和测试过程中，应验证安全版本数据是否为只读，并验证访问控制。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1329",
        "Name": "Reliance on Component That is Not Updateable",
        "Description": "The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Specify requirements that each component should be updateable, including ROM, firmware, etc.",
                    "Description_Merged": "Specify requirements that each component should be updateable, including ROM, firmware, etc.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.",
                    "Description_Merged": "Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"  Hardware-fuse-based patches will also have limitations in terms of size and the number of patches that can be supported.",
                    "Description_Merged": "With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Implement the necessary functionality to allow each component to be updated.",
                    "Description_Merged": "Implement the necessary functionality to allow each component to be updated.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品包含一个无法更新或修补以消除漏洞或重大错误的组件。",
        "Name_ZH": "依赖于不可更新的组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "明确要求每个组件都可以更新，包括ROM、固件等。",
                    "Description_Merged": "明确要求每个组件都可以更新，包括ROM、固件等。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计产品以允许其组件的更新。包括可能需要支持更新的外部基础设施，例如分发服务器。",
                    "Description_Merged": "设计产品以允许其组件的更新。包括可能需要支持更新的外部基础设施，例如分发服务器。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "对于硬件，支持可以通过硬件保险丝在现场或在制造过程中进行编程的补丁。此功能可用于在发货后有限地修补设备，或者用于制造下一批硅芯片设备，而无需更改完整的设备ROM。",
                    "Effectiveness": "Moderate",
                    "Effectiveness_Notes": "Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"  Hardware-fuse-based patches will also have limitations in terms of size and the number of patches that can be supported.",
                    "Description_Merged": "对于硬件，支持可以通过硬件保险丝在现场或在制造过程中进行编程的补丁。此功能可用于在发货后有限地修补设备，或者用于制造下一批硅芯片设备，而无需更改完整的设备ROM。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Description": "实现必要的功能，以允许每个组件进行更新。",
                    "Description_Merged": "实现必要的功能，以允许每个组件进行更新。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1330",
        "Name": "Remanent Data Readable after Memory Erase",
        "Description": "Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": {
                        "ul": {
                            "li": [
                                "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content.",
                                "Support for cryptographic erase in self-encrypting, memory devices.",
                                "External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM).",
                                "Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use."
                            ]
                        }
                    },
                    "Description_Merged": "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content.\nSupport for cryptographic erase in self-encrypting, memory devices.\nExternal, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM).\nPhysical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "在被清除或擦除后，存储在内存电路中的机密信息仍然可读或可恢复。",
        "Name_ZH": "内存擦除后可读取残留数据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": {
                        "ul": {
                            "li": [
                                "支持应用多个循环的已知模式覆写内存和擦除实际内容的安全擦除命令。",
                                "支持自加密内存设备中的密码擦除。",
                                "使用紫外线擦除电可擦式可编程只读存储器（EEPROM）等外部物理工具来擦除内存。",
                                "物理破坏媒体设备。这是为了重新使用或报废的设备，不再使用。"
                            ]
                        }
                    },
                    "Description_Merged": "支持应用多个循环的已知模式覆写内存和擦除实际内容的安全擦除命令。\n支持自加密内存设备中的密码擦除。\n使用紫外线擦除电可擦式可编程只读存储器（EEPROM）等外部物理工具来擦除内存。\n物理破坏媒体设备。这是为了重新使用或报废的设备，不再使用。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1331",
        "Name": "Improper Isolation of Shared Resources in Network On Chip (NoC)",
        "Description": "The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
                    "Description_Merged": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "网络芯片（NoC）未对其芯片内部资源进行隔离或错误地进行隔离，使其在受信任和不受信任的代理之间共享，从而创建了时序通道。",
        "Name_ZH": "不适当隔离网络芯片（NoC）中的共享资源",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在网络通信中实施基于优先级的仲裁，并为从可信代理传输机密数据设置专用缓冲区或虚拟通道。",
                    "Description_Merged": "在网络通信中实施基于优先级的仲裁，并为从可信代理传输机密数据设置专用缓冲区或虚拟通道。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1332",
        "Name": "Improper Handling of Faults that Lead to Instruction Skips",
        "Description": "The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges.",
                    "Description_Merged": "Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Design strategies for ensuring safe behavior if instructions attempt to be skipped.",
                    "Description_Merged": "Design strategies for ensuring safe behavior if instructions attempt to be skipped.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion.",
                    "Description_Merged": "Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable.",
                    "Description_Merged": "Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use redundant operations or canaries to detect and respond to faults.",
                    "Description_Merged": "Use redundant operations or canaries to detect and respond to faults.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring.",
                    "Description_Merged": "Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "设备缺少或错误地实现了用于检测和缓解安全关键CPU指令跳过的电路或传感器。",
        "Name_ZH": "处理导致指令跳过的故障不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "设计策略以确保输入（如Vcc）在可接受范围内进行修改时的安全故障。",
                    "Description_Merged": "设计策略以确保输入（如Vcc）在可接受范围内进行修改时的安全故障。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "设计策略以确保在尝试跳过指令时的安全行为。",
                    "Description_Merged": "设计策略以确保在尝试跳过指令时的安全行为。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "识别应在发现故障时清除的关键机密，并设计一种机制进行删除。",
                    "Description_Merged": "识别应在发现故障时清除的关键机密，并设计一种机制进行删除。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "通过多次执行操作（在空间或时间上）并进行多数投票来增加冗余。此外，使条件指令的时序不可预测。",
                    "Description_Merged": "通过多次执行操作（在空间或时间上）并进行多数投票来增加冗余。此外，使条件指令的时序不可预测。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用冗余操作或哨兵来检测和响应故障。",
                    "Description_Merged": "使用冗余操作或哨兵来检测和响应故障。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "确保故障缓解在实践中足够强大。例如，如果指令计数器已经进行了进展且没有其他CPU活动发生，则需要50个时钟周期才能在较低电压下触发的低功耗检测机制可能不足以作为安全机制。",
                    "Description_Merged": "确保故障缓解在实践中足够强大。例如，如果指令计数器已经进行了进展且没有其他CPU活动发生，则需要50个时钟周期才能在较低电压下触发的低功耗检测机制可能不足以作为安全机制。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1333",
        "Name": "Inefficient Regular Expression Complexity",
        "Description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
        "Likelihood_Of_Exploit": "High",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "This is one of the few effective solutions when using user-provided regular expressions.",
                    "Description_Merged": "Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "System Configuration",
                    "Description": "Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.",
                    "Phase_Merged": "System Configuration"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.",
                    "Effectiveness": "High",
                    "Description_Merged": "Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Limit the length of the input that the regular expression will process.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "Limit the length of the input that the regular expression will process.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用一个具有低效、可能呈指数最坏情况计算复杂度的正则表达式，消耗过多的CPU周期。",
        "Name_ZH": "正则表达式复杂度低效",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "使用不支持回溯的正则表达式，例如通过删除嵌套量词。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "This is one of the few effective solutions when using user-provided regular expressions.",
                    "Description_Merged": "使用不支持回溯的正则表达式，例如通过删除嵌套量词。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "系统配置",
                    "Description": "在正则表达式实现的配置中设置回溯限制，例如PHP的pcre.backtrack_limit。还要考虑进程的执行时间限制。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "在正则表达式实现的配置中设置回溯限制，例如PHP的pcre.backtrack_limit。还要考虑进程的执行时间限制。",
                    "Phase_Merged": "系统配置"
                },
                {
                    "Phase": "实施",
                    "Description": "不要使用不可信任的输入进行正则表达式操作。如果必须使用正则表达式，请避免在表达式中使用回溯。",
                    "Effectiveness": "High",
                    "Description_Merged": "不要使用不可信任的输入进行正则表达式操作。如果必须使用正则表达式，请避免在表达式中使用回溯。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "限制正则表达式处理的输入长度。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "限制正则表达式处理的输入长度。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1334",
        "Name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
        "Description": "An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.",
                    "Description_Merged": "Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.",
                    "Description_Merged": "Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Integration",
                    "Description": "Add an access control layer atop any unprotected interfaces for injecting errors.",
                    "Description_Merged": "Add an access control layer atop any unprotected interfaces for injecting errors.",
                    "Phase_Merged": "Integration"
                }
            ]
        },
        "Description_ZH": "未经授权的代理可以向冗余块中注入错误，以剥夺系统的冗余性或将系统置于降级操作模式中。",
        "Name_ZH": "未经授权的错误注入可能降低硬件冗余性",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "确保设计不允许在用于正常运行时操作的模式中注入错误。为注入错误的接口提供访问控制。",
                    "Description_Merged": "确保设计不允许在用于正常运行时操作的模式中注入错误。为注入错误的接口提供访问控制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "禁止在用于正常运行时操作的模式中注入错误。为注入错误的接口提供访问控制。",
                    "Description_Merged": "禁止在用于正常运行时操作的模式中注入错误。为注入错误的接口提供访问控制。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "集成",
                    "Description": "在任何未受保护的接口上添加访问控制层，以防止注入错误。",
                    "Description_Merged": "在任何未受保护的接口上添加访问控制层，以防止注入错误。",
                    "Phase_Merged": "集成"
                }
            ]
        }
    },
    {
        "ID": "1335",
        "Name": "Incorrect Bitwise Shift of Integer",
        "Description": "An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Implicitly or explicitly add checks and mitigation for negative or over-shift values.",
                    "Description_Merged": "Implicitly or explicitly add checks and mitigation for negative or over-shift values.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "指定的整数值被负数或大于等于该值包含的位数的数量进行了移位操作，导致出现意外或不确定的结果。",
        "Name_ZH": "错误的整数位移操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "隐式或显式添加对负值或超出范围值的检查和缓解措施。",
                    "Description_Merged": "隐式或显式添加对负值或超出范围值的检查和缓解措施。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1336",
        "Name": "Improper Neutralization of Special Elements Used in a Template Engine",
        "Description": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.",
                    "Description_Merged": "Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use the template engine's sandbox or restricted mode, if available.",
                    "Description_Merged": "Use the template engine's sandbox or restricted mode, if available.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用模板引擎来插入或处理外部影响的输入，但它没有中和或不正确地中和可以在引擎处理时被解释为模板表达式或其他代码指令的特殊元素或语法。",
        "Name_ZH": "未适当中和模板引擎中使用的特殊元素",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "选择一个提供沙箱或受限模式的模板引擎，或者至少限制可用表达式、函数调用或命令的权限。",
                    "Description_Merged": "选择一个提供沙箱或受限模式的模板引擎，或者至少限制可用表达式、函数调用或命令的权限。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "如果可用，使用模板引擎的沙箱或受限模式。",
                    "Description_Merged": "如果可用，使用模板引擎的沙箱或受限模式。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1338",
        "Name": "Improper Protections Against Hardware Overheating",
        "Description": "A hardware device is missing or has inadequate protection features to prevent overheating.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.",
                    "Description_Merged": "Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": "Implementation",
                    "Description": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
                    "Description_Merged": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "硬件设备缺少或具有不足的保护功能，无法防止过热。",
        "Name_ZH": "不适当防护硬件过热",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "应使用硅内和平台级的热传感器来强制执行温度的最大和最小限制。",
                    "Description_Merged": "应使用硅内和平台级的热传感器来强制执行温度的最大和最小限制。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": "实施",
                    "Description": "平台应支持冷却解决方案，如可根据设备运行需求调节的风扇，以保持稳定的温度。",
                    "Description_Merged": "平台应支持冷却解决方案，如可根据设备运行需求调节的风扇，以保持稳定的温度。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1339",
        "Name": "Insufficient Precision or Accuracy of a Real Number",
        "Description": "The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Implementation",
                        "Patching and Maintenance"
                    ],
                    "Description": "The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.",
                    "Description_Merged": "The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.",
                    "Phase_Merged": "Implementation / Patching and Maintenance"
                }
            ]
        },
        "Description_ZH": "该产品处理一个实数，其实现在其小数部分不保留所需的准确性和精度，导致结果不正确。",
        "Name_ZH": "实数精度或准确度不足",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "实施",
                        "补丁和维护"
                    ],
                    "Description": "开发人员或维护人员可以转向更准确表示实数的方法。在极端情况下，程序员可以使用BigInts的比例来表示实数，从而实现极高的精度。程序员还可以使用Unum实数的概念。必须对这种改变的内存和CPU权衡进行审查。由于浮点实数在许多产品和许多位置中被使用，它们被实现为硬件，大多数格式的更改将导致计算被移动到软件中，从而使产品变慢。",
                    "Description_Merged": "开发人员或维护人员可以转向更准确表示实数的方法。在极端情况下，程序员可以使用BigInts的比例来表示实数，从而实现极高的精度。程序员还可以使用Unum实数的概念。必须对这种改变的内存和CPU权衡进行审查。由于浮点实数在许多产品和许多位置中被使用，它们被实现为硬件，大多数格式的更改将导致计算被移动到软件中，从而使产品变慢。",
                    "Phase_Merged": "实施 / 补丁和维护"
                }
            ]
        }
    },
    {
        "ID": "1341",
        "Name": "Multiple Releases of Same Resource or Handle",
        "Description": "The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
                    "Description_Merged": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Refactoring",
                    "Description": "It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.",
                    "Description_Merged": "It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Refactoring"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Refactoring",
                    "Description": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Refactoring"
                }
            ]
        },
        "Description_ZH": "该产品在关闭操作之间没有成功打开，尝试关闭或释放资源或句柄多次。",
        "Name_ZH": "同一资源或句柄的多次发布",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "修改代码逻辑，使资源只关闭一次。这可能需要简化或重构。在小的代码块中，这种修复可以很简单，但是当多个关闭操作嵌在复杂的条件中时，可能会更困难。",
                    "Description_Merged": "修改代码逻辑，使资源只关闭一次。这可能需要简化或重构。在小的代码块中，这种修复可以很简单，但是当多个关闭操作嵌在复杂的条件中时，可能会更困难。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Strategy": "重构",
                    "Description": "可以实施一个标志，当资源打开时设置为1，关闭时清除为0，并在关闭之前进行检查。当存在多种不同情况需要执行关闭操作时，这种方法很有用。然而，标志跟踪会增加代码的复杂性，并需要程序员的认真遵守。",
                    "Description_Merged": "可以实施一个标志，当资源打开时设置为1，关闭时清除为0，并在关闭之前进行检查。当存在多种不同情况需要执行关闭操作时，这种方法很有用。然而，标志跟踪会增加代码的复杂性，并需要程序员的认真遵守。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "重构"
                },
                {
                    "Phase": "实施",
                    "Strategy": "重构",
                    "Description": "在关闭资源时，将资源的关联变量设置为NULL或相应语言的等效值。某些API会忽略这个空值而不会引发错误。对于其他API，这可能导致应用程序崩溃或异常，但这仍然可能比损坏意外资源（如内存或数据）更可取。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "在关闭资源时，将资源的关联变量设置为NULL或相应语言的等效值。某些API会忽略这个空值而不会引发错误。对于其他API，这可能导致应用程序崩溃或异常，但这仍然可能比损坏意外资源（如内存或数据）更可取。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "重构"
                }
            ]
        }
    },
    {
        "ID": "1342",
        "Name": "Information Exposure through Microarchitectural State after Transient Execution",
        "Description": "The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Architecture and Design",
                        "Requirements"
                    ],
                    "Description": "Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Being implemented in silicon it is expected to fully address the known weaknesses with limited performance impact.",
                    "Description_Merged": "Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.",
                    "Phase_Merged": "Architecture and Design / Requirements"
                },
                {
                    "Phase": "Build and Compilation",
                    "Description": "Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "This effectively forces the processor to complete each memory access before moving on to the next operation. This may have a large performance impact.",
                    "Description_Merged": "Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.",
                    "Phase_Merged": "Build and Compilation"
                }
            ]
        },
        "Description_ZH": "处理器在不正确的微码辅助或推测执行之后没有正确清除微架构状态，导致瞬态执行。",
        "Name_ZH": "瞬态执行后通过微体系结构状态暴露信息",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "架构与设计",
                        "需求"
                    ],
                    "Description": "硬件确保在微架构级别不存在非法数据从故障微操作中流出。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "Being implemented in silicon it is expected to fully address the known weaknesses with limited performance impact.",
                    "Description_Merged": "硬件确保在微架构级别不存在非法数据从故障微操作中流出。",
                    "Phase_Merged": "架构与设计 / 需求"
                },
                {
                    "Phase": "构建和编译",
                    "Description": "在软件与微架构元素的交互中，包含明确删除不必要计算的指令，例如lfence、sfence、mfence、clflush。",
                    "Effectiveness": "High",
                    "Effectiveness_Notes": "This effectively forces the processor to complete each memory access before moving on to the next operation. This may have a large performance impact.",
                    "Description_Merged": "在软件与微架构元素的交互中，包含明确删除不必要计算的指令，例如lfence、sfence、mfence、clflush。",
                    "Phase_Merged": "构建和编译"
                }
            ]
        }
    },
    {
        "ID": "1351",
        "Name": "Improper Handling of Hardware Behavior in Exceptionally Cold Environments",
        "Description": "A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Description": "The system should account for security primitive behavior when cooled outside standard temperatures.",
                    "Description_Merged": "The system should account for security primitive behavior when cooled outside standard temperatures.",
                    "Phase_Merged": "Architecture and Design"
                }
            ]
        },
        "Description_ZH": "硬件设备或其上运行的固件缺少或具有不正确的保护功能，无法在低于标准操作温度时维持安全原语的目标。",
        "Name_ZH": "在极寒环境中处理硬件行为不正确",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Description": "当在标准温度范围之外冷却时，系统应考虑安全原语的行为。",
                    "Description_Merged": "当在标准温度范围之外冷却时，系统应考虑安全原语的行为。",
                    "Phase_Merged": "架构与设计"
                }
            ]
        }
    },
    {
        "ID": "1357",
        "Name": "Reliance on Insufficiently Trustworthy Component",
        "Description": "The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Requirements",
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.",
                    "Description_Merged": "For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.",
                    "Phase_Merged": "Requirements / Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Integration",
                        "Manufacturing"
                    ],
                    "Description": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"",
                    "Description_Merged": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"",
                    "Phase_Merged": "Architecture and Design / Implementation / Integration / Manufacturing"
                },
                {
                    "Phase": [
                        "Operation",
                        "Patching and Maintenance"
                    ],
                    "Description": "Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.",
                    "Description_Merged": "Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.",
                    "Phase_Merged": "Operation / Patching and Maintenance"
                }
            ]
        },
        "Description_ZH": "该产品由多个独立组件构建，但使用了一个不足以满足安全性、可靠性、可更新性和可维护性期望的组件。",
        "Name_ZH": "依赖于不足可信度的组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "需求",
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "对于每个组件，确保其供应链受到良好控制，子层供应商使用最佳实践。对于第三方软件组件（如库），确保它们由信誉良好的供应商开发和积极维护。",
                    "Description_Merged": "对于每个组件，确保其供应链受到良好控制，子层供应商使用最佳实践。对于第三方软件组件（如库），确保它们由信誉良好的供应商开发和积极维护。",
                    "Phase_Merged": "需求 / 架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "集成",
                        "制造"
                    ],
                    "Description": "为产品的所有组件和子组件保持物料清单。对于软件，保持软件物料清单（SBOM）。根据[REF-1247]，\"SBOM是一份正式的、可机读的软件组件和依赖关系清单，包含有关这些组件及其层次关系的信息\"。",
                    "Description_Merged": "为产品的所有组件和子组件保持物料清单。对于软件，保持软件物料清单（SBOM）。根据[REF-1247]，\"SBOM是一份正式的、可机读的软件组件和依赖关系清单，包含有关这些组件及其层次关系的信息\"。",
                    "Phase_Merged": "架构与设计 / 实施 / 集成 / 制造"
                },
                {
                    "Phase": [
                        "操作",
                        "补丁和维护"
                    ],
                    "Description": "继续监视产品各个组件的变化，特别是当变化表明存在新的漏洞、终止生命周期（EOL）计划、影响可信性的供应商实践等情况时。",
                    "Description_Merged": "继续监视产品各个组件的变化，特别是当变化表明存在新的漏洞、终止生命周期（EOL）计划、影响可信性的供应商实践等情况时。",
                    "Phase_Merged": "操作 / 补丁和维护"
                }
            ]
        }
    },
    {
        "ID": "1384",
        "Name": "Improper Handling of Physical or Environmental Conditions",
        "Description": "The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.",
                    "Description_Merged": "In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.",
                    "Description_Merged": "Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.",
                    "Description_Merged": "Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                }
            ]
        },
        "Description_ZH": "该产品未正确处理自然发生或人为诱导的意外物理或环境条件。",
        "Name_ZH": "处理物理或环境条件不当",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "在需求中，明确产品在超出物理和环境边界条件时的性能表现期望，例如通过关闭来实现。",
                    "Description_Merged": "在需求中，明确产品在超出物理和环境边界条件时的性能表现期望，例如通过关闭来实现。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在可能的情况下，包含能够检测超额环境条件并具备关闭产品能力的独立组件。",
                    "Description_Merged": "在可能的情况下，包含能够检测超额环境条件并具备关闭产品能力的独立组件。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "在可能的情况下，使用屏蔽或其他材料以增加对手的工作量，并降低成功触发安全相关故障的可能性。",
                    "Description_Merged": "在可能的情况下，使用屏蔽或其他材料以增加对手的工作量，并降低成功触发安全相关故障的可能性。",
                    "Phase_Merged": "架构与设计 / 实施"
                }
            ]
        }
    },
    {
        "ID": "1385",
        "Name": "Missing Origin Validation in WebSockets",
        "Description": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Description": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.",
                    "Description_Merged": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a randomized CSRF token to verify requests.",
                    "Description_Merged": "Use a randomized CSRF token to verify requests.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'.",
                    "Description_Merged": "Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation"
                    ],
                    "Description": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.",
                    "Description_Merged": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.",
                    "Phase_Merged": "Architecture and Design / Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.",
                    "Phase_Merged": "Implementation"
                },
                {
                    "Phase": "Implementation",
                    "Description": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
                    "Description_Merged": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
                    "Phase_Merged": "Implementation"
                }
            ]
        },
        "Description_ZH": "该产品使用WebSocket，但没有正确验证数据或通信源的有效性。",
        "Name_ZH": "WebSockets中缺少原始验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Description": "通过在WebSocket握手期间验证\"Origin\"头部来启用类似CORS的访问限制。",
                    "Description_Merged": "通过在WebSocket握手期间验证\"Origin\"头部来启用类似CORS的访问限制。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用随机的CSRF令牌来验证请求。",
                    "Description_Merged": "使用随机的CSRF令牌来验证请求。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用TLS进行安全通信，使用'wss'（WebSocket Secure）而不是'ws'。",
                    "Description_Merged": "使用TLS进行安全通信，使用'wss'（WebSocket Secure）而不是'ws'。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施"
                    ],
                    "Description": "要求在WebSocket连接建立之前进行用户身份验证。例如，在Node中的WS库中有一个'verifyClient'函数。",
                    "Description_Merged": "要求在WebSocket连接建立之前进行用户身份验证。例如，在Node中的WS库中有一个'verifyClient'函数。",
                    "Phase_Merged": "架构与设计 / 实施"
                },
                {
                    "Phase": "实施",
                    "Description": "利用速率限制来防止DoS攻击。使用漏桶算法可以帮助实现此目标。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "利用速率限制来防止DoS攻击。使用漏桶算法可以帮助实现此目标。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "使用提供有效载荷大小限制的库。例如，Node中的WS库包括可以设置的'maxPayload'选项。",
                    "Effectiveness": "Defense in Depth",
                    "Description_Merged": "使用提供有效载荷大小限制的库。例如，Node中的WS库包括可以设置的'maxPayload'选项。",
                    "Phase_Merged": "实施"
                },
                {
                    "Phase": "实施",
                    "Description": "将数据/输入视为不可信，并应用与XSS、SQLi等相同的数据/输入消毒方法。",
                    "Description_Merged": "将数据/输入视为不可信，并应用与XSS、SQLi等相同的数据/输入消毒方法。",
                    "Phase_Merged": "实施"
                }
            ]
        }
    },
    {
        "ID": "1386",
        "Name": "Insecure Operation on Windows Junction / Mount Point",
        "Description": "The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Architecture and Design",
                    "Strategy": "Separation of Privilege",
                    "Description": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
                    "Description_Merged": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
                    "Phase_Merged": "Architecture and Design",
                    "Strategy_Merged": "Separation of Privilege"
                }
            ]
        },
        "Description_ZH": "该产品打开文件或目录，但未能正确防止名称与目标关联为超出预期控制范围的联接或挂载点。",
        "Name_ZH": "在Windows联接/挂载点上执行不安全操作",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "架构与设计",
                    "Strategy": "权限分离",
                    "Description": "设计具有不同权限的软件时，应该检查与之交互的文件是否是不适当的硬链接或挂载点。在Windows中，可以使用以下命令中嵌入的功能来实现： \"dir /al /s /b\" 或者在PowerShell中使用LinkType作为过滤器。此外，一些软件使用签名验证进行身份验证，以确保使用的文件是正确的文件。将文件操作与检查操作同时进行，否则可能引入TOCTOU弱点（CWE-367）。",
                    "Description_Merged": "设计具有不同权限的软件时，应该检查与之交互的文件是否是不适当的硬链接或挂载点。在Windows中，可以使用以下命令中嵌入的功能来实现： \"dir /al /s /b\" 或者在PowerShell中使用LinkType作为过滤器。此外，一些软件使用签名验证进行身份验证，以确保使用的文件是正确的文件。将文件操作与检查操作同时进行，否则可能引入TOCTOU弱点（CWE-367）。",
                    "Phase_Merged": "架构与设计",
                    "Strategy_Merged": "权限分离"
                }
            ]
        }
    },
    {
        "ID": "1389",
        "Name": "Incorrect Parsing of Numbers with Different Radices",
        "Description": "The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Implementation",
                    "Strategy": "Enforcement by Conversion",
                    "Description": "If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.",
                    "Description_Merged": "If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Enforcement by Conversion"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.",
                    "Description_Merged": "If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                },
                {
                    "Phase": "Implementation",
                    "Strategy": "Input Validation",
                    "Description": "If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched.",
                    "Description_Merged": "If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched.",
                    "Phase_Merged": "Implementation",
                    "Strategy_Merged": "Input Validation"
                }
            ]
        },
        "Description_ZH": "该产品解析数值输入时假设为十进制（十进制）值，但未考虑使用不同基数（进制）的输入。",
        "Name_ZH": "不正确解析具有不同基数的数字",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "实施",
                    "Strategy": "通过转换进行强制执行",
                    "Description": "如果应用程序只期望使用十进制值，应该以防止检查八进制或十六进制字符串的方式创建条件检查。可以通过在条件检查之前将任何数值字符串转换为显式的十进制整数来实现，以防止八进制或十六进制值被检查条件。",
                    "Description_Merged": "如果应用程序只期望使用十进制值，应该以防止检查八进制或十六进制字符串的方式创建条件检查。可以通过在条件检查之前将任何数值字符串转换为显式的十进制整数来实现，以防止八进制或十六进制值被检查条件。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "通过转换进行强制执行"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "如果需要支持各种数值基数，请检查是否存在指示所需非十进制基数的前导值（例如0x表示十六进制），并将数值字符串转换为相应基数的整数。拒绝任何意外支持的其他基数字符串。",
                    "Description_Merged": "如果需要支持各种数值基数，请检查是否存在指示所需非十进制基数的前导值（例如0x表示十六进制），并将数值字符串转换为相应基数的整数。拒绝任何意外支持的其他基数字符串。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                },
                {
                    "Phase": "实施",
                    "Strategy": "输入验证",
                    "Description": "如果使用正则表达式验证IP地址，请确保使用^和$进行边界限定，以防止匹配以基数前缀开头的IP地址。",
                    "Description_Merged": "如果使用正则表达式验证IP地址，请确保使用^和$进行边界限定，以防止匹配以基数前缀开头的IP地址。",
                    "Phase_Merged": "实施",
                    "Strategy_Merged": "输入验证"
                }
            ]
        }
    },
    {
        "ID": "1390",
        "Name": "Weak Authentication",
        "Description": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用身份验证机制来限制特定用户或身份的访问，但机制未能充分证明所声明的身份是否正确。",
        "Name_ZH": "弱身份验证",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1391",
        "Name": "Use of Weak Credentials",
        "Description": "The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": []
        },
        "Description_ZH": "该产品使用弱凭证（如默认密钥或硬编码密码），攻击者可以计算、派生、重用或猜测。",
        "Name_ZH": "使用弱凭据",
        "Potential_Mitigations_ZH": {
            "Mitigation": []
        }
    },
    {
        "ID": "1392",
        "Name": "Use of Default Credentials",
        "Description": "The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Effectiveness": "High",
                    "Description_Merged": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Force the administrator to change the credential upon installation.",
                    "Effectiveness": "High",
                    "Description_Merged": "Force the administrator to change the credential upon installation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Installation",
                        "Operation"
                    ],
                    "Description": "The product administrator could change the defaults upon installation or during operation.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "The product administrator could change the defaults upon installation or during operation.",
                    "Phase_Merged": "Installation / Operation"
                }
            ]
        },
        "Description_ZH": "该产品对潜在关键功能使用默认凭证（如密码或加密密钥）。",
        "Name_ZH": "使用默认凭据",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Effectiveness": "High",
                    "Description_Merged": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "强制管理员在安装时更改凭据。",
                    "Effectiveness": "High",
                    "Description_Merged": "强制管理员在安装时更改凭据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "安装",
                        "操作"
                    ],
                    "Description": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Phase_Merged": "安装 / 操作"
                }
            ]
        }
    },
    {
        "ID": "1393",
        "Name": "Use of Default Password",
        "Description": "The product uses default passwords for potentially critical functionality.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Effectiveness": "High",
                    "Description_Merged": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Documentation",
                    "Description": "Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.",
                    "Effectiveness": "Limited",
                    "Description_Merged": "Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.",
                    "Phase_Merged": "Documentation"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Force the administrator to change the credential upon installation.",
                    "Effectiveness": "High",
                    "Description_Merged": "Force the administrator to change the credential upon installation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Installation",
                        "Operation"
                    ],
                    "Description": "The product administrator could change the defaults upon installation or during operation.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "The product administrator could change the defaults upon installation or during operation.",
                    "Phase_Merged": "Installation / Operation"
                }
            ]
        },
        "Description_ZH": "该产品对潜在关键功能使用默认密码。",
        "Name_ZH": "使用默认密码",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Effectiveness": "High",
                    "Description_Merged": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "文档",
                    "Description": "确保产品文档明确强调默认密码的存在，并提供管理员更改密码的步骤。",
                    "Effectiveness": "Limited",
                    "Description_Merged": "确保产品文档明确强调默认密码的存在，并提供管理员更改密码的步骤。",
                    "Phase_Merged": "文档"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "强制管理员在安装时更改凭据。",
                    "Effectiveness": "High",
                    "Description_Merged": "强制管理员在安装时更改凭据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "安装",
                        "操作"
                    ],
                    "Description": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Phase_Merged": "安装 / 操作"
                }
            ]
        }
    },
    {
        "ID": "1394",
        "Name": "Use of Default Cryptographic Key",
        "Description": "The product uses a default cryptographic key for potentially critical functionality.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": "Requirements",
                    "Description": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Effectiveness": "High",
                    "Description_Merged": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": "Architecture and Design",
                    "Description": "Force the administrator to change the credential upon installation.",
                    "Effectiveness": "High",
                    "Description_Merged": "Force the administrator to change the credential upon installation.",
                    "Phase_Merged": "Architecture and Design"
                },
                {
                    "Phase": [
                        "Installation",
                        "Operation"
                    ],
                    "Description": "The product administrator could change the defaults upon installation or during operation.",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "The product administrator could change the defaults upon installation or during operation.",
                    "Phase_Merged": "Installation / Operation"
                }
            ]
        },
        "Description_ZH": "该产品对潜在关键功能使用默认加密密钥。",
        "Name_ZH": "使用默认加密密钥",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": "需求",
                    "Description": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Effectiveness": "High",
                    "Description_Merged": "禁止使用默认值、硬编码值或对于产品每个安装不变的其他值，尤其是对于不同的组织。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": "架构与设计",
                    "Description": "强制管理员在安装时更改凭据。",
                    "Effectiveness": "High",
                    "Description_Merged": "强制管理员在安装时更改凭据。",
                    "Phase_Merged": "架构与设计"
                },
                {
                    "Phase": [
                        "安装",
                        "操作"
                    ],
                    "Description": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Effectiveness": "Moderate",
                    "Description_Merged": "产品管理员可以在安装过程中或在操作过程中更改默认值。",
                    "Phase_Merged": "安装 / 操作"
                }
            ]
        }
    },
    {
        "ID": "1395",
        "Name": "Dependency on Vulnerable Third-Party Component",
        "Description": "The product has a dependency on a third-party component that contains one or more known vulnerabilities.",
        "Likelihood_Of_Exploit": "",
        "Potential_Mitigations": {
            "Mitigation": [
                {
                    "Phase": [
                        "Requirements",
                        "Policy"
                    ],
                    "Description": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
                    "Description_Merged": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
                    "Phase_Merged": "Requirements / Policy"
                },
                {
                    "Phase": "Requirements",
                    "Description": "Require a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311].",
                    "Description_Merged": "Require a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311].",
                    "Phase_Merged": "Requirements"
                },
                {
                    "Phase": [
                        "Architecture and Design",
                        "Implementation",
                        "Integration",
                        "Manufacturing"
                    ],
                    "Description": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"",
                    "Description_Merged": "Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"",
                    "Phase_Merged": "Architecture and Design / Implementation / Integration / Manufacturing"
                },
                {
                    "Phase": [
                        "Operation",
                        "Patching and Maintenance"
                    ],
                    "Description": "Actively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch.",
                    "Description_Merged": "Actively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch.",
                    "Phase_Merged": "Operation / Patching and Maintenance"
                },
                {
                    "Phase": [
                        "Operation",
                        "Patching and Maintenance"
                    ],
                    "Description": "Continuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc.",
                    "Description_Merged": "Continuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc.",
                    "Phase_Merged": "Operation / Patching and Maintenance"
                }
            ]
        },
        "Description_ZH": "该产品依赖于包含一个或多个已知漏洞的第三方组件。",
        "Name_ZH": "依赖于存在漏洞的第三方组件",
        "Potential_Mitigations_ZH": {
            "Mitigation": [
                {
                    "Phase": [
                        "需求",
                        "策略"
                    ],
                    "Description": "在某些行业，如医疗保健[REF-1320] [REF-1322]或云技术[REF-1321]等，可能不清楚谁负责应用第三方漏洞的补丁：供应商、运营商/客户还是独立服务。澄清角色和责任对于在披露第三方漏洞时最小化混乱或不必要的延迟非常重要。",
                    "Description_Merged": "在某些行业，如医疗保健[REF-1320] [REF-1322]或云技术[REF-1321]等，可能不清楚谁负责应用第三方漏洞的补丁：供应商、运营商/客户还是独立服务。澄清角色和责任对于在披露第三方漏洞时最小化混乱或不必要的延迟非常重要。",
                    "Phase_Merged": "需求 / 策略"
                },
                {
                    "Phase": "需求",
                    "Description": "要求为产品的所有组件和子组件提供物料清单。对于软件，要求提供软件物料清单（SBOM）[REF-1247] [REF-1311]。",
                    "Description_Merged": "要求为产品的所有组件和子组件提供物料清单。对于软件，要求提供软件物料清单（SBOM）[REF-1247] [REF-1311]。",
                    "Phase_Merged": "需求"
                },
                {
                    "Phase": [
                        "架构与设计",
                        "实施",
                        "集成",
                        "制造"
                    ],
                    "Description": "为产品的所有组件和子组件保持物料清单。对于软件，保持软件物料清单（SBOM）。根据[REF-1247]，\"SBOM是一份正式的、可机读的软件组件和依赖关系清单，包含有关这些组件及其层次关系的信息\"。",
                    "Description_Merged": "为产品的所有组件和子组件保持物料清单。对于软件，保持软件物料清单（SBOM）。根据[REF-1247]，\"SBOM是一份正式的、可机读的软件组件和依赖关系清单，包含有关这些组件及其层次关系的信息\"。",
                    "Phase_Merged": "架构与设计 / 实施 / 集成 / 制造"
                },
                {
                    "Phase": [
                        "操作",
                        "补丁和维护"
                    ],
                    "Description": "积极监测第三方组件供应商发布的漏洞补丁；尽快修复第三方组件；并确保运营商/客户能够轻松获取并应用该补丁。",
                    "Description_Merged": "积极监测第三方组件供应商发布的漏洞补丁；尽快修复第三方组件；并确保运营商/客户能够轻松获取并应用该补丁。",
                    "Phase_Merged": "操作 / 补丁和维护"
                },
                {
                    "Phase": [
                        "操作",
                        "补丁和维护"
                    ],
                    "Description": "持续监测产品各个组件的变化，特别是当变化表明存在新的漏洞、产品即将终止生命周期计划等情况时。",
                    "Description_Merged": "持续监测产品各个组件的变化，特别是当变化表明存在新的漏洞、产品即将终止生命周期计划等情况时。",
                    "Phase_Merged": "操作 / 补丁和维护"
                }
            ]
        }
    }
]