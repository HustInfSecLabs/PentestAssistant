import {
  Button,
  Col,
  Drawer,
  FloatButton,
  Input,
  Row,
  Space,
  Tooltip,
  message,
  Flex,
  Modal,
  Progress,
  Divider
} from 'antd';
import {
  BulbOutlined,
  DeleteOutlined, EyeOutlined,
  LoadingOutlined,
  MessageOutlined,
  MoreOutlined, SecurityScanOutlined,
  SendOutlined
} from '@ant-design/icons';
import React, { useEffect, useRef, useState } from 'react';
import { observer } from 'mobx-react-lite';
import { useStore } from './store';
import moment from 'moment';
// import ScanAddProgress from '@/pages/Layout/Scan/ScanAddProgress';
import { useNavigate } from 'react-router-dom';

const MessageBubble = ({ message }) => {
  const justify = message.placement === 'left' ? 'start' : 'end';
  const backgroundColor = message.placement === 'left' ? 'rgb(247, 247, 247)' : 'rgb(231, 248, 255)';
  let messageDetails = JSON.stringify(message?.details ?? {}, null, 2);
  if (messageDetails === '{}') {
    messageDetails = '暂无';
  }

  const [modalOpen, setModalOpen] = useState(false);
  const [scanModalOpen, setScanModalOpen] = useState(false);
  const [taskStart, setTaskStart] = useState(false);
  const navigate = useNavigate();

  const onScanButtonClick = () => {
    setScanModalOpen(true);
    setTaskStart(true);
  };

  const onReportButtonClick = (scanId) => {
    navigate(`/reports/scan?taskId=${scanId}`);
  };

  return (
    <>
      <Row justify={justify}>
        <Col>
          <div style={{ fontSize: 14, color: '#999', margin: 2 }}>{message.sender}</div>
        </Col>
      </Row>
      <Row justify={justify} align='bottom'>
        {
          justify === 'end' &&
          <Col>
            <div style={{
              fontSize: 14,
              color: '#999',
              marginRight: 6
            }}>{moment(new Date(message.time).getTime()).format('HH:mm')}</div>
          </Col>
        }
        <Col style={{
          maxWidth: '80%'
        }}>
          <div style={{
            padding: 14,
            borderRadius: 14,
            backgroundColor,
            color: justify === 'start' ? '#000' : '#000',
            fontSize: 16,
            wordBreak: 'break-all',
            whiteSpace: 'pre-line'
          }}>
            {message.content}
          </div>
        </Col>
        {
          justify === 'start' && message.details &&
          <Col>
            <Flex vertical justify='center' align='center' style={{ height: '100%' }}>
              <div style={{ fontSize: 14, color: '#999', marginLeft: 6 }}>
                <Button size='small' shape='round'
                        icon={<MoreOutlined rotate={90}/>}
                        onClick={() => setModalOpen(true)}/>
              </div>
              <div style={{
                fontSize: 14,
                color: '#999',
                marginLeft: 6
              }}>{moment(new Date(message.time).getTime()).format('HH:mm')}</div>
            </Flex>
            <Modal
              open={modalOpen}
              onCancel={() => setModalOpen(false)}
              title='消息详情'
              footer={
                <Button key="modalOk" onClick={() => setModalOpen(false)}>返回</Button>
              }
            >
              <div style={{
                fontSize: 14,
                color: '#999',
                marginBottom: 6,
                wordBreak: 'break-all',
                whiteSpace: 'pre-line'
              }}>{messageDetails}</div>

            </Modal>
          </Col>
        }
      </Row>
      {
        justify === 'start' && message.scan &&
        <Row
          justify={justify}
          style={{ marginTop: 6 }}
        >
          <Col>
            <Flex vertical justify='center' align='center' style={{ height: '100%' }}>
              <div style={{ fontSize: 14, color: '#999', marginLeft: 6 }}>
                <Button size='small' shape='round' type='primary' ghost
                        icon={<SecurityScanOutlined/>}
                        onClick={onScanButtonClick}>
                  开启Web扫描任务
                </Button>
              </div>
            </Flex>
          </Col>
        </Row>
      }
      {
        justify === 'end' && message.report &&
        <Row
          justify={justify}
          style={{ marginTop: 6 }}
        >
          <Col>
            <Flex vertical justify='center' align='center' style={{ height: '100%' }}>
              <div style={{ fontSize: 14, color: '#999', marginLeft: 6 }}>
                <Button size='small' shape='round' type='primary' ghost
                        icon={<EyeOutlined/>}
                        onClick={() => onReportButtonClick(message.report.scanId)}>
                  查看扫描报告[{message.report.name}]
                </Button>
              </div>
            </Flex>
          </Col>
        </Row>
      }
    </>
  );
};

const MessageList = ({ messages, isTyping }) => {
  const addedMessage = [];
  if (isTyping) {
    addedMessage.push({
      placement: 'left',
      content: <LoadingOutlined/>,
      sender: 'PentestAssistant',
      time: new Date().toLocaleString()
    });
  }
  return (
    <Space style={{ width: '100%' }} direction='vertical' size='middle'>
      {[...messages, ...addedMessage].map((message, index) => <MessageBubble key={index} message={message}/>)}
    </Space>
  );
};

const AIHelper = () => {
  // const [localstorage, setLocalstorage] = useLocalStorage('AIHelper', {});

  const [open, setOpen] = useState(false);
  const [userMessage, setUserMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [messages, setMessages] = useState([{
    placement: 'left',
    content: '您好，有什么可以帮助您的吗？',
    sender: 'PentestAssistant',
    time: new Date().toLocaleString()
  }]);// Array: list of message objects

  const [status, setStatus] = useState({});
  const [localStorageGot, setLocalStorageGot] = useState(false);

  const { aiStore } = useStore();
  const chatContainerRef = useRef(null);

  const showDrawer = () => {
    setOpen(true);
  };

  const onClose = () => {
    setOpen(false);
  };

  const handleKeyDown = (e) => {
    if (e.ctrlKey && e.key === 'Enter') {
      onSendMessage();
    }
  };

  const setLocalstorage = () => {
    if (!localStorageGot) {
      return;
    }
    const data = { userMessage, isTyping, messages, status };
    localStorage.setItem('AIHelper', JSON.stringify(data));
  };

  const getLocalstorage = () => {
    try {
      const ls = JSON.parse(localStorage.getItem('AIHelper') ?? {});

      setUserMessage(ls?.userMessage ?? '');
      setIsTyping(false);
      setMessages(ls?.messages ?? []);
      setStatus(ls?.status ?? {});
    } catch (error) {
      message.info('未能读取本地缓存，PentestAssistant状态已重置');
    }
    setLocalStorageGot(true);
  };

  let statusInterval = null;

  const setStatusInterval = () => {
    const calculateProgress = (progress, newProgress) => {
      if (progress >= newProgress && progress - newProgress <= 9) {
        const addChance = 9 - (progress - newProgress);
        if (Math.random() * 20 < addChance) {
          return progress + 1;
        } else {
          return progress;
        }
      }
      if (newProgress === 100 || newProgress - progress < 5) {
        return newProgress;
      }
      const fakeProgess = Math.floor(progress + (newProgress - progress) * 0.3 + Math.random() * 5);
      return fakeProgess > newProgress ? newProgress : fakeProgess;
    };

    const intervalFunc = () => {
      aiStore.getStatus().then((res) => {
        setStatus((nowStatus) => {
          res.data.progress = calculateProgress(nowStatus?.data?.progress ?? 0, res?.data?.progress ?? 0);
          return res;
        });
        if (res?.data?.state === '成功' || res?.data?.state === '错误') {
          clearStatusInterval();
        }
      }).catch((err) => {
        message.error(err?.response?.data?.msg ?? err.message);
        clearStatusInterval();
      });
    };

    if (statusInterval === null) {
      statusInterval = setInterval(intervalFunc, 500);
      setStatus({
        code: 0,
        data: {
          progress: 0,
          reason: '',
          state: '开始',
          task: '任务初始化中……'
        },
        msg: '任务初始化中……'
      });
    }
  };

  const clearStatusInterval = () => {
    if (statusInterval !== null) {
      clearInterval(statusInterval);
      statusInterval = null;
    }
  };

  const onSendMessage = () => {
    if (isTyping) {
      message.warning('PentestAssistant正在处理前一个请求，请稍后再试');
      return;
    }
    if (userMessage) {
      setIsTyping(true);
      setMessages((messages) => [...messages, {
        placement: 'right',
        content: userMessage,
        sender: '',
        time: new Date().toLocaleString()
      }]);
      setUserMessage('');

      // 发送消息，接收回复
      setStatusInterval();
      aiStore.sendMessage(userMessage).then((res) => {
        if (res?.data?.code && res.data.code !== 0) {
          const codeRender = {
            1: '创建函数参数失败',
            2: '创建函数名失败',
            3: '创建函数格式失败',
            4: '补全函数失败',
            10: '执行函数调用失败',
            11: '执行参数失败',
            20: '查询失败',
            21: '检查BOT状态失败',
            22: '域名不存在'
          };
          setMessages((messages) => [...messages, {
            placement: 'left',
            content: `发生错误，错误原因：${codeRender[res.data.code] ?? '未知'}`,
            sender: 'PentestAssistant',
            time: new Date().toLocaleString(),
            details: res ?? {}
          }]);
        } else {
          let scan;
          if (res?.data?.host && res?.data?.configs) {
            scan = {
              name: 'AI自动生成的扫描任务："' + userMessage + '"',
              target: res.data.host.startsWith('http') ? res.data.host : 'http://' + res.data.host,
              profile: {
                name: 'AI自动生成的扫描配置',
                policies: res.data.configs.map((config) => (config.toUpperCase())).join(' | ')
              }
            };
          }
          setMessages((messages) => [...messages, {
            placement: 'left',
            content: res?.msg,
            sender: 'PentestAssistant',
            time: new Date().toLocaleString(),
            scan
            // details: res ?? {}
          }]);
        }
      }).catch((err) => {
        message.error(err?.response?.data?.msg ?? err.message);
        setMessages((messages) => [...messages, {
          placement: 'left',
          content: '发生错误，请点击详情按钮查看错误信息',
          sender: 'PentestAssistant',
          time: new Date().toLocaleString(),
          details: { error: err?.response?.data?.msg ?? err.message }
        }]);
      }).finally(() => {
        setIsTyping(false);
        clearStatusInterval();
      });
    }
  };

  const onSendSummary = (values) => {
    if (isTyping) {
      message.warning('WebSDS AI正在处理前一个请求，请稍后再试');
      return;
    }
    if (values.scanId && values.scanId !== '') {
      setIsTyping(true);
      setMessages((messages) => [...messages, {
        placement: 'right',
        content: `请帮我总结[${values.name}]的内容。`,
        sender: '',
        time: new Date().toLocaleString(),
        report: {
          name: values.name,
          scanId: values.scanId
        }
      }]);
      setStatusInterval();
      aiStore.getSummary(values).then((res) => {
        setMessages((messages) => [...messages, {
          placement: 'left',
          content: res?.msg,
          sender: 'PentestAssistant',
          time: new Date().toLocaleString()
          // details: res ?? {}
        }]);
      }).catch((err) => {
        message.error(err?.response?.data?.msg ?? err.message);
        setMessages((messages) => [...messages, {
          placement: 'left',
          content: '发生错误，请点击详情按钮查看错误信息',
          sender: 'PentestAssistant',
          time: new Date().toLocaleString(),
          details: { error: err?.response?.data?.msg ?? err.message }
        }]);
      }).finally(() => {
        aiStore.resetSummary();
        clearStatusInterval();
        setIsTyping(false);
      });
    }
  };

  const clearMessage = () => {
    setMessages([{
      placement: 'left',
      content: '您好，有什么可以帮助您的吗？',
      sender: 'PentestAssistant',
      time: new Date().toLocaleString()
    }]);
  };

  useEffect(() => {
    chatContainerRef?.current?.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });
  }, [messages]);

  useEffect(() => {
    // setStatusInterval();
    setTimeout(() => {
      getLocalstorage();
    }, 200);
    return () => {
      clearStatusInterval();
    };
  }, []);

  useEffect(() => {
    if (aiStore.reportData) {
      setOpen(true);
      onSendSummary(aiStore.reportData);
    }
  }, [aiStore.summarySignal]);

  useEffect(() => {
    setLocalstorage();
  }, [userMessage, isTyping, messages, status]);

  return (
    <>
      <Button type={'primary'} size={'large'} onClick={showDrawer} icon={<BulbOutlined/>}>开始使用</Button>
      <Drawer
        title={<Space><MessageOutlined/>PentestAssistant</Space>}
        placement={'right'}
        width={'100%'}
        onClose={onClose}
        open={open}
        extra={
          <Button type='primary' ghost icon={<DeleteOutlined/>} onClick={clearMessage}>清空</Button>
        }
        footer={
          <>
            <Row style={{
              marginTop: 10,
              marginBottom: 10,
              display: (isTyping && status?.data?.progress !== 100) ? '' : 'none'
            }}>
              <Col span={20}>
                <Progress percent={status?.data?.progress ?? 0}/>
                <div style={{ fontSize: 14, color: '#999', marginBottom: 6 }}>
                  {(status?.data?.task ?? '') + '……'}
                </div>
              </Col>
            </Row>

            <Row style={{
              marginTop: 10,
              marginBottom: 10,
              display: (isTyping && status?.data?.progress !== 100) ? 'none' : ''
            }}>
              <Col span={22}>
                <Input.TextArea
                  onKeyDown={handleKeyDown}
                  style={{ fontSize: 16 }}
                  placeholder='请输入聊天文字，Ctrl+Enter发送信息'
                  autoSize={{ minRows: 2, maxRows: 6 }}
                  value={userMessage}
                  onChange={(e) => setUserMessage(e.target.value)}
                />
              </Col>

              <Col span={2} style={{ padding: 10 }}>
                <Button style={{ marginLeft: 20, height: '100%' }} type='primary' size='large' icon={<SendOutlined/>}
                        onClick={onSendMessage}>发送</Button>
              </Col>
            </Row>
          </>
        }
      >
        <div ref={chatContainerRef}>
          <MessageList
            messages={messages}
            isTyping={isTyping}
          />

        </div>

      </Drawer>
    </>
  );
};

export default observer(AIHelper);
