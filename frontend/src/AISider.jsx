import {Layout, Menu} from 'antd';
import {Link, useLocation} from 'react-router-dom';
import {observer} from 'mobx-react-lite';
import React, {useEffect, useState} from 'react';
import {
  FileTextOutlined,
  OrderedListOutlined,
  PlusCircleOutlined,
  SecurityScanOutlined
} from "@ant-design/icons";

const {Sider} = Layout;

const AISider = () => {
  const {pathname} = useLocation();
  const [openKeys, setOpenKeys] = useState([]);
  const getItem = (label, key, icon, children) => {
    return {
      key,
      icon,
      children,
      label
    };
  };
  const createSidebarItems = () => {
    return [
      getItem(<Link to='/scans'>扫描总览</Link>, '/scans', <SecurityScanOutlined />),
      getItem(<Link to='/scans/add'>新增扫描</Link>, '/scans/add', <PlusCircleOutlined/>),
      getItem(<Link to='/scans/profiles'>扫描配置</Link>, '/scans/profiles', <OrderedListOutlined />),
      getItem(<Link to='/scans/report'>扫描报告</Link>,  '/scans/report', <FileTextOutlined />)
    ];
  };

  const onMenuOpenChange = (openKeys) => {
    setOpenKeys(openKeys);
  };

  const location = useLocation();

  useEffect(() => {
    setOpenKeys([pathname.split('/')[1]]);
  }, [location]);

  return (
    <Sider width={250} style={{boxShadow: '0px 0px 5px 5px rgba(0,0,0,.2)'}} collapsible={true}>
      {/* 高亮原理：defaultSelectedKeys === item key */}
      {/* 获取当前激活的path路径？ */}
      {/*  defaultSelectedKeys: 初始化渲染的时候生效一次 */}
      {/* selectedKeys: 每次有值更新时都会重新渲染视图 */}
      <div style={{
        height: '32px',
        background: 'rgba(255, 255, 255, 0.2)',
        margin: '16px',
        borderRadius: '16px',
        textAlign: 'center',
        color: 'white',
        fontSize: '1.5em',
      }}>
      </div>
      <Menu
        mode="inline"
        theme="dark"
        openKeys={openKeys}
        selectedKeys={pathname}
        onOpenChange={onMenuOpenChange}
        style={{
          height: '100%',
          borderRight: 0,
          overflowY: 'auto'
        }}

        items={createSidebarItems()}
      >
      </Menu>
    </Sider>
  );
};
export default observer(AISider);
