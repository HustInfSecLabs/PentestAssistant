import React, { useEffect, useState } from 'react';
import ContentHeader from '../components/ContentHeader';
import {
  SecurityScanOutlined,
  DeleteColumnOutlined,
  DeleteOutlined,
  MoreOutlined,
  QuestionCircleOutlined
} from '@ant-design/icons';
import mainStyle from '../MainContent.module.css';
import {
  Badge,
  Button,
  Descriptions,
  Empty,
  message,
  Modal,
  Popconfirm,
  Typography,
  Layout,
  Tag,
  Row,
  Col,
  Statistic, Card, Checkbox, Tooltip
} from 'antd';
import { ProList } from '@ant-design/pro-components';
import { useNavigate } from 'react-router-dom';

import { useStore } from '@/store';

const { Title } = Typography;

const statusDict = {
  Running: <Tag color='blue'>运行中</Tag>,
  Stopped: <Tag color='green'>正常停止</Tag>,
  Halted: <Tag color='orange'>手动停止</Tag>,
  Timeout: <Tag color='cyan'>超时停止</Tag>,
  Error: <Tag color='red'>错误</Tag>,
  Unused: <Tag color='lightgray'>未使用</Tag>,
  Unknown: <Tag color='lightgray'>未知</Tag>
};

const authDict = {
  None: '不开启',
  Basic: 'HTTP Basic',
  Digest: 'Digest',
  Form: '表单'
};

const levelRender = {
  high: { color: 'red', cn: '高危' },
  medium: { color: 'orange', cn: '中危' },
  low: { color: 'yellow', cn: '低危' },
  information: { color: 'lightblue', cn: '信息' },
  unknown: { color: 'lightgray', cn: '未知' }
};

const CurrentScanCard = (props) => {
  const [displayState, setDisplayState] = useState({ emptyDisplay: 'block', descriptionsDisplay: 'none' });
  const [scanStatus, setScanStatus] = useState({
    target: 'http://localhost:8001/',
    scanId: 'f399f3c73ce2eb10a5f8647e681a2cb52a0dd72d2225f215458ccd8b10132d35',
    creator: 'websds',
    createTime: '2023/6/20 10:12:50',
    status: '运行中'
  });
  const { scanStore } = useStore();

  const changeState = (display) => {
    if (display) {
      setDisplayState((displayState) => {
        if (displayState.emptyDisplay === 'block') {
          refreshScanList();
        }
        return { emptyDisplay: 'none', descriptionsDisplay: 'block' };
      });
    } else if (!display) {
      setDisplayState((displayState) => {
        if (displayState.emptyDisplay === 'none') {
          refreshScanList();
        }
        return { emptyDisplay: 'block', descriptionsDisplay: 'none' };
      });
    }
  };
  const { refreshScanList } = props.props;

  const updateRunningStatus = (showMessage = true) => {
    // TODO: 后端接口更新
    scanStore.getRunningScan().then(res => {
      if (res.scanId === null) {
        changeState(false);
      } else {
        setScanStatus(res);
        changeState(true);
      }
      if (showMessage) {
        message.success('刷新成功');
      }
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onClickStop = () => {
    scanStore.stopRunningScan().then(res => {
      message.success('已发送停止扫描指令');
    }).catch(err => {
      message.error('发送停止扫描指令失败');
      console.log(err);
    }).finally(() => {
      updateRunningStatus(false);
      refreshScanList();
    });
  };

  useEffect(() => {
    const statusInterval = setInterval(() => {
      updateRunningStatus(false);
    }, 1000);
    return () => {
      clearInterval(statusInterval);
    };
  }, []);

  useEffect(() => {
    refreshScanList();
  }, []);

  return (
    <>
      <Card size="small" style={{
        display: displayState.descriptionsDisplay,
        marginLeft: 20,
        marginRight: 20
      }}>
        <Row gutter={24}>
          <Col span={12}>
            <Statistic title="已扫描URL数" value={scanStatus.urlCount}/>
          </Col>
          <Col span={12}>
            <Statistic title="已扫描漏洞数" value={scanStatus.vulnCount}/>
          </Col>
        </Row>
      </Card>

      <ProList
        style={{ display: displayState.descriptionsDisplay }}
        rowKey="scanId"
        dataSource={[scanStatus]}
        metas={{
          title: {
            dataIndex: 'name'
          },
          description: {
            dataIndex: 'target',
            render: (target) => (
              `目标：${target}`
            )
          },
          content: {
            dataIndex: 'content',
            render: (text) => (
              <div key="label" style={{ display: 'flex', justifyContent: 'space-around' }}>
                <div style={{ width: 64 }}>
                  <div style={{ color: '#00000073' }}>创建者</div>
                  <div style={{ color: '#000000D9' }}>{scanStatus.creator}</div>
                </div>
                <div style={{ width: 128 }}>
                  <div style={{ color: '#00000073' }}>创建时间</div>
                  <div style={{ color: '#000000D9' }}>{scanStatus.createTime}</div>
                </div>
                <div style={{ width: 128 }}>
                  <div style={{ color: '#00000073' }}>状态</div>
                  <div style={{ color: '#000000D9' }}>{statusDict[scanStatus.status]}
                  </div>
                </div>
              </div>
            )
          },
          actions: {
            render: (element) => {
              return (
                <>
                  <Popconfirm
                    placement="top"
                    title="是否停止当前扫描？"
                    onConfirm={onClickStop}
                    okText="确定"
                    cancelText="取消"
                    okType='danger'
                  >
                    <Button style={{ marginRight: 5 }} type={'primary'} danger>停止</Button>
                  </Popconfirm>

                  <Button style={{ marginRight: 5 }} type={'primary'}
                          onClick={() => updateRunningStatus()}>刷新</Button>
                </>
              );
            }
          }
        }}
        toolbar={{
          actions: [],
          search: false
        }}
      >
      </ProList>

      <Empty style={{ display: displayState.emptyDisplay }} description={'暂无正在运行的扫描任务'}/>
    </>
  );
};

const ScanListActionRender = ({ item }) => {
  const { scanStore } = useStore();
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [scanDetails, setScanDetails] = useState({});
  const navigate = useNavigate();

  const onDeleteConfirm = () => {
    scanStore.deleteScan(item.scanId).then(res => {
      message.success('删除成功');
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    }).finally(() => {
      item.refreshScanList();
    });
  };

  const onDetailsButtonClick = () => {
    scanStore.getScanContent(item.scanId).then(res => {
      setScanDetails(res);
      setIsDetailsModalOpen(true);
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const handleOk = () => {
    setIsDetailsModalOpen(false);
  };

  const onReportButtonClick = () => {
    navigate(`/scans/report?taskId=${item.scanId}`);
  };

  return (
    <>
      <Button type='link' key='details' onClick={onDetailsButtonClick} icon={<MoreOutlined/>}>详情</Button>
      <Popconfirm placement="left" onConfirm={onDeleteConfirm} okType='danger'
                  title="是否确认删除该扫描？" okText="删除" cancelText="取消">
        <Button type='link' key='delete' danger icon={<DeleteOutlined/>}>删除</Button>
      </Popconfirm>
      <Modal
        title="扫描详情"
        visible={isDetailsModalOpen}
        onOk={handleOk}
        onCancel={handleOk}
        width={1000}
        footer={
          <Button key="modalOk" onClick={handleOk}>返回</Button>
        }
      >
        <Descriptions bordered column={6}>
          <Descriptions.Item label="任务名" span={6}>{scanDetails?.name}</Descriptions.Item>
          <Descriptions.Item label="目标" span={6}>{scanDetails?.target}</Descriptions.Item>

          <Descriptions.Item label="扫描ID" span={6}>{scanDetails?.scanId}</Descriptions.Item>

          <Descriptions.Item label="状态" span={2}>{statusDict[scanDetails?.status]}</Descriptions.Item>
          <Descriptions.Item label="创建者" span={2}>{scanDetails?.creator}</Descriptions.Item>
          <Descriptions.Item label="创建时间" span={2}>{scanDetails?.createTime}</Descriptions.Item>

          <Descriptions.Item span={6}></Descriptions.Item>

          <Descriptions.Item label="最大扫描时间" span={2}>{scanDetails?.profile?.maxScanTime}秒</Descriptions.Item>
          <Descriptions.Item label="最大响应时间" span={2}>{scanDetails?.profile?.maxResponseTime}秒</Descriptions.Item>
          <Descriptions.Item span={2}></Descriptions.Item>

          <Descriptions.Item label="认证方式" span={2}>{authDict[scanDetails?.profile?.auth]}</Descriptions.Item>
          {
            scanDetails?.profile?.auth === 'None'
              ? <Descriptions.Item span={4}></Descriptions.Item>
              : <>
                <Descriptions.Item label="用户名" span={2}>{scanDetails?.profile?.authUsername}</Descriptions.Item>
                <Descriptions.Item label="密码" span={2}>{scanDetails?.profile?.authPassword}</Descriptions.Item>
              </>
          }

          <Descriptions.Item label="开启爬取"
                             span={2}>{scanDetails?.profile?.enableCrawling ? '是' : '否'}</Descriptions.Item>
          <Descriptions.Item label="仅前向爬取"
                             span={2}>{scanDetails?.profile?.onlyForward ? '是' : '否'}</Descriptions.Item>
          <Descriptions.Item span={2}></Descriptions.Item>

          <Descriptions.Item label="正则匹配" span={6}>{scanDetails?.profile?.followRegex}</Descriptions.Item>

          <Descriptions.Item label="漏洞等级警告阈值" span={6}>
            <Tag
              color={levelRender[scanDetails?.profile?.warningThreshold.toLowerCase()]?.color}>{levelRender[scanDetails?.profile?.warningThreshold.toLowerCase()]?.cn}</Tag>
          </Descriptions.Item>

          <Descriptions.Item label="漏洞扫描策略" span={6}>
            {scanDetails?.profile?.policies}
          </Descriptions.Item>

          <Descriptions.Item label="HTTP代理" span={6}>{scanDetails?.profile?.proxy}</Descriptions.Item>
          <Descriptions.Item label="HTTP报头" span={6}>{scanDetails?.profile?.headers}</Descriptions.Item>

          <Descriptions.Item label="W3af引擎" span={2}>{scanDetails?.profile?.engine?.w3af
            ? <Tag color='green'>开启</Tag>
            : <Tag color='red'>关闭</Tag>}</Descriptions.Item>
          <Descriptions.Item label="ZAProxy引擎" span={2}>{scanDetails?.profile?.engine?.zaproxy
            ? <Tag color='green'>开启</Tag>
            : <Tag color='red'>关闭</Tag>}</Descriptions.Item>
          <Descriptions.Item label="Arachni引擎" span={2}>{scanDetails?.profile?.engine?.arachni
            ? <Tag color='green'>开启</Tag>
            : <Tag color='red'>关闭</Tag>}</Descriptions.Item>

          <Descriptions.Item label="W3af状态" span={2}>
            {statusDict[scanDetails?.engineStatus?.w3afStatus?.status]}
            {(scanDetails?.engineStatus?.w3afStatus?.message ?? '') !== '' &&
              <Tooltip title={scanDetails?.engineStatus?.w3afStatus?.message} >
                <QuestionCircleOutlined style={{ cursor: 'pointer' }}/>
              </Tooltip>
            }
          </Descriptions.Item>
          <Descriptions.Item label="ZAProxy状态" span={2}>
            {statusDict[scanDetails?.engineStatus?.zaproxyStatus?.status]}
            {(scanDetails?.engineStatus?.zaproxyStatus?.message ?? '') !== '' &&
              <Tooltip title={scanDetails?.engineStatus?.zaproxyStatus?.message} >
                <QuestionCircleOutlined style={{ cursor: 'pointer' }}/>
              </Tooltip>
            }
          </Descriptions.Item>
          <Descriptions.Item label="Arachni状态" span={2}>
            {statusDict[scanDetails?.engineStatus?.arachniStatus?.status]}
            {(scanDetails?.engineStatus?.arachniStatus?.message ?? '') !== '' &&
              <Tooltip title={scanDetails?.engineStatus?.arachniStatus?.message} >
                <QuestionCircleOutlined style={{ cursor: 'pointer' }}/>
              </Tooltip>
            }
          </Descriptions.Item>

          <Descriptions.Item label="扫描结果" span={6}><Button type='primary' ghost
                                                               onClick={onReportButtonClick}>查看扫描报告...</Button></Descriptions.Item>
        </Descriptions>
      </Modal>
    </>
  );
};

const ScanListContent = () => {
  const { scanStore } = useStore();
  const [scanList, setScanList] = useState([]);
  const [originalScanList, setOriginalScanList] = useState([]);
  const [searchValue, setSearchValue] = useState('');
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const rowSelection = {
    selectedRowKeys,
    hideSelectAll: false,
    onChange: (keys) => setSelectedRowKeys(keys)
  };

  const onToggleAllSelect = () => {
    if (selectedRowKeys.length === scanList.length) {
      setSelectedRowKeys([]);
    } else {
      setSelectedRowKeys(scanList.map(item => item.scanId));
    }
  };

  const onDeleteColumnConfirm = () => {
    if (selectedRowKeys.length === 0) {
      message.warning('请先选择要删除的任务');
      return;
    }
    Promise.allSettled(selectedRowKeys.map(scanId => scanStore.deleteScan(scanId)))
      .then((results) => {
        let successCount = 0;
        results.forEach((result, index) => {
          if (result.status === 'fulfilled') {
            successCount++;
          } else {
            message.error(result?.reason?.response?.data?.msg ?? result?.reason);
          }
        });
        if (successCount > 0) {
          message.success(`成功删除${successCount}个扫描`);
        }
        refreshScanList();
      }).catch(err => {
        message.error(err?.response?.data?.msg ?? err.message);
      });
  };

  const refreshScanList = (refreshSelected = true) => {
    if (refreshSelected) {
      setSelectedRowKeys([]);
    }
    scanStore.getScanList().then(res => {
      const newScanList = res.scans.map(item => ({
        scanId: item.scanId,
        name: item.name,
        target: item.target,
        content: {
          creator: item.creator,
          createTime: item.createTime,
          status: item.status
        }
      }));
      setScanList(newScanList);
      setOriginalScanList(newScanList);
      setSearchValue('');
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  useEffect(() => {
    refreshScanList();
  }, []);

  return (
      <>
        <Title level={4} style={{
          margin: 8,
          padding: 8
        }}>
          正在进行的扫描
        </Title>
        <CurrentScanCard props={{ refreshScanList }}/>

        <Title level={4} style={{
          margin: 8,
          padding: 8
        }}>
          已完成的扫描
        </Title>
        <ProList
          rowKey="scanId"
          dataSource={scanList}
          metas={{
            title: {
              dataIndex: 'name'
            },
            description: {
              dataIndex: 'target',
              render: (target) => (
                `目标：${target}`
              )
            },
            content: {
              dataIndex: 'content',
              render: (text) => (
                <div key="label" style={{ display: 'flex', justifyContent: 'space-around' }}>
                  <div style={{ width: 64 }}>
                    <div style={{ color: '#00000073' }}>创建者</div>
                    <div style={{ color: '#000000D9' }}>{text.creator}</div>
                  </div>
                  <div style={{ width: 128 }}>
                    <div style={{ color: '#00000073' }}>创建时间</div>
                    <div style={{ color: '#000000D9' }}>{text.createTime}</div>
                  </div>
                  <div style={{ width: 128 }}>
                    <div style={{ color: '#00000073' }}>状态</div>
                    <div style={{ color: '#000000D9' }}>{statusDict[text.status]}</div>
                  </div>
                </div>
              )
            },
            actions: {
              render: (element) => {
                const { record: item } = element.props;
                item.refreshScanList = refreshScanList;
                return (<ScanListActionRender key={item.scanId} item={item}/>);
              }
            }
          }}
          toolbar={{
            actions: [
              <Checkbox key='checkAll' onChange={onToggleAllSelect} checked={selectedRowKeys.length === scanList.length && scanList.length !== 0}
                        indeterminate={selectedRowKeys.length !== 0 && selectedRowKeys.length !== scanList.length}>全选</Checkbox>,
              <Popconfirm key='deleteColumn' placement="bottomLeft" onConfirm={onDeleteColumnConfirm} okType='danger'
                          okText='删除'
                          cancelText='取消' title={`是否删除共${selectedRowKeys.length}个任务？`}>
                <Button danger type='primary' icon={<DeleteColumnOutlined/>}>删除扫描任务</Button>
              </Popconfirm>
            ],
            search: {
              placeholder: '请输入搜索字符串',
              value: searchValue,
              onChange: (e) => {
                setSelectedRowKeys([]);
                setSearchValue(e.target.value);
                setScanList(
                  originalScanList.filter(item => (
                    item.name.includes(e.target.value) || item.target.includes(e.target.value)
                  ))
                );
              }
            }
          }}
          rowSelection={rowSelection}
        >
        </ProList>
      </>
  );
}
;

const ScanList = () => {
  const navigate = useNavigate();
  const onAddButtonClick = () => {
    navigate('/scans/add');
  };
  return (
      <Layout>
        <ContentHeader>
          <div type='caption'><SecurityScanOutlined/> 扫描</div>
          <div type='operation'>
            <Button type='primary' icon={<SecurityScanOutlined/>} onClick={onAddButtonClick}>新建扫描任务</Button>
          </div>
        </ContentHeader>
        <Layout className={mainStyle.mainContent}>
          <ScanListContent/>
        </Layout>
      </Layout>
  );
}
;
export default ScanList;
