import React, { useEffect, useState } from 'react';
import ContentHeader from '@/components/ContentHeader';
import {
  BulbOutlined,
  FileExcelOutlined,
  FileTextOutlined,
  PlusOutlined,
  SearchOutlined,
  UploadOutlined
} from '@ant-design/icons';
import { Button, Descriptions, Divider, Layout, message, Modal, Select, Tabs, Tag, Input, Popconfirm } from 'antd';
import mainStyle from '../MainContent.module.css';
import { ProTable, ProList } from '@ant-design/pro-components';
import convert from 'xml-js';

import { ReportScanURLChart, ReportScanVulnChart } from './ScanReportChart';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useStore } from '@/store';
import { VulnDetailRender } from './VulDatabase';

const methodColor = {
  GET: 'green',
  POST: 'blue',
  HEAD: 'volcano',
  PUT: 'orange',
  DELETE: 'lime',
  OPTIONS: 'cyan',
  CONNECT: 'geekblue',
  TRACE: 'purple'
};

const typeCN = {
  interface: '接口',
  webpage: '页面',
  html: 'HTML页面',
  cgi: 'CGI页面',
  php: 'PHP页面',
  asp: 'ASP页面',
  jsp: 'JSP页面',
  stylesheet: 'CSS样式表',
  image: '图片',
  audio: '音频',
  video: '视频',
  font: '字体',
  script: '脚本',
  media: '媒体',
  static: '静态资源',
  unknown: '其他'
};

const levelRender = {
  high: { color: 'red', cn: '高危' },
  medium: { color: 'orange', cn: '中危' },
  low: { color: 'yellow', cn: '低危' },
  informational: { color: 'lightblue', cn: '信息' },
  unknown: { color: 'lightgray', cn: '未知' }
};

const ReportScanRowExpand = ({ record }) => {
  const href = record.href;
  const [modal, contextHolder] = Modal.useModal();
  const onDetailsButtonClick = (row) => {
    const tabItems = [];
    const engineRender = {
      w3af: 'W3AF引擎',
      zaproxy: 'ZAProxy引擎',
      arachni: 'Arachni引擎'
    };
    for (const [key, value] of Object.entries(row.properties)) {
      if (value.count > 0) {
        tabItems.push({
          key,
          label: engineRender[key],
          children: (
            <Descriptions column={1} bordered layout="vertical" style={{ width: '100%', overflowX: 'auto' }}>
              <Descriptions.Item label="警告数量" span={1}>{value.count}</Descriptions.Item>
              <Descriptions.Item label="警告详情" span={1} style={{ width: '100%', overflowX: 'auto' }}>
                <ProList
                  size="small"
                  itemLayout="vertical"
                  rowKey="index"
                  dataSource={value.information.map((info, index) => ({ index, info }))}
                  pagination={{
                    pageSize: 1
                  }}
                  metas={{
                    title: {
                      dataIndex: 'index',
                      render: (index) => <span>警告{index + 1}</span>
                    },
                    description: {
                      dataIndex: 'info',
                      render: (info) => info.description
                    },
                    content: {
                      dataIndex: 'info',
                      render: (info) => {
                        return (
                          <Descriptions bordered column={1} style={{ width: '100%', overflowX: 'auto' }}>
                            {info?.proof
                              ? <Descriptions.Item label="证明" span={1}>{info.proof}</Descriptions.Item>
                              : null}
                            {info?.evidence
                              ? <Descriptions.Item label="证明" span={1}>{info.evidence}</Descriptions.Item>
                              : null}
                            {info?.attack
                              ? <Descriptions.Item label="攻击" span={1}>{info.attack}</Descriptions.Item>
                              : null}
                            <Descriptions.Item label="请求" span={1}>
                              <div style={{ width: 700, maxHeight: 400, overflow: 'auto' }}>
                                {
                                  // CodeMirror有bug，这里暂且禁用
                                  // <CodeMirror value={info?.request} extensions={[langs.http()]} options={{ lineWrapping: false }}/>
                                  <Input.TextArea value={info?.request}>
                                  </Input.TextArea>
                                }
                              </div>
                            </Descriptions.Item>
                            <Descriptions.Item label="回应" span={1}>
                              <div style={{ width: 700, maxHeight: 400, overflow: 'auto' }}>
                                {
                                  // CodeMirror有bug，这里暂且禁用
                                  // <CodeMirror value={info?.response} extensions={[langs.http()]} options={{ lineWrapping: false }}/>
                                  <Input.TextArea value={info?.response}>
                                  </Input.TextArea>
                                }
                              </div>
                            </Descriptions.Item>
                          </Descriptions>
                        );
                      }
                    }

                  }}
                  toolbar={{
                    actions: [],
                    showSearch: false
                  }}

                />
              </Descriptions.Item>
            </Descriptions>
          )
        });
      }
    }
    modal.info({
      title: '漏洞URL详情',
      width: '60%',
      content: (
        <>
          <Divider/>
          <Descriptions column={2}>
            <Descriptions.Item label="漏洞名" span={1}>{record.name}</Descriptions.Item>
            <Descriptions.Item label="漏洞等级" span={1}>
              <Tag
                color={(levelRender[record.level] ?? levelRender.unknown).color}>{(levelRender[record.level] ?? levelRender.unknown).cn}</Tag>
            </Descriptions.Item>

            <Descriptions.Item label="URL" span={2}><Link to={row.url}>{row.url}</Link></Descriptions.Item>
          </Descriptions>
          <Divider/>
          <Tabs defaultActiveKey={tabItems[0]?.key} items={tabItems}>
          </Tabs>
        </>
      ),
      okText: '返回',
      maskClosable: true
    });
  };
  return (
    <>
      {contextHolder}
      <ProList
        size="small"
        rowKey="url"
        dataSource={href}
        metas={{
          description: {
            dataIndex: 'url',
            render: (url) => (
              <Link to={url} key={url + '_title'}>{url}</Link>
            )
          },
          content: {},
          actions: {
            render: (text, row) => {
              const properties = row.properties;
              return [
                properties?.w3af?.count > 0 &&
                <Tag color="blue" key={'w3af_' + row.url}>W3AF: {properties?.w3af?.count}</Tag>,
                properties?.arachni?.count > 0 &&
                <Tag color="purple" key={'arachni_' + row.url}>Arachni: {properties?.arachni?.count}</Tag>,
                properties?.zaproxy?.count > 0 &&
                <Tag color="green" key={'zaproxy_' + row.url}>ZAProxy: {properties?.zaproxy?.count}</Tag>,
                <Button type="link" key={'detail_' + row.url} icon={<SearchOutlined/>} onClick={() => {
                  onDetailsButtonClick(row);
                }}>详情</Button>
              ];
            }
          }
        }}
        toolbar={{
          actions: [],
          showSearch: false
        }}
      >
      </ProList>
    </>
  );
};

const ScanReport = () => {
  const scanId = new URLSearchParams(useLocation().search).get('taskId');
  const { reportStore, targetStore, scanStore, aiStore } = useStore();

  const [originalScanURL, setOriginalScanURL] = useState([]);
  const [originalScanVuln, setOriginalScanVuln] = useState([]);

  const [reportScanURL, setReportScanURL] = useState([]);
  const [reportScanVuln, setReportScanVuln] = useState([]);
  const [reportListOptions, setReportListOptions] = useState([]);

  const navigate = useNavigate();

  const urlColumns = [
    {
      title: '方法',
      dataIndex: 'method',
      key: 'method',
      valueType: 'select',
      fieldProps: {
        options: Object.entries(methodColor).map(([key, _]) => ({ label: key, value: key })),
        allowClear: true,
        showSearch: true,
        mode: 'multiple'
      },
      renderText: (method) => (
        <Tag color={methodColor[method]}>{method}</Tag>
      )
    },
    {
      title: 'URL',
      dataIndex: 'url',
      key: 'url',
      valueType: 'text',
      render: (url) => (
        <a href={url} target="_blank" rel="noreferrer">{url}</a>
      )
    },
    {
      title: '类型',
      dataIndex: 'resourceType',
      key: 'resourceType',
      valueType: 'select',
      fieldProps: {
        options: Object.entries(typeCN).map(([key, value]) => ({ label: value, value: key })),
        allowClear: true,
        showSearch: true,
        mode: 'multiple'
      },
      renderText: (resourceType) => (
        <Tag>{typeCN[resourceType] ?? typeCN.unknown}</Tag>
      )
    },
    {
      title: '操作',
      key: 'actions',
      search: false,
      render: (text, record) => (
        <Button type="link" icon={<PlusOutlined/>} onClick={() => addTargetFromScan(record.url)}>添加至扫描目标</Button>
      )
    }
  ];

  const vulnColumns = [
    {
      title: '漏洞名',
      dataIndex: 'name',
      key: 'name',
      valueType: 'text'
    },
    {
      title: '漏洞等级',
      dataIndex: 'level',
      key: 'level',
      valueType: 'select',
      fieldProps: {
        options: Object.entries(levelRender).map(([key, value]) => ({ label: value.cn, value: key })),
        allowClear: true,
        showSearch: true,
        mode: 'multiple'
      },
      renderText: (level) => (
        <Tag
          color={(levelRender[level] ?? levelRender.unknown).color}>{(levelRender[level] ?? levelRender.unknown).cn}</Tag>
      )
    },
    {
      title: 'CWE编号',
      dataIndex: 'cwe',
      key: 'cwe',
      valueType: 'text',
      render: (cwe) => (
        cwe === -1 ? '暂无' : cwe
      )
    },
    {
      title: '漏洞URL数量',
      dataIndex: 'urlCount',
      key: 'urlCount',
      search: false
    },
    {
      title: '详细信息',
      key: 'details',
      search: false,
      render: (text, record) => (
        <VulnDetailRender item={record}/>
      )
    }

  ];

  const addTargetFromScan = (url) => {
    targetStore.addTarget({ url, source: reportListOptions.find((item) => item.value === scanId).label }).then((res) => {
      message.success('添加成功');
    }).catch((err) => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const getReportList = () => {
    reportStore.getReportList().then((res) => {
      const scanReports = res.reports.filter((report) => report.type === 'scan');
      setReportListOptions(scanReports.map((report) => (
        { value: report.taskId, label: report.name }
      )));
      if (!scanId || scanId === '') {
        if (scanReports?.length > 0) {
          if (window.location.href.includes('/scans/report')) {
            navigate(`/scans/report?taskId=${scanReports[0]?.taskId}`);
          }
        } else {
          message.warning('暂无报告，请先进行扫描');
        }
      }
    }).catch((err) => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const updateReportScan = () => {
    if (!scanId) return;
    reportStore.getScanReportContent(scanId).then((res) => {
      setReportScanURL(res.urls);
      setOriginalScanURL(res.urls);
      const newVulns = res.vulns.map((vuln) => ({
        ...vuln,
        urlCount: vuln?.href?.length ?? 0
      }));
      setReportScanVuln(newVulns);
      setOriginalScanVuln(newVulns);
    }).catch((err) => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onReportSelectChange = (value) => {
    navigate(`/scans/report?taskId=${value}`);
  };

  const onURLSearch = (values) => {
    let newUrl = originalScanURL;

    if (values?.method && values?.method?.length > 0) {
      newUrl = newUrl.filter((item) => values.method.includes(item.method));
    }
    if (values?.url && values?.url?.length > 0) {
      newUrl = newUrl.filter((item) => item.url.toLowerCase().includes(values.url.toLowerCase()));
    }
    if (values?.resourceType && values?.resourceType?.type?.length > 0) {
      newUrl = newUrl.filter((item) => values.resourceType.includes(item.resourceType));
    }

    setReportScanURL(newUrl);
  };

  const onVulnSearch = (values) => {
    let newVuln = originalScanVuln;

    if (values?.name && values?.name?.length > 0) {
      newVuln = newVuln.filter((item) => item.name.toLowerCase().includes(values.name.toLowerCase()));
    }

    if (values?.level && values?.level?.length > 0) {
      newVuln = newVuln.filter((item) => values.level.includes(item.level));
    }

    if (values?.cwe && values?.cwe?.length > 0) {
      newVuln = newVuln.filter((item) => item.cwe.includes(values.cwe));
    }

    setReportScanVuln(newVuln);
  };

  const onReportDelete = () => {
    scanStore.deleteScan(scanId).then(() => {
      message.success('删除成功');
      navigate('/scans');
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onReportDownload = () => {
    reportStore.downloadReport({
      type: 'scan',
      taskId: scanId,
      name: reportListOptions.find((item) => item.value === scanId)?.label
    }).then(() => {
      message.success('导出成功');
    }).catch((err) => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onAISummary = () => {
    if (!scanId) {
      message.warning('请先选择报告');
      return;
    }
    aiStore.runSummary({
      name: reportListOptions.find((item) => item.value === scanId)?.label,
      scanId
    }).then((res) => {
      message.info('AI总结中...');
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  useEffect(() => {
    updateReportScan();
    getReportList();
  }, [scanId]);

  return (
      <Layout>
        <ContentHeader>
          <div type='caption'><FileTextOutlined/> Web安全扫描报告</div>
          <div type='operation'>
            <Select
              showSearch
              style={{ width: 240 }}
              options={reportListOptions}
              value={scanId ?? ''}
              onChange={onReportSelectChange}
              placeholder="请选择报告"
              filterOption={(input, option) =>
                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
              }
            >
            </Select>
            <Button type="primary" icon={<UploadOutlined/>} onClick={onReportDownload}>导出报告</Button>
            <Popconfirm
              okType='danger' okText='删除' cancelText='取消' title='将删除对应扫描任务，是否继续？'
              placement="bottomRight"
              onConfirm={onReportDelete}
            >
              <Button type="primary" danger icon={<FileExcelOutlined/>}>删除报告</Button>
            </Popconfirm>
            <Button type="primary" ghost icon={<BulbOutlined/>} onClick={onAISummary}>AI总结</Button>
          </div>
        </ContentHeader>
        <Layout className={mainStyle.mainContent}>
          <Tabs defaultActiveKey="url"
                items={[
                  {
                    label: 'URL列表',
                    key: 'url',
                    children:
                      <>
                        <ProTable
                          request={onURLSearch}
                          columns={urlColumns}
                          dataSource={reportScanURL}
                          rowKey="_id"
                          pagination={{
                            showQuickJumper: true
                          }}
                          search={{
                            filterType: 'query'
                          }}
                          dateFormatter="string"
                          headerTitle=""
                          expandable={{
                            expandedRowRender: (record) => (
                              <Descriptions>
                                <Descriptions.Item span={3}
                                                   label="POST数据">{record.post_data}</Descriptions.Item>
                              </Descriptions>

                            ),
                            rowExpandable: () => false
                          }}
                        />
                        <ReportScanURLChart urls={reportScanURL}/>
                      </>
                  },
                  {
                    label: '漏洞列表',
                    key: 'vulns',
                    children:
                      <>
                        <ProTable
                          columns={vulnColumns}
                          dataSource={reportScanVuln}
                          request={onVulnSearch}
                          rowKey="_id"
                          pagination={{
                            showQuickJumper: true
                          }}
                          search={{
                            filterType: 'query'
                          }}
                          dateFormatter="string"
                          headerTitle=""
                          expandable={{
                            expandedRowRender: (record) => (
                              <ReportScanRowExpand record={record} key={record._id}/>
                            ),
                            rowExpandable: () => true
                          }}
                        />
                        <ReportScanVulnChart/>
                      </>
                  }
                ]}>

          </Tabs>
        </Layout>
      </Layout>
  );
};
export default ScanReport;
