import React, { useEffect, useState } from 'react';
import { Button, Modal, Steps, message } from 'antd';
import { useStore } from '@/store';
import { ArrowRightOutlined, CheckCircleOutlined, CloseCircleOutlined, LoadingOutlined } from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';

const ScanAddProgress = ({ props }) => {
  const { open, setOpen, target, name, profile, profileId, taskStart, setTaskStart } = props;
  const [current, setCurrent] = useState(0);
  const [stepsStatus, setStepsStatus] = useState('finish');
  const initItems = [
    { title: '任务状态检测' },
    { title: '设置扫描配置' },
    { title: '开启扫描任务' }
  ];
  const [stepsItems, setStepsItems] = useState(initItems);
  const { scanStore } = useStore();
  const navigate = useNavigate();

  const onModalClose = () => {
    if (stepsStatus === 'finish' || stepsStatus === 'error') {
      setOpen(false);
    } else {
      message.warning('扫描任务创建中，请稍候...');
    }
  };

  const checkStatus = () => {
    return new Promise((resolve, reject) => {
      setStepsItems((originalItems) => {
        const items = [...originalItems];
        items[0].description = <div style={{ color: '#1677FF' }}><LoadingOutlined/> 扫描任务状态检测中...</div>;
        return items;
      });
      scanStore.getRunningScan().then((res) => {
        if (res.scanId === null) {
          setStepsItems((originalItems) => {
            const items = [...originalItems];
            items[0].description = <div style={{ color: '#389E0D' }}><CheckCircleOutlined/> 扫描任务状态空闲</div>;
            return items;
          });
          resolve();
        } else {
          reject(new Error('扫描任务状态繁忙，已有任务正在运行'));
        }
      }).catch(err => {
        reject(err);
      });
    });
  };


  const setScanConfig = () => {
    return new Promise((resolve, reject) => {
      if (profileId) {
        // 扫描配置已经创建好
        setStepsItems((originalItems) => {
          const items = [...originalItems];
          items[1].description = <div style={{ color: '#389E0D' }}><CheckCircleOutlined/> 扫描配置已创建</div>;
          return items;
        });
        setTimeout(() => {
          resolve(profileId);
        }, 1000);
      } else if (profile) {
        // 创建扫描配置
        setStepsItems((originalItems) => {
          const items = [...originalItems];
          items[1].description = <>
            <div style={{ color: '#1677FF' }}>配置名：{profile.name}</div>
            <div style={{ color: '#1677FF' }}>配置扫描项：{profile.policies}</div>
            <div style={{ color: '#1677FF' }}><LoadingOutlined/> 扫描配置创建中...</div>
          </>;
          return items;
        });
        scanStore.addScanProfile(profile).then((res) => {
          setStepsItems((originalItems) => {
            const items = [...originalItems];
            items[1].description = <>
              <div style={{ color: '#389E0D' }}>配置名：{profile.name}</div>
              <div style={{ color: '#389E0D' }}>配置扫描项：{profile.policies}</div>
              <div style={{ color: '#389E0D' }}><CheckCircleOutlined/> 扫描配置已创建</div>
            </>;
            return items;
          });
          setTimeout(() => {
            resolve(res.profileId);
          }, 1000);
        }).catch(err => {
          reject(new Error(err?.response?.data?.msg ?? err.message));
        });
      } else {
        reject(new Error('扫描配置未创建'));
      }
    });
  };

  const startScan = (scanProfileId) => {
    return new Promise((resolve, reject) => {
      setStepsItems((originalItems) => {
        const items = [...originalItems];
        items[2].description = <>
          <div style={{ color: '#1677FF' }}>扫描任务名称：{name}</div>
          <div style={{ color: '#1677FF' }}>扫描目标：{target}</div>
          <div style={{ color: '#1677FF' }}><LoadingOutlined/> 扫描任务开启中...</div>
        </>;
        return items;
      });
      scanStore.addScan({
        name,
        target,
        profileId: scanProfileId
      }).then(() => {
        (scanProfileId !== profileId ? scanStore.deleteScanProfile(scanProfileId) : Promise.resolve()).then(() => {
          setStepsItems((originalItems) => {
            const items = [...originalItems];
            items[2].description = <>
              <div style={{ color: '#389E0D' }}>扫描任务名称：{name}</div>
              <div style={{ color: '#389E0D' }}>扫描目标：{target}</div>
              <div style={{ color: '#389E0D' }}><CheckCircleOutlined/> 扫描任务创建完成</div>
              <Button icon={<ArrowRightOutlined/>} type='primary' ghost
                      onClick={() => {
                        setOpen(false);
                        navigate('/scans');
                      }}>查看扫描任务</Button>
            </>;
            return items;
          });
          resolve();
        }).catch(err => {
          reject(err);
        });
      }).catch(err => {
        reject(err);
      });
    });
  };

  const onProgress = async () => {
    setStepsStatus('process');
    setStepsItems(initItems);
    setCurrent(0);
    try {
      await checkStatus();
      setCurrent(1);
      const scanProfileId = await setScanConfig();
      setCurrent(2);
      await startScan(scanProfileId);
      setCurrent(3);
      setStepsStatus('finish');
      setTaskStart(false);
    } catch (err) {
      setCurrent((nowCurrent) => {
        setStepsItems((originalItems) => {
          const items = [...originalItems];
          items[nowCurrent].description =
            <div style={{ color: '#FF4D4F' }}><CloseCircleOutlined/> {'出错：' + (err?.response?.data?.msg ?? err.message)}</div>;
          return items;
        });
        return nowCurrent;
      });
      setStepsStatus('error');
      setTaskStart(false);
    }
  };

  useEffect(() => {
    if (taskStart && (stepsStatus === 'finish' || stepsStatus === 'error')) {
      onProgress();
    }
  }, [taskStart]);

  return (
    <Modal
      open={open}
      title='扫描任务创建中...'
      width={1000}
      onCancel={onModalClose}
      footer={null}
      maskClosable
      centered
    >
      <Steps
        direction="vertical"
        current={current}
        items={stepsItems}
        status={stepsStatus}
      />
    </Modal>
  );
};

export default ScanAddProgress;
