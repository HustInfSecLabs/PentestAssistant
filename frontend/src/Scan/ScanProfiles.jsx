/**
 * 扫描配置页面
 */
import React, { useEffect, useState } from 'react';
import {
  Button,
  Form,
  Input,
  message,
  Switch,
  Layout,
  InputNumber,
  Select,
  Space,
  Radio,
  Slider, Tabs, Spin, Modal, Popconfirm, Checkbox, Upload, Descriptions
} from 'antd';
import {
  DownloadOutlined,
  FileAddOutlined,
  FileDoneOutlined,
  FileExcelOutlined,
  UploadOutlined
} from '@ant-design/icons';
import ContentHeader from '../components/ContentHeader';
import mainStyle from '../MainContent.module.css';
import scanStyle from './Scan.module.css';
import { useStore } from '@/store';
import { useLocation, useNavigate } from 'react-router-dom';

const { TextArea } = Input;
const { TabPane } = Tabs;

const warningThresholdToggle = {
  0: 'informational',
  1: 'low',
  2: 'medium',
  3: 'high',
  4: 'critical',
  informational: 0,
  low: 1,
  medium: 2,
  high: 3,
  critical: 4
};

// TODO: onChange事件不生效的问题
const ScanProfiles = () => {
  const initProfileId = new URLSearchParams(useLocation().search).get('profileId');

  const [hideUserName, setHideUserName] = useState(true);
  const [profileSelectOptions, setProfileSelectOptions] = useState([]);
  const [profileSelection, setProfileSelection] = useState('');
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [newProfileName, setNewProfileName] = useState('');
  const [showCustomCheckbox, setShowCustomCheckbox] = useState(false);
  const [customCheckboxStatus, setCustomCheckboxStatus] = useState({ checked: false, indeterminate: false });

  const navigate = useNavigate();

  const customCheckboxOptions = [
    { value: 'SQL_INJECTION', name: 'SQL注入' },
    { value: 'XSS', name: 'XSS' },
    { value: 'CMD_EXECUTION', name: '代码/命令执行' },
    { value: 'REQUEST_FORGERY', name: '请求伪造' },
    { value: 'PATH_TRAVERSAL', name: '路径遍历' },
    { value: 'XML', name: 'XML相关' },
    { value: 'FILE_DIRECTORY', name: '文件/目录相关' },
    { value: 'SOURCE_CODE', name: '源码相关' },
    { value: 'SERVER_MISCONFIGURATION', name: '服务器配置缺陷' },
    { value: 'AUTH', name: '认证/授权相关' },
    { value: 'INFORMATION_LEAKAGE', name: '信息泄露' },
    { value: 'HTTP', name: 'HTTP相关' },
    { value: 'INJECTION', name: '注入相关' },
    { value: 'OVERFLOW', name: '缓冲区溢出' }
  ];

  const toggleLoading = (checked) => {
    setLoading(checked);
  };

  const [form] = Form.useForm();
  const { scanStore } = useStore();

  const onAutoLoginChange = (e) => {
    if (e.target.value === 'None') {
      setHideUserName(true);
    } else {
      setHideUserName(false);
    }
  };

  const getFormValues = () => {
    const formValues = form.getFieldsValue();
    formValues.warningThreshold = warningThresholdToggle[formValues.warningThreshold];
    formValues.engine = {
      w3af: formValues.w3af,
      zaproxy: formValues.zaproxy,
      arachni: formValues.arachni
    };
    formValues.policies = formValues.policies === 'CUSTOM' ? formValues.policiesChildren.join(' | ') : formValues.policies;
    delete formValues.policiesChildren;
    delete formValues.w3af;
    delete formValues.zaproxy;
    delete formValues.arachni;
    return formValues;
  };

  const onPoliciesChange = (e) => {
    if (e.target.value === 'CUSTOM') {
      setShowCustomCheckbox(true);
    } else {
      setShowCustomCheckbox(false);
    }
  };

  const customCheckboxChange = (values) => {
    if (values.length === customCheckboxOptions.length) {
      setCustomCheckboxStatus({ checked: true, indeterminate: false });
    } else if (values.length === 0) {
      setCustomCheckboxStatus({ checked: false, indeterminate: false });
    } else {
      setCustomCheckboxStatus({ checked: false, indeterminate: true });
    }
  };

  const customCheckboxAllSelect = () => {
    if (customCheckboxStatus.checked) {
      setCustomCheckboxStatus({ checked: false, indeterminate: false });
      form.setFieldsValue({ policiesChildren: [] });
    } else {
      setCustomCheckboxStatus({ checked: true, indeterminate: false });
      form.setFieldsValue({ policiesChildren: customCheckboxOptions.map(item => item.value) });
    }
  };

  const updateProfiles = (newSelection) => {
    toggleLoading(true);
    scanStore.getScanProfiles().then(res => {
      setProfileSelectOptions(res.profiles.map(item => {
        return { value: item.profileId, label: item.name };
      }));
      const selection = newSelection
        ? newSelection?.profileId
          ? res.profiles.find(item => item.profileId === newSelection.profileId)?.profileId ?? res.profiles[0].profileId
          : res.profiles.find(item => item.name === newSelection?.name)?.profileId ?? res.profiles[0].profileId

        : res.profiles[0].profileId;
      updateProfileContent(selection);
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    }).finally(() => {
      setTimeout(() => toggleLoading(false), 200);
    });
  };

  const updateProfileContent = (value, showMessage) => {
    setProfileSelection(value);
    toggleLoading(true);
    scanStore.getScanProfileContent(value).then(res => {
      const policies = res.policies === 'GENERIC' || res.policies === 'ALL' ? res.policies : 'CUSTOM';
      form.setFieldsValue({
        maxScanTime: res.maxScanTime,
        maxResponseTime: res.maxResponseTime,
        auth: res.auth,
        authUsername: res.authUsername,
        authPassword: res.authPassword,
        warningThreshold: warningThresholdToggle[res.warningThreshold],
        policies,
        policiesChildren: policies === 'CUSTOM' ? res.policies.split('|').map(item => item.trim()) : [],
        headers: res.headers,
        proxy: res.proxy,
        w3af: res.engine.w3af,
        zaproxy: res.engine.zaproxy,
        arachni: res.engine.arachni
      });
      // 解决setFieldsValue时onChange事件不生效的问题
      onPoliciesChange({ target: { value: policies } });
      customCheckboxChange(policies === 'CUSTOM' ? res.policies.split('|').map(item => item.trim()) : []);
      onAutoLoginChange({ target: { value: res.auth } });
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    }).finally(() => {
      setTimeout(() => toggleLoading(false), 200);
      if (showMessage) {
        message.success('扫描配置加载成功');
      }
    });
  };

  const showModal = () => {
    setIsModalOpen(true);
    setNewProfileName('新配置');
  };

  const handleOk = () => {
    const formValues = getFormValues();
    formValues.name = newProfileName;
    scanStore.addScanProfile(formValues).then(() => {
      message.success('新建扫描配置成功');
      setIsModalOpen(false);
      updateProfiles({ name: newProfileName });
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const onNewProfileNameInputChange = (e) => {
    setNewProfileName(e.target.value);
  };

  const onSaveButtonClick = () => {
    const formValues = getFormValues();
    scanStore.updateScanProfile(profileSelection, formValues).then(() => {
      message.success('扫描配置保存成功');
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onAddButtonClick = () => {
    showModal();
  };

  const onDeleteConfirm = () => {
    scanStore.deleteScanProfile(profileSelection).then(() => {
      message.success('扫描配置删除成功');
      updateProfiles();
    }).catch(err => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onDownloadButtonClick = () => {
    const formValues = getFormValues();
    const blob = new Blob([JSON.stringify(formValues, null, 4)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${profileSelectOptions.find((item) => item.value === profileSelection).label}.json`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const uploadProps = {
    customRequest: ({ file }) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const fileContent = e.target.result;
        let uploadProfile = {};
        try {
          uploadProfile = JSON.parse(fileContent.toString());
          form.setFieldsValue({
            maxScanTime: uploadProfile.maxScanTime,
            maxResponseTime: uploadProfile.maxResponseTime,
            auth: uploadProfile.auth,
            authUsername: uploadProfile.authUsername,
            authPassword: uploadProfile.authPassword,
            warningThreshold: warningThresholdToggle[uploadProfile.warningThreshold],
            policies: uploadProfile.policies,
            policiesChildren: uploadProfile.policies && uploadProfile.policies === 'CUSTOM' ? uploadProfile.policies.split('|').map(item => item.trim()) : [],
            headers: uploadProfile.headers,
            proxy: uploadProfile.proxy,
            w3af: uploadProfile.engine.w3af,
            zaproxy: uploadProfile.engine.zaproxy,
            arachni: uploadProfile.engine.arachni
          });

          onPoliciesChange({ target: { value: uploadProfile.policies } });
          customCheckboxChange(uploadProfile.policies && uploadProfile.policies === 'CUSTOM' ? uploadProfile.policies.split('|').map(item => item.trim()) : []);
          onAutoLoginChange({ target: { value: uploadProfile.auth } });
        } catch (err) {
          message.error('文件格式错误: ' + err.message);
          return;
        }

        message.success(`${file.name} 文件导入成功`);
      };

      reader.readAsText(file);
    },
    showUploadList: false,
    onChange: (info) => {
      if (info.file.status === 'done') {
        message.success(`${info.file.name} 文件上传成功`);
      } else if (info.file.status === 'error') {
        message.error(`${info.file.name} 文件上传失败`);
      }
    }
  };

  const onProfileSelectionChange = (newSelection) => {
    navigate(`/scans/profiles?profileId=${newSelection}`);
    updateProfileContent(newSelection);
  };

  useEffect(() => {
    updateProfiles({ profileId: initProfileId });
  }, []);

  return (
    <Layout>
      <ContentHeader>
        <div type='caption'><FileDoneOutlined/> 扫描配置</div>
        <div type='operation'>
          <Select
            showSearch
            className={scanStyle.ProfileSelectStyle}
            options={profileSelectOptions}
            value={profileSelection}
            filterOption={(input, option) =>
              (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
            }
            onChange={onProfileSelectionChange}
          />
          <Button type="primary" icon={<FileDoneOutlined/>} onClick={onSaveButtonClick}>保存配置</Button>
          <Button type="default" icon={<FileAddOutlined/>} onClick={onAddButtonClick}>另存为配置</Button>
          <Popconfirm
            placement="bottomLeft"
            title="是否确认删除当前扫描配置？"
            onConfirm={onDeleteConfirm}
            okText="确认"
            cancelText="取消"
            okType='danger'
          >
            <Button type="primary" danger icon={<FileExcelOutlined/>}>删除配置</Button>
          </Popconfirm>
          <Modal title="另存为配置名：" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} okText='确定'
                 cancelText='取消'>
            <Input placeholder="请输入新建配置名" value={newProfileName} onChange={onNewProfileNameInputChange}/>
          </Modal>
        </div>
      </ContentHeader>
      <Layout className={mainStyle.mainContent}>
        <Form
          labelCol={{ span: 4 }}
          wrapperCol={{ span: 10 }}
          initialValues={{
            maxScanTime: '600',
            maxResponseTime: '30',
            auth: 'None',
            enableCrawling: true,
            onlyForward: false,
            policies: 'GENERIC',
            policiesChildren: [],
            w3af: true,
            zaproxy: true,
            arachni: true
          }}
          colon={false}
          layout="horizontal"
          form={form}
        >
          <Space className={scanStyle.ButtonsStyle}>
            <Form.Item label=" ">
              <Upload {...uploadProps}>
                <Button type='primary' icon={<UploadOutlined/>}>导入</Button>
              </Upload>

            </Form.Item>
            <Form.Item label=" ">
              <Button type='default' icon={<DownloadOutlined/>} onClick={onDownloadButtonClick}>导出</Button>
            </Form.Item>
          </Space>

          <Spin spinning={loading} tip="配置加载中..." size='large'>
            <Tabs
              tabPosition='left'
            >
              <TabPane forceRender tab='扫描参数配置' key='1'>
                <Form.Item
                  label="最大扫描持续时间（秒）："
                  name="maxScanTime"
                  rules={[{ required: true, message: '请输入最大扫描持续时间！' }]}
                >
                  <InputNumber placeholder={'请输入最大扫描任务持续时间'} step={20}/>
                </Form.Item>
                <Form.Item
                  label="最大请求响应时间（秒）："
                  name="maxResponseTime"
                  rules={[{ required: true, message: '请输入最大请求响应时间！' }]}>
                  <InputNumber placeholder={'请输入最大最大请求响应时间'} step={5}/>
                </Form.Item>
              </TabPane>

              <TabPane forceRender tab='认证配置' key='2'>

                <Form.Item
                  label='认证方式：'
                  name='auth'
                >
                  <Radio.Group onChange={onAutoLoginChange}>
                    <Radio value='None'>不开启</Radio>
                    <Radio value='Form'>表单</Radio>
                    <Radio value='Basic'>HTTP Basic</Radio>
                    <Radio value='Digest'>Digest</Radio>
                    <Radio value='NTLM'>NTLM</Radio>
                  </Radio.Group>
                </Form.Item>

                <Form.Item label=" " hidden={hideUserName} style={{ marginBottom: 0 }}>
                  <Form.Item
                    label="用户名："
                    name="authUsername"
                    style={{ display: 'inline-block', width: 'calc(40% - 8px)', marginRight: 8 }}>
                    <Input placeholder={'请输入用户名'}/>
                  </Form.Item>

                  <Form.Item
                    label="密码："
                    name="authPassword"
                    style={{ display: 'inline-block', width: 'calc(40% - 8px)', marginLeft: 8 }}>
                    <Input type='password' placeholder={'请输入密码'}/>
                  </Form.Item>
                </Form.Item>

              </TabPane>

              <TabPane forceRender tab='漏洞扫描配置' key='3'>
                <Form.Item
                  label="漏洞等级警告阈值："
                  name="warningThreshold"
                >
                  <Slider max={4}></Slider>
                </Form.Item>

                <Form.Item
                  label="漏洞扫描策略："
                  name="policies"
                >
                  <Radio.Group
                    options={[
                      { label: '通用', value: 'GENERIC' },
                      { label: '全部', value: 'ALL' },
                      { label: '自定义', value: 'CUSTOM' }
                    ]}
                    optionType="button"
                    onChange={onPoliciesChange}
                  />
                </Form.Item>

                <Form.Item
                  label=" "
                  name="policiesChildren"
                  style={{ display: showCustomCheckbox ? 'block' : 'none' }}
                >
                  <Checkbox.Group onChange={customCheckboxChange}>
                    <Space direction='vertical' wrap>
                      {customCheckboxOptions.map((item, index) => {
                        return (
                          <Checkbox key={index} value={item.value}>{item.name}</Checkbox>
                        );
                      })}
                    </Space>

                  </Checkbox.Group>
                </Form.Item>
                <Form.Item
                  label=" "
                  style={{ display: showCustomCheckbox ? 'block' : 'none' }}
                >
                  <Checkbox onChange={customCheckboxAllSelect} checked={customCheckboxStatus.checked}
                            indeterminate={customCheckboxStatus.indeterminate}>全选</Checkbox>
                </Form.Item>

              </TabPane>

              <TabPane forceRender tab='HTTP配置' key='4'>
                <Form.Item
                  label="HTTP代理："
                  name="proxy"
                >
                  <Input placeholder={'请输入HTTP代理'}/>
                </Form.Item>

                <Form.Item
                  label="HTTP报头："
                  name="headers"
                >
                  <TextArea placeholder={'请输入HTTP报头'} rows={8}/>
                </Form.Item>

              </TabPane>

              <TabPane forceRender tab='扫描引擎配置' key='5'>
                <Form.Item
                  label='W3af：'
                  name='w3af'
                  valuePropName='checked'
                >
                  <Switch checkedChildren="开启" unCheckedChildren="关闭"/>
                </Form.Item>

                <Form.Item
                  label='ZAProxy：'
                  name='zaproxy'
                  valuePropName='checked'
                >
                  <Switch checkedChildren="开启" unCheckedChildren="关闭"/>
                </Form.Item>

                <Form.Item
                  label='Arachni：'
                  name='arachni'
                  valuePropName='checked'
                >
                  <Switch checkedChildren="开启" unCheckedChildren="关闭"/>
                </Form.Item>

              </TabPane>
            </Tabs>
          </Spin>
        </Form>
      </Layout>
    </Layout>
  )
  ;
};

export default ScanProfiles;
