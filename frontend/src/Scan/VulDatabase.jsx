import React, { useEffect, useState } from 'react';
import ContentHeader from '../components/ContentHeader';
import { BugOutlined, MoreOutlined } from '@ant-design/icons';
import { Layout, Tag, message, Button, Modal, Descriptions } from 'antd';
import mainStyle from '../MainContent.module.css';
import { ProTable, ProList } from '@ant-design/pro-components';

import { useStore } from '@/store';

const levelRender = {
  high: { color: 'red', cn: '高危' },
  medium: { color: 'orange', cn: '中危' },
  low: { color: 'yellow', cn: '低危' },
  informational: { color: 'lightblue', cn: '信息' },
  unknown: { color: 'lightgray', cn: '未知' }
};

const columns = [
  {
    title: '漏洞名',
    dataIndex: 'name',
    key: 'name',
    valueType: 'text',
    colSize: 1
  },
  {
    title: '危险等级',
    dataIndex: 'level',
    key: 'level',
    colSize: 1,
    valueType: 'select',
    fieldProps: {
      options: Object.entries(levelRender).map(([key, value]) => ({ label: value.cn, value: key })),
      allowClear: true,
      showSearch: true,
      mode: 'multiple'
    },
    renderText: (level) => (
      <Tag color={levelRender[level].color}>{levelRender[level].cn}</Tag>
    )
  },
  {
    title: 'CWE编号',
    dataIndex: 'cwe',
    key: 'cwe',
    valueType: 'text',
    colSize: 1
  },
  {
    title: '详细描述',
    dataIndex: 'description',
    key: 'description',
    colSize: 4,
    ellipsis: false,
    valueType: 'text',
    render: (text) => (
      text.length > 30 ? text.slice(0, 30) + '...' : text
    )
  },
  {
    title: '操作',
    key: 'more',
    colSize: 1,
    search: false,
    render: (text, record) => (
      <VulnDetailRender item={record}/>
    )
  }

];

export const VulnDetailRender = ({ item }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const onButtonClick = () => {
    setIsModalOpen(true);
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const MitigationRender = ({ mitigation }) => {
    return (
      <Descriptions bordered column={6} style={{ marginTop: 20, marginBottom: 20 }}>
        <Descriptions.Item label="阶段" span={3}>{mitigation?.phase || '无'}</Descriptions.Item>
        <Descriptions.Item label="策略" span={3}>{mitigation?.strategy || '无'}</Descriptions.Item>
        <Descriptions.Item label="建议" span={6}>{mitigation?.suggestion}</Descriptions.Item>
      </Descriptions>
    );
  };

  return (
    <>
      <Button type='link' icon={<MoreOutlined/>} onClick={onButtonClick}>查看详情</Button>
      <Modal
        title="漏洞详情"
        open={isModalOpen}
        onOk={handleOk}
        onCancel={handleOk}
        width={1400}
        footer={
          <Button key="modalOk" onClick={handleOk}>返回</Button>
        }
      >
        <Descriptions bordered column={6} layout="vertical">
          <Descriptions.Item label="漏洞名" span={4}>{item?.name}</Descriptions.Item>

          <Descriptions.Item label="危险等级" span={1}>{<Tag
            color={levelRender[item?.level]?.color}>{levelRender[item?.level]?.cn}</Tag>}</Descriptions.Item>
          <Descriptions.Item label="CWE编号" span={1}>{item?.cwe === -1 ? '暂无' : item?.cwe}</Descriptions.Item>

          <Descriptions.Item label="描述信息" span={6}>{item?.description}</Descriptions.Item>

          <Descriptions.Item label="修复建议" span={6}>
            <ProList
              size="small"
              rowKey="index"
              dataSource={item.mitigation ? item.mitigation.map((mitigation, index) => ({ index, mitigation })) : []}
              pagination={{
                pageSize: 1
              }}
              metas={{
                title: {
                  dataIndex: 'index',
                  render: (index) => <span>修复建议{index + 1}</span>
                },
                description: {
                  dataIndex: 'mitigation',
                  render: (mitigation) => <MitigationRender mitigation={mitigation}/>
                },
                content: {}

              }}
              toolbar={{
                actions: [],
                showSearch: true
              }}
            />
          </Descriptions.Item>

        </Descriptions>

      </Modal>
    </>
  );
};

const VulnDatabase = () => {
  const { vulnStore } = useStore();
  const [vulnDatabaseList, setVulnDatabaseList] = useState([]);
  const [oringinalVulnDatabaseList, setOringinalVulnDatabaseList] = useState([]);

  const updateVulnDatabaseList = () => {
    vulnStore.getVulnDatabase().then((res) => {
      setVulnDatabaseList(res.vulnDatabase);
      setOringinalVulnDatabaseList(res.vulnDatabase);
      message.success('获取漏洞数据库成功');
    }).catch((err) => {
      message.error(err?.response?.data?.msg ?? err.message);
    });
  };

  const onVulnSearch = (values) => {
    let newDatabaseList = oringinalVulnDatabaseList;

    if (values?.name && values.name !== '') {
      newDatabaseList = newDatabaseList.filter((item) => item.name.toLowerCase().includes(values.name.toLowerCase()));
    }

    if (values?.level && values.level.length !== 0) {
      newDatabaseList = newDatabaseList.filter((item) => values.level.includes(item.level));
    }

    if (values?.cwe && values.cwe !== '') {
      newDatabaseList = newDatabaseList.filter((item) => item.cwe === values.cwe);
    }

    if (values?.description && values.description !== '') {
      newDatabaseList = newDatabaseList.filter((item) => item.description.toLowerCase().includes(values.description.toLowerCase()));
    }

    setVulnDatabaseList(newDatabaseList);
  };

  useEffect(() => {
    updateVulnDatabaseList();
  }, []);

  return (
    <Layout>
      <ContentHeader>
        <div type='caption'><BugOutlined/> 漏洞数据库列表</div>
        <div type='operation'></div>
      </ContentHeader>
      <Layout className={mainStyle.mainContent}>
        <ProTable
          columns={columns}
          dataSource={vulnDatabaseList}
          request={onVulnSearch}
          rowKey="name"
          pagination={{
            showQuickJumper: true
          }}
          search={{
            filterType: 'query'
          }}
          dateFormatter="string"
          headerTitle=""

        />
      </Layout>
    </Layout>
  );
};
export default VulnDatabase;
