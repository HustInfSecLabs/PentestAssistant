import { makeAutoObservable } from 'mobx';
import { http } from '@/utils';
import convert from 'xml-js';

class ReportStore {
  constructor () {
    makeAutoObservable(this);
  }

  getReportList = async () => {
    return await http.get('/reports');
  };

  getScanReportContent = async (scanId) => {
    return await http.get(`/reports/scans/${scanId}`);
  };

  getTestReportContent = async (testId) => {
    return await http.get(`/reports/cgi/${testId}`);
  };

  getDetectionReportContent = async (detectionId) => {
    return await http.get(`/reports/detections/${detectionId}`);
  };

  downloadReport = async ({ type, taskId, name }) => {
    const deleteIdInObject = (obj) => {
      if (typeof obj !== 'object' || obj === null) {
        return obj;
      }
      const newObj = Array.isArray(obj) ? [] : {};
      for (const key in obj) {
        if (key === '_id') {
          continue;
        }
        if (typeof obj[key] === 'object' && obj[key] !== null) {
          newObj[key] = deleteIdInObject(obj[key]);
        } else {
          newObj[key] = obj[key];
        }
      }
      return newObj;
    };

    const urlType = type === 'scan' ? 'scans' : type === 'test' ? 'cgi' : 'detections';
    const res = await http.get(`/reports/${urlType}/${taskId}`);

    const downloadData = deleteIdInObject(res);

    const xmlData = convert.js2xml(downloadData, { compact: true, spaces: 4 });
    // console.log(xmlData);

    const url = URL.createObjectURL(new Blob([JSON.stringify(downloadData, null, 4)], { type: 'text/plain' }));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `${name ?? '报告'}.json`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
}

export default ReportStore;
