// 封装axios
// 实例化  请求拦截器 响应拦截器

import axios from 'axios';
import { getToken } from './token';
import { history } from './history';
import { message } from 'antd';
const { API_HOST, API_PORT } = require('../config');


const BASE_URL = `http://${API_HOST}:${API_PORT}/api`;
// const BASE_URL = 'http://127.0.0.1:8001/api';
// const BASE_URL = "http://222.20.94.23:23781";
// const BASE_URL = "http://10.12.159.62:8001";

class DisplayMessage {
  constructor () {
    this.ifMessageOpened = false;
  }

  setMessageOpened = (ifMessageOpened) => {
    this.ifMessageOpened = ifMessageOpened;
  };

  error = (msg) => {
    if (!this.ifMessageOpened) {
      this.setMessageOpened(true);
      message.error(msg, 3, () => {
        this.setMessageOpened(false);
      });
    }
  };
}

const displayMessage = new DisplayMessage();

const createHttpAxios = (timeout) => {
  const ret = axios.create({
    baseURL: BASE_URL,
    timeout
  });

  // 添加请求拦截器
  ret.interceptors.request.use((config) => {
    // if not login add token
    const token = getToken();
    if (token) {
      config.headers.Authorization = token;
    }
    return config;
  }, (error) => {
    return Promise.reject(error);
  });

  // 添加响应拦截器
  ret.interceptors.response.use((response) => {
    // 2xx 范围内的状态码都会触发该函数。
    // 对响应数据做点什么
    return response.data;
  }, (error) => {
    // 超出 2xx 范围的状态码都会触发该函数。
    // 对响应错误做点什么

    if (error.response.status === 401) {
      // 跳回到登录 reactRouter默认状态下 并不支持在组件之外完成路由跳转
      // 需要自己来实现
      history.push('/login');
      displayMessage.error(error.response.data.msg);
    }
    return Promise.reject(error);
  });

  return ret;
};

const http = createHttpAxios(60000);

export { http, createHttpAxios, BASE_URL };
